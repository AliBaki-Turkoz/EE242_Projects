/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.05.2022 14:00:53

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 416;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[11];
TfLiteEvalTensor tflEvalTensors[11];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[4];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,33 } };
const ALIGN(16) float tensor_data1[10] = { 0.59614390134811401, -0.53990232944488525, -0.22353765368461609, 0.2851300835609436, 0.89042943716049194, 0.43058291077613831, -0.3090476393699646, 0.40138283371925354, -0.060088071972131729, -0.80180549621582031, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const ALIGN(16) float tensor_data2[10] = { 0.047284606844186783, 0, 0.40803712606430054, -0.066861175000667572, -0.11194500327110291, 0.22021527588367462, 0.12389093637466431, 0.051400668919086456, -0.093456245958805084, -0.13505278527736664, };
const TfArray<1, int> tensor_dimension2 = { 1, { 10 } };
const ALIGN(16) float tensor_data3[20] = { 0.27951285243034363, 0.17425025999546051, -0.044548161327838898, 0.079993009567260742, 0.080708898603916168, -0.22403386235237122, 0.40188175439834595, 0, -0.063297376036643982, 0.4668726921081543, -0.30769670009613037, 0.037177957594394684, -0.1822088360786438, -0.1751018762588501, 0.035512350499629974, -0.11236521601676941, -0.0079979831352829933, -0.088181987404823303, -0.10015763342380524, -0.1125175878405571, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const ALIGN(16) float tensor_data4[20*33] = { 
  -0.13437335193157196, -0.13569220900535583, -0.10337663441896439, -0.12162378430366516, -0.29010942578315735, 0.0097931008785963058, -0.7695770263671875, -0.09111466258764267, -0.31554204225540161, 0.24749700725078583, 0.22743336856365204, -0.018188243731856346, 0.12989337742328644, 0.57104802131652832, 0.026915984228253365, 0.15602432191371918, 0.19874857366085052, 0.092182628810405731, 0.43908917903900146, -0.19771993160247803, 0.18472385406494141, -0.090757496654987335, 0.36690306663513184, 0.0054044164717197418, -0.091005668044090271, -0.41450893878936768, -0.32996487617492676, 0.27692356705665588, -0.25641453266143799, 0.022023752331733704, -0.27594664692878723, -0.12424291670322418, 0.0039368406869471073, 
  0.14496722817420959, 0.39688482880592346, 0.22481875121593475, -0.26338890194892883, -0.14566175639629364, 0.43770593404769897, 0.32482427358627319, 0.2295239269733429, -0.61230707168579102, 0.14814147353172302, 0.20958159863948822, -0.14564338326454163, -0.20795454084873199, -0.20174731314182281, 0.24464151263237, -0.42337104678153992, 0.069798476994037628, -0.17612357437610626, 0.092746339738368988, 0.080607950687408447, -0.0045019774697721004, -0.59710443019866943, -0.17829304933547974, -0.20992331206798553, 0.23099148273468018, 0.32014921307563782, 0.15324722230434418, -0.060275889933109283, -0.06070350855588913, -0.0065515539608895779, 0.30813518166542053, 0.22522725164890289, -0.26038235425949097, 
  0.022373031824827194, -0.28830552101135254, -0.3244723379611969, 0.37134954333305359, 0.19763588905334473, 0.41604259610176086, -0.12810713052749634, -0.032450515776872635, 0.16137829422950745, 0.094755508005619049, 0.024700235575437546, -0.0043772915378212929, -0.17823557555675507, -0.098420172929763794, 0.30035620927810669, 0.14647564291954041, 0.028978131711483002, -0.12268843501806259, 0.32917129993438721, -0.18097579479217529, 0.27804169058799744, 0.095724649727344513, -0.035227768123149872, 0.20754174888134003, -0.050955124199390411, 0.462140291929245, 0.12087079137563705, -0.068503499031066895, 0.099757738411426544, -0.2320483922958374, -0.028095012530684471, 0.33416107296943665, -0.1508035808801651, 
  -0.32796698808670044, -0.11143180727958679, -0.29835692048072815, 0.098800227046012878, 0.18804514408111572, 0.2428886890411377, -0.097203023731708527, 0.035876013338565826, 0.38543763756752014, 0.21644264459609985, -0.097407639026641846, -0.26179066300392151, 0.17060762643814087, 0.16645829379558563, 0.22148434817790985, -0.063288815319538116, -0.18671655654907227, -0.34367614984512329, 0.17748436331748962, 0.31615862250328064, -0.35132938623428345, -0.15985399484634399, 0.30655035376548767, 0.014335515908896923, -0.028724882751703262, 0.44564282894134521, 0.14503321051597595, -0.20309795439243317, 0.59020185470581055, 0.15362450480461121, 0.077186658978462219, 0.26166802644729614, -0.12433134019374847, 
  -0.049467481672763824, 0.2275395393371582, -0.2862011194229126, 0.86049568653106689, 0.33270561695098877, 0.19621939957141876, 0.14756712317466736, -0.049326423555612564, 0.061371397227048874, 0.036692745983600616, 0.023639395833015442, 0.10739289969205856, 0.063117615878582001, -0.073009476065635681, -0.020740944892168045, 0.29702454805374146, -0.018870184198021889, -0.059477195143699646, 0.046065583825111389, 0.1262986809015274, 0.14290879666805267, -0.13688479363918304, -0.02480434812605381, 0.14931885898113251, 0.04558940976858139, 0.094092071056365967, 0.32580170035362244, 0.37687960267066956, 0.49784925580024719, 0.070052452385425568, -0.022593183442950249, -0.1671777069568634, -0.061659723520278931, 
  0.30135565996170044, -0.046735309064388275, 0.15260778367519379, -0.83143407106399536, -0.077634528279304504, 0.3739134669303894, -0.043801043182611465, 0.06050458550453186, 0.25425440073013306, -0.16803304851055145, 0.14896850287914276, -0.19348056614398956, 0.16623154282569885, -0.13267454504966736, -0.22980543971061707, -0.31950739026069641, -0.015071381814777851, -0.018089413642883301, 0.42058840394020081, 0.38836264610290527, 0.11410052329301834, -0.22327278554439545, -0.11084507405757904, -0.29974532127380371, -0.32481303811073303, -0.045157294720411301, 0.15242078900337219, -0.2863810658454895, 0.099584326148033142, 0.030973045155405998, 0.321817547082901, 0.25176382064819336, 0.11879162490367889, 
  -0.12020853161811829, 0.32927897572517395, 0.029868723824620247, 0.27295759320259094, 0.30439668893814087, 0.28737974166870117, -0.19924475252628326, 0.16595104336738586, -0.16076287627220154, 0.26882398128509521, -0.46833771467208862, -0.10149311274290085, 0.29625517129898071, -0.042532879859209061, 0.31726792454719543, -0.023494554683566093, -0.19875001907348633, 0.17446950078010559, -0.12463247030973434, -0.19767278432846069, 0.13692636787891388, -0.080613762140274048, 0.33169740438461304, -0.060817815363407135, 0.23615369200706482, 0.16073745489120483, -0.015015627257525921, 0.39951840043067932, -0.13176853954792023, -0.473417729139328, 0.20910628139972687, -0.014368163421750069, -0.78742367029190063, 
  -0.11061909794807434, 0.32367536425590515, -0.22446572780609131, -0.077373087406158447, -0.27365455031394958, 0.3066079318523407, 0.048475772142410278, -0.30905058979988098, 0.26549717783927917, -0.25921630859375, 0.2093949019908905, -0.17951487004756927, -0.23982013761997223, -0.14562815427780151, -0.18434189260005951, -0.034447759389877319, -0.0062663257122039795, -0.26253122091293335, 0.019424885511398315, -0.093843594193458557, -0.10313120484352112, -0.26380893588066101, -0.31980669498443604, -0.065942674875259399, -0.052843064069747925, -0.28885704278945923, 0.23124811053276062, 0.1017414927482605, 0.12115040421485901, 0.23151704668998718, -0.29385244846343994, 0.27848431468009949, -0.29307007789611816, 
  0.041947532445192337, 0.076828837394714355, 0.062177013605833054, -0.38768669962882996, 0.14491289854049683, 0.10000766068696976, -0.16934339702129364, -0.14191222190856934, 0.079791203141212463, -0.30431485176086426, -0.37297853827476501, 0.25340163707733154, -0.021904334425926208, -0.1925174742937088, -0.39648175239562988, -0.28105312585830688, -0.0044379536993801594, -0.13265639543533325, 0.12970981001853943, -0.060880865901708603, -0.079129613935947418, -0.12693069875240326, -0.13119815289974213, -0.23768514394760132, -0.21395204961299896, 0.23351538181304932, -0.35569700598716736, 0.012343169189989567, 0.20467072725296021, -0.04612281545996666, -0.1820838451385498, 0.036864753812551498, -0.21148385107517242, 
  0.049611229449510574, 0.22956208884716034, 0.12903915345668793, 0.60865634679794312, 0.07220342755317688, 0.010660234838724136, -0.20304977893829346, 0.011233498342335224, -0.0025521682109683752, -0.011872895993292332, -0.51275932788848877, 0.066580064594745636, 0.49146759510040283, 0.1188373938202858, 0.29328125715255737, -0.16443359851837158, 0.013985525816679001, 0.50620359182357788, -0.0018787087174132466, 0.00080254540080204606, 0.077711448073387146, -0.14355954527854919, -0.026604961603879929, 0.37112948298454285, 0.26733881235122681, 0.072120614349842072, -0.1712082177400589, 0.47822779417037964, -0.062959939241409302, 0.032992620021104813, -0.037277281284332275, -0.072961442172527313, -0.50848984718322754, 
  -0.35639801621437073, -0.58209747076034546, -0.427156001329422, -0.23057188093662262, 0.053233545273542404, 0.011884383857250214, 0.20316264033317566, 0.19475148618221283, 0.21231071650981903, 0.25517317652702332, -0.012008843012154102, 0.20188532769680023, -0.2002333402633667, 0.14152699708938599, -0.015442535281181335, -0.15635646879673004, -0.34225887060165405, 0.38550072908401489, -0.13192415237426758, 0.079683817923069, -0.027895987033843994, 0.046220529824495316, 0.14069776237010956, -0.5269133448600769, -0.32624021172523499, -0.010283926501870155, -0.42278581857681274, 0.09856925904750824, -0.16281972825527191, -0.67912960052490234, 0.23757605254650116, -0.035769518464803696, -0.18298980593681335, 
  0.29471239447593689, 0.14640316367149353, 0.023185696452856064, -0.075080558657646179, -0.051125146448612213, 0.12315306812524796, -0.047594271600246429, 0.23734040558338165, 0.17643710970878601, 0.29447346925735474, -0.10697966814041138, 0.22750703990459442, -0.011292165145277977, -0.21021510660648346, -0.16109143197536469, -0.032102826982736588, -0.047852791845798492, 0.17228755354881287, 0.13031348586082458, 0.20097485184669495, 0.13940756022930145, -0.19172345101833344, -0.072695344686508179, 0.040429104119539261, 0.21354559063911438, -0.31133875250816345, -0.13077026605606079, 0.15439978241920471, -0.29578679800033569, 0.066148221492767334, -0.43690645694732666, 0.129476398229599, -0.2495797872543335, 
  0.097465969622135162, 0.11033544689416885, 0.063254378736019135, -0.24419966340065002, 0.40071552991867065, -0.027181826531887054, 0.42226648330688477, -0.17518235743045807, -0.058168601244688034, 0.35006213188171387, 0.015987813472747803, -0.18620485067367554, -0.35383957624435425, 0.16788318753242493, -0.056388143450021744, 0.040375940501689911, 0.30950722098350525, -0.12601728737354279, -0.29884061217308044, -0.15797348320484161, -0.18859586119651794, -0.026055904105305672, 0.2334652841091156, -0.14654554426670074, -0.39988943934440613, -0.062406089156866074, -0.26872923970222473, 0.22364196181297302, 0.16449540853500366, -0.28125238418579102, 0.26664796471595764, -0.14327515661716461, -0.10203959047794342, 
  -0.026863543316721916, 0.070820540189743042, -0.12116730213165283, -0.15756940841674805, -0.0088341021910309792, 0.13121588528156281, 0.54522645473480225, 0.12673830986022949, 0.15233266353607178, 0.09212203323841095, 0.35476449131965637, 0.16506929695606232, -0.19291247427463531, -0.28158643841743469, -0.16757749021053314, 0.11216966062784195, 0.13795292377471924, -0.02154209092259407, 0.19645105302333832, 0.12763150036334991, -0.31156748533248901, -0.31645491719245911, 0.19881294667720795, -0.058209635317325592, -0.32815417647361755, -0.078835688531398773, 0.50981795787811279, 0.099368982017040253, 0.4322858452796936, -0.057574968785047531, 0.054850243031978607, 0.35634306073188782, -0.13376715779304504, 
  -0.11623798310756683, -0.19637486338615417, 0.45459368824958801, -0.26742306351661682, 0.34104183316230774, -0.084523767232894897, 0.43004965782165527, 0.19088654220104218, 0.073979206383228302, -0.043870560824871063, -0.07110016793012619, 0.098488830029964447, -0.058439139276742935, 0.026993650943040848, -0.27612185478210449, -0.053241793066263199, -0.060838811099529266, -0.24056144058704376, 0.21405166387557983, 0.069707863032817841, 0.15151150524616241, 0.35779896378517151, -0.069656647741794586, 0.20569421350955963, 0.25804615020751953, -0.062982439994812012, -0.24535374343395233, 0.22718535363674164, -0.12893575429916382, 0.043276261538267136, 0.051681816577911377, -0.010457510128617287, 0.53294771909713745, 
  -0.32308691740036011, 0.20645053684711456, -0.22380819916725159, 0.028989747166633606, -0.18664292991161346, 0.17552599310874939, -0.31519970297813416, -0.23337574303150177, -0.13015815615653992, 0.14447382092475891, -0.28999724984169006, 0.040854841470718384, -0.23439019918441772, -0.20667117834091187, 0.22228057682514191, -0.38299208879470825, -0.14434616267681122, 0.098731957376003265, 0.06385437399148941, 0.094202280044555664, 0.00049679871881380677, -0.20821471512317657, -0.011125069111585617, -0.40446919202804565, -0.24051670730113983, -0.18540783226490021, 0.1093323603272438, 0.0027991507668048143, -0.06029064953327179, -0.025490200147032738, -0.40192136168479919, -0.29778048396110535, -0.35295549035072327, 
  -0.25775071978569031, 0.27703762054443359, 0.19044306874275208, 0.048459425568580627, -0.021797928959131241, -0.009950532577931881, -0.044380683451890945, -0.16681464016437531, -0.048272896558046341, 0.095064982771873474, 0.0042871036566793919, -0.2774982750415802, -0.19707849621772766, -0.30609676241874695, -0.22338545322418213, 0.15016195178031921, 0.22329214215278625, 0.15289749205112457, -0.28617012500762939, -0.047975670546293259, -0.16488659381866455, -0.3082694411277771, -0.15871435403823853, 0.24242173135280609, 0.19876042008399963, 0.11899964511394501, -0.079414904117584229, 0.030975865200161934, 0.32237383723258972, 0.30188822746276855, 0.01585112139582634, -0.068399339914321899, -0.038514196872711182, 
  -0.23098230361938477, -0.063634157180786133, -0.39710479974746704, -0.36875540018081665, 0.20618811249732971, -0.22464318573474884, -0.029062321409583092, 0.19747993350028992, -0.27023652195930481, -0.029492853209376335, -0.0033534273970872164, 0.047430824488401413, -0.016348503530025482, -0.19685733318328857, -0.1440802663564682, -0.18089471757411957, -0.068924248218536377, -0.1425635814666748, -0.26157787442207336, 0.16620303690433502, -0.38832420110702515, -0.14620985090732574, 0.09788116067647934, -0.35512924194335938, 0.20202513039112091, -0.13553452491760254, -0.31095278263092041, 0.23426039516925812, 0.1204560175538063, 0.11360256373882294, 0.094789184629917145, -0.0096239307895302773, 0.012166645377874374, 
  -0.18657834827899933, -0.16242487728595734, 0.16428004205226898, 0.72784090042114258, 0.27024573087692261, 0.21939978003501892, 0.18382081389427185, -0.13099411129951477, 0.22680529952049255, 0.080212719738483429, -0.16919924318790436, -0.19824136793613434, 0.19074544310569763, -0.08533361554145813, 0.1422724574804306, 0.98265862464904785, 0.026137333363294601, 0.29951575398445129, -0.34657579660415649, 0.099201485514640808, 0.26938188076019287, -0.10072743892669678, -0.10950613021850586, 0.42998799681663513, -0.27009668946266174, -0.14067807793617249, 0.11842165142297745, -0.064635924994945526, 0.081682339310646057, -0.044122565537691116, 0.21280749142169952, 0.28725939989089966, 0.21169933676719666, 
  -0.16886851191520691, 0.05658373236656189, 0.18016998469829559, -0.47076961398124695, -0.065296284854412079, 0.14277270436286926, -0.11872531473636627, -0.23543572425842285, 0.32030463218688965, 0.28562909364700317, -0.11723943054676056, 0.17888486385345459, -0.25205513834953308, -0.11142601072788239, 0.14882732927799225, -0.12076036632061005, 0.07583320140838623, -0.37034842371940613, 0.13308374583721161, -0.14779819548130035, -0.13258439302444458, 0.14777752757072449, 0.24624991416931152, -0.33988174796104431, 0.20081508159637451, 0.12640108168125153, 0.17123638093471527, -0.052927535027265549, -0.24735970795154572, 0.10713905841112137, -0.15744058787822723, -0.20399563014507294, 0.14309962093830109, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,33 } };
const ALIGN(16) float tensor_data5[10*20] = { 
  -0.055662654340267181, 0.159272700548172, 0.24151287972927094, 0.090489625930786133, 0.58297103643417358, -0.31725665926933289, -0.34388250112533569, 0.075009346008300781, -0.32424160838127136, -0.47462454438209534, -0.24538195133209229, -0.18124304711818695, 0.39353799819946289, 0.39161884784698486, -0.025265850126743317, 0.046544123440980911, -0.37547299265861511, 0.09650857001543045, 0.28129822015762329, 0.034895803779363632, 
  -0.28059786558151245, 0.062615931034088135, -0.2165655642747879, 0.1667969822883606, 0.10580015182495117, 0.03812822699546814, 0.3000338077545166, -0.18902638554573059, -0.15555453300476074, -0.3112604022026062, 0.068653404712677002, -0.33239167928695679, -0.1014312207698822, -0.13121494650840759, -0.33105406165122986, -0.3712192177772522, -0.17653581500053406, 0.2822265625, 0.20760005712509155, -0.36843103170394897, 
  -0.1339089572429657, -0.30148038268089294, 0.087260745465755463, -0.7688031792640686, 0.35005378723144531, 0.010497349314391613, 0.31759616732597351, -0.18976423144340515, 0.340312659740448, 0.42561650276184082, -0.64248651266098022, -0.18442915380001068, 0.26035231351852417, -0.0032628669869154692, 0.25797909498214722, -0.13986620306968689, -0.10599538683891296, 0.37759238481521606, -0.39766588807106018, -0.012527518905699253, 
  -0.30583646893501282, -0.10269889980554581, -0.27536970376968384, -0.42329719662666321, -0.14727520942687988, 0.097944170236587524, 0.25550097227096558, 0.32460159063339233, 0.34951618313789368, -0.33178421854972839, 0.24728184938430786, 0.10568508505821228, -0.00036488092155195773, -0.33072590827941895, -0.19635969400405884, 0.36904972791671753, 0.099158056080341339, 0.078806832432746887, -0.0008520856499671936, -0.31525665521621704, 
  -0.015612019225955009, 0.02722698450088501, -0.26125794649124146, -0.4038541316986084, -0.45899280905723572, 0.22787915170192719, -0.15084272623062134, -0.025713235139846802, -0.25466746091842651, 0.39977669715881348, -0.0034267602022737265, -0.47139161825180054, -0.41116651892662048, 0.076400898396968842, -0.20873488485813141, 0.081021785736083984, 0.079031646251678467, -0.38482159376144409, 0.33171886205673218, 0.021545639261603355, 
  0.41331279277801514, 0.34675118327140808, -0.33299881219863892, -0.026716170832514763, -0.46570554375648499, -0.080794677138328552, 0.24852193892002106, -0.09672313928604126, 0.35352492332458496, -0.1744457334280014, -0.78447258472442627, 0.39359152317047119, -0.4390825629234314, 0.2164749950170517, -0.094647027552127838, 0.29798722267150879, -0.38043081760406494, -0.087480716407299042, -0.67042714357376099, 0.31040218472480774, 
  0.1891850084066391, -0.48995587229728699, -0.060038767755031586, 0.6598934531211853, 0.18639577925205231, -0.34729117155075073, 0.41037049889564514, 0.19964635372161865, 0.11985907703638077, 0.3225875198841095, -0.083005458116531372, 0.2725045382976532, -0.492349773645401, -0.13783018290996552, -0.14061370491981506, -0.097188368439674377, 0.1814613938331604, -0.13532957434654236, 0.16900914907455444, -0.17783904075622559, 
  -0.069144852459430695, 0.65869426727294922, -0.28294146060943604, -0.14261144399642944, -0.014705480076372623, 0.094887003302574158, -0.40299099683761597, -0.347726970911026, 0.34408301115036011, 0.041613243520259857, -0.010505747981369495, 0.39574465155601501, -0.17913232743740082, -0.19293415546417236, -0.18183934688568115, -0.19011776149272919, -0.25625583529472351, 0.041769042611122131, -0.18624754250049591, 0.043136849999427795, 
  -0.58505332469940186, 0.028472157195210457, 0.0093492502346634865, -0.16863954067230225, 0.25961804389953613, -0.22792680561542511, 0.22223399579524994, -0.4124426543712616, -0.14572620391845703, -0.1726842075586319, -0.19097207486629486, 0.17791803181171417, 0.26870590448379517, 0.31947749853134155, -0.1471160501241684, 0.086229465901851654, -0.36402067542076111, 0.31461870670318604, -0.21708324551582336, -0.27960911393165588, 
  -0.19536073505878448, 0.14911095798015594, 0.19786395132541656, 0.33594518899917603, -0.34040817618370056, 0.16065387427806854, 0.50748896598815918, -0.23711861670017242, 0.27081677317619324, -0.20786350965499878, -0.080909982323646545, 0.067776083946228027, -0.34790933132171631, -0.24406798183917999, -0.4623262882232666, -0.0040918705053627491, 0.38649323582649231, 0.35650089383125305, -0.095410309731960297, 0.40061390399932861, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(16) float tensor_data6[10*10] = { 
  -0.90630900859832764, -0.36379987001419067, -1.0156949758529663, -0.059175357222557068, 0.08449506014585495, -0.6255028247833252, 0.52804845571517944, -0.042400464415550232, -0.3378899097442627, -0.32540804147720337, 
  0.19779717922210693, 0.29166465997695923, -0.026476973667740822, -0.44837883114814758, -0.57459485530853271, -0.12401182949542999, 0.19035309553146362, 0.3612663745880127, -0.40541881322860718, -0.49303382635116577, 
  -0.1022900864481926, 0.24026459455490112, -0.5914350152015686, 0.074303917586803436, 0.45138633251190186, 0.64226585626602173, 0.34305307269096375, 0.14374624192714691, 0.22510452568531036, 1.1008199453353882, 
  -0.20330822467803955, 0.25604724884033203, -0.21831056475639343, 0.2422344982624054, -0.26974311470985413, 0.93733978271484375, 0.13416600227355957, -0.6443442702293396, 0.065237388014793396, -0.14245697855949402, 
  0.32602173089981079, 0.33921664953231812, -0.60094469785690308, 0.17600512504577637, -0.093724370002746582, -0.2669384777545929, 0.087793260812759399, -0.75988668203353882, -0.23676791787147522, 0.29625186324119568, 
  0.1952754408121109, -0.015209078788757324, 0.83282375335693359, -0.49899798631668091, -0.17181268334388733, 0.075736798346042633, -1.344190239906311, -0.42076748609542847, 0.25410470366477966, 0.10612328350543976, 
  -0.91312360763549805, 0.002685248851776123, 0.38605627417564392, 0.10988533496856689, 0.050565853714942932, 0.29862532019615173, 0.2333461195230484, 0.16587658226490021, 0.12491189688444138, -0.032006047666072845, 
  0.40287509560585022, 0.12773114442825317, -0.32782045006752014, 0.48682922124862671, -0.35227280855178833, -0.27333372831344604, -0.29601526260375977, 0.11190914362668991, 0.65305912494659424, -0.032321799546480179, 
  -0.30692583322525024, 0.20185941457748413, -0.21770413219928741, -0.41137799620628357, -0.46341806650161743, 0.41327685117721558, -0.2607472836971283, 0.61641812324523926, -0.15317954123020172, -0.49201035499572754, 
  -0.48325780034065247, -0.012263834476470947, -0.24010708928108215, 0.51044279336929321, -0.51739460229873657, -0.22522240877151489, 0.47680878639221191, -0.56517338752746582, 0.089882969856262207, -0.047846369445323944, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 10,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,10 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,3 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,2 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension0, 132, },
  { kTfLiteMmapRo, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 40, },
  { kTfLiteMmapRo, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 40, },
  { kTfLiteMmapRo, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 80, },
  { kTfLiteMmapRo, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 2640, },
  { kTfLiteMmapRo, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, },
  { kTfLiteMmapRo, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 400, },
  { kTfLiteArenaRw, tensor_arena + 144, (TfLiteIntArray*)&tensor_dimension7, 80, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension8, 40, },
  { kTfLiteArenaRw, tensor_arena + 48, (TfLiteIntArray*)&tensor_dimension9, 40, },
  { kTfLiteArenaRw, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension10, 40, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers.push_back(ptr);
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    return kTfLiteError;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 11;
  for(size_t i = 0; i < 11; ++i) {
    tflTensors[i].type = kTfLiteFloat32;
    tflEvalTensors[i].type = kTfLiteFloat32;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization.type = kTfLiteNoQuantization;
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for(size_t i = 0; i < 4; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 4; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  10, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 4; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
