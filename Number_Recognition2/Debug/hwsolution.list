
hwsolution.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b28c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  0800b420  0800b420  0001b420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b750  0800b750  00020178  2**0
                  CONTENTS
  4 .ARM          00000008  0800b750  0800b750  0001b750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b758  0800b758  00020178  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b758  0800b758  0001b758  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b75c  0800b75c  0001b75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000178  20000000  0800b760  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020178  2**0
                  CONTENTS
 10 .bss          000025d4  20000178  20000178  00020178  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000274c  2000274c  00020178  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020178  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011887  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000310b  00000000  00000000  00031a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00034b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cd0  00000000  00000000  00035988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241c1  00000000  00000000  00036658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000121d8  00000000  00000000  0005a819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c7c0f  00000000  00000000  0006c9f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134600  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000049c8  00000000  00000000  00134650  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000178 	.word	0x20000178
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b404 	.word	0x0800b404

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000017c 	.word	0x2000017c
 80001cc:	0800b404 	.word	0x0800b404

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_uldivmod>:
 8000b7c:	b953      	cbnz	r3, 8000b94 <__aeabi_uldivmod+0x18>
 8000b7e:	b94a      	cbnz	r2, 8000b94 <__aeabi_uldivmod+0x18>
 8000b80:	2900      	cmp	r1, #0
 8000b82:	bf08      	it	eq
 8000b84:	2800      	cmpeq	r0, #0
 8000b86:	bf1c      	itt	ne
 8000b88:	f04f 31ff 	movne.w	r1, #4294967295
 8000b8c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b90:	f000 b974 	b.w	8000e7c <__aeabi_idiv0>
 8000b94:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b98:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b9c:	f000 f806 	bl	8000bac <__udivmoddi4>
 8000ba0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba8:	b004      	add	sp, #16
 8000baa:	4770      	bx	lr

08000bac <__udivmoddi4>:
 8000bac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bb0:	9d08      	ldr	r5, [sp, #32]
 8000bb2:	4604      	mov	r4, r0
 8000bb4:	468e      	mov	lr, r1
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d14d      	bne.n	8000c56 <__udivmoddi4+0xaa>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4694      	mov	ip, r2
 8000bbe:	d969      	bls.n	8000c94 <__udivmoddi4+0xe8>
 8000bc0:	fab2 f282 	clz	r2, r2
 8000bc4:	b152      	cbz	r2, 8000bdc <__udivmoddi4+0x30>
 8000bc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bca:	f1c2 0120 	rsb	r1, r2, #32
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bd6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bda:	4094      	lsls	r4, r2
 8000bdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be0:	0c21      	lsrs	r1, r4, #16
 8000be2:	fbbe f6f8 	udiv	r6, lr, r8
 8000be6:	fa1f f78c 	uxth.w	r7, ip
 8000bea:	fb08 e316 	mls	r3, r8, r6, lr
 8000bee:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bf2:	fb06 f107 	mul.w	r1, r6, r7
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x64>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c02:	f080 811f 	bcs.w	8000e44 <__udivmoddi4+0x298>
 8000c06:	4299      	cmp	r1, r3
 8000c08:	f240 811c 	bls.w	8000e44 <__udivmoddi4+0x298>
 8000c0c:	3e02      	subs	r6, #2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1a5b      	subs	r3, r3, r1
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c18:	fb08 3310 	mls	r3, r8, r0, r3
 8000c1c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c20:	fb00 f707 	mul.w	r7, r0, r7
 8000c24:	42a7      	cmp	r7, r4
 8000c26:	d90a      	bls.n	8000c3e <__udivmoddi4+0x92>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c30:	f080 810a 	bcs.w	8000e48 <__udivmoddi4+0x29c>
 8000c34:	42a7      	cmp	r7, r4
 8000c36:	f240 8107 	bls.w	8000e48 <__udivmoddi4+0x29c>
 8000c3a:	4464      	add	r4, ip
 8000c3c:	3802      	subs	r0, #2
 8000c3e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c42:	1be4      	subs	r4, r4, r7
 8000c44:	2600      	movs	r6, #0
 8000c46:	b11d      	cbz	r5, 8000c50 <__udivmoddi4+0xa4>
 8000c48:	40d4      	lsrs	r4, r2
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c50:	4631      	mov	r1, r6
 8000c52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c56:	428b      	cmp	r3, r1
 8000c58:	d909      	bls.n	8000c6e <__udivmoddi4+0xc2>
 8000c5a:	2d00      	cmp	r5, #0
 8000c5c:	f000 80ef 	beq.w	8000e3e <__udivmoddi4+0x292>
 8000c60:	2600      	movs	r6, #0
 8000c62:	e9c5 0100 	strd	r0, r1, [r5]
 8000c66:	4630      	mov	r0, r6
 8000c68:	4631      	mov	r1, r6
 8000c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6e:	fab3 f683 	clz	r6, r3
 8000c72:	2e00      	cmp	r6, #0
 8000c74:	d14a      	bne.n	8000d0c <__udivmoddi4+0x160>
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d302      	bcc.n	8000c80 <__udivmoddi4+0xd4>
 8000c7a:	4282      	cmp	r2, r0
 8000c7c:	f200 80f9 	bhi.w	8000e72 <__udivmoddi4+0x2c6>
 8000c80:	1a84      	subs	r4, r0, r2
 8000c82:	eb61 0303 	sbc.w	r3, r1, r3
 8000c86:	2001      	movs	r0, #1
 8000c88:	469e      	mov	lr, r3
 8000c8a:	2d00      	cmp	r5, #0
 8000c8c:	d0e0      	beq.n	8000c50 <__udivmoddi4+0xa4>
 8000c8e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c92:	e7dd      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000c94:	b902      	cbnz	r2, 8000c98 <__udivmoddi4+0xec>
 8000c96:	deff      	udf	#255	; 0xff
 8000c98:	fab2 f282 	clz	r2, r2
 8000c9c:	2a00      	cmp	r2, #0
 8000c9e:	f040 8092 	bne.w	8000dc6 <__udivmoddi4+0x21a>
 8000ca2:	eba1 010c 	sub.w	r1, r1, ip
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f fe8c 	uxth.w	lr, ip
 8000cae:	2601      	movs	r6, #1
 8000cb0:	0c20      	lsrs	r0, r4, #16
 8000cb2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cb6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cbe:	fb0e f003 	mul.w	r0, lr, r3
 8000cc2:	4288      	cmp	r0, r1
 8000cc4:	d908      	bls.n	8000cd8 <__udivmoddi4+0x12c>
 8000cc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cca:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cce:	d202      	bcs.n	8000cd6 <__udivmoddi4+0x12a>
 8000cd0:	4288      	cmp	r0, r1
 8000cd2:	f200 80cb 	bhi.w	8000e6c <__udivmoddi4+0x2c0>
 8000cd6:	4643      	mov	r3, r8
 8000cd8:	1a09      	subs	r1, r1, r0
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce0:	fb07 1110 	mls	r1, r7, r0, r1
 8000ce4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce8:	fb0e fe00 	mul.w	lr, lr, r0
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d908      	bls.n	8000d02 <__udivmoddi4+0x156>
 8000cf0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf8:	d202      	bcs.n	8000d00 <__udivmoddi4+0x154>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f200 80bb 	bhi.w	8000e76 <__udivmoddi4+0x2ca>
 8000d00:	4608      	mov	r0, r1
 8000d02:	eba4 040e 	sub.w	r4, r4, lr
 8000d06:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d0a:	e79c      	b.n	8000c46 <__udivmoddi4+0x9a>
 8000d0c:	f1c6 0720 	rsb	r7, r6, #32
 8000d10:	40b3      	lsls	r3, r6
 8000d12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d1a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d1e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d22:	431c      	orrs	r4, r3
 8000d24:	40f9      	lsrs	r1, r7
 8000d26:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d2a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d2e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d32:	0c20      	lsrs	r0, r4, #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fb09 1118 	mls	r1, r9, r8, r1
 8000d3c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d40:	fb08 f00e 	mul.w	r0, r8, lr
 8000d44:	4288      	cmp	r0, r1
 8000d46:	fa02 f206 	lsl.w	r2, r2, r6
 8000d4a:	d90b      	bls.n	8000d64 <__udivmoddi4+0x1b8>
 8000d4c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d54:	f080 8088 	bcs.w	8000e68 <__udivmoddi4+0x2bc>
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	f240 8085 	bls.w	8000e68 <__udivmoddi4+0x2bc>
 8000d5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1a09      	subs	r1, r1, r0
 8000d66:	b2a4      	uxth	r4, r4
 8000d68:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d6c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d70:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d74:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d78:	458e      	cmp	lr, r1
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x1e2>
 8000d7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d80:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d84:	d26c      	bcs.n	8000e60 <__udivmoddi4+0x2b4>
 8000d86:	458e      	cmp	lr, r1
 8000d88:	d96a      	bls.n	8000e60 <__udivmoddi4+0x2b4>
 8000d8a:	3802      	subs	r0, #2
 8000d8c:	4461      	add	r1, ip
 8000d8e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d92:	fba0 9402 	umull	r9, r4, r0, r2
 8000d96:	eba1 010e 	sub.w	r1, r1, lr
 8000d9a:	42a1      	cmp	r1, r4
 8000d9c:	46c8      	mov	r8, r9
 8000d9e:	46a6      	mov	lr, r4
 8000da0:	d356      	bcc.n	8000e50 <__udivmoddi4+0x2a4>
 8000da2:	d053      	beq.n	8000e4c <__udivmoddi4+0x2a0>
 8000da4:	b15d      	cbz	r5, 8000dbe <__udivmoddi4+0x212>
 8000da6:	ebb3 0208 	subs.w	r2, r3, r8
 8000daa:	eb61 010e 	sbc.w	r1, r1, lr
 8000dae:	fa01 f707 	lsl.w	r7, r1, r7
 8000db2:	fa22 f306 	lsr.w	r3, r2, r6
 8000db6:	40f1      	lsrs	r1, r6
 8000db8:	431f      	orrs	r7, r3
 8000dba:	e9c5 7100 	strd	r7, r1, [r5]
 8000dbe:	2600      	movs	r6, #0
 8000dc0:	4631      	mov	r1, r6
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc6:	f1c2 0320 	rsb	r3, r2, #32
 8000dca:	40d8      	lsrs	r0, r3
 8000dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dd0:	fa21 f303 	lsr.w	r3, r1, r3
 8000dd4:	4091      	lsls	r1, r2
 8000dd6:	4301      	orrs	r1, r0
 8000dd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ddc:	fa1f fe8c 	uxth.w	lr, ip
 8000de0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000de4:	fb07 3610 	mls	r6, r7, r0, r3
 8000de8:	0c0b      	lsrs	r3, r1, #16
 8000dea:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dee:	fb00 f60e 	mul.w	r6, r0, lr
 8000df2:	429e      	cmp	r6, r3
 8000df4:	fa04 f402 	lsl.w	r4, r4, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x260>
 8000dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000dfe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e02:	d22f      	bcs.n	8000e64 <__udivmoddi4+0x2b8>
 8000e04:	429e      	cmp	r6, r3
 8000e06:	d92d      	bls.n	8000e64 <__udivmoddi4+0x2b8>
 8000e08:	3802      	subs	r0, #2
 8000e0a:	4463      	add	r3, ip
 8000e0c:	1b9b      	subs	r3, r3, r6
 8000e0e:	b289      	uxth	r1, r1
 8000e10:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e14:	fb07 3316 	mls	r3, r7, r6, r3
 8000e18:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e20:	428b      	cmp	r3, r1
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x28a>
 8000e24:	eb1c 0101 	adds.w	r1, ip, r1
 8000e28:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e2c:	d216      	bcs.n	8000e5c <__udivmoddi4+0x2b0>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d914      	bls.n	8000e5c <__udivmoddi4+0x2b0>
 8000e32:	3e02      	subs	r6, #2
 8000e34:	4461      	add	r1, ip
 8000e36:	1ac9      	subs	r1, r1, r3
 8000e38:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e3c:	e738      	b.n	8000cb0 <__udivmoddi4+0x104>
 8000e3e:	462e      	mov	r6, r5
 8000e40:	4628      	mov	r0, r5
 8000e42:	e705      	b.n	8000c50 <__udivmoddi4+0xa4>
 8000e44:	4606      	mov	r6, r0
 8000e46:	e6e3      	b.n	8000c10 <__udivmoddi4+0x64>
 8000e48:	4618      	mov	r0, r3
 8000e4a:	e6f8      	b.n	8000c3e <__udivmoddi4+0x92>
 8000e4c:	454b      	cmp	r3, r9
 8000e4e:	d2a9      	bcs.n	8000da4 <__udivmoddi4+0x1f8>
 8000e50:	ebb9 0802 	subs.w	r8, r9, r2
 8000e54:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e58:	3801      	subs	r0, #1
 8000e5a:	e7a3      	b.n	8000da4 <__udivmoddi4+0x1f8>
 8000e5c:	4646      	mov	r6, r8
 8000e5e:	e7ea      	b.n	8000e36 <__udivmoddi4+0x28a>
 8000e60:	4620      	mov	r0, r4
 8000e62:	e794      	b.n	8000d8e <__udivmoddi4+0x1e2>
 8000e64:	4640      	mov	r0, r8
 8000e66:	e7d1      	b.n	8000e0c <__udivmoddi4+0x260>
 8000e68:	46d0      	mov	r8, sl
 8000e6a:	e77b      	b.n	8000d64 <__udivmoddi4+0x1b8>
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	e732      	b.n	8000cd8 <__udivmoddi4+0x12c>
 8000e72:	4630      	mov	r0, r6
 8000e74:	e709      	b.n	8000c8a <__udivmoddi4+0xde>
 8000e76:	4464      	add	r4, ip
 8000e78:	3802      	subs	r0, #2
 8000e7a:	e742      	b.n	8000d02 <__udivmoddi4+0x156>

08000e7c <__aeabi_idiv0>:
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop

08000e80 <LIS3DSH_WriteIO>:
static float __Z_Scale = 1.0f;
//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b084      	sub	sp, #16
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	6039      	str	r1, [r7, #0]
 8000e8a:	71fb      	strb	r3, [r7, #7]
 8000e8c:	4613      	mov	r3, r2
 8000e8e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000e94:	2200      	movs	r2, #0
 8000e96:	2108      	movs	r1, #8
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LIS3DSH_WriteIO+0x4c>)
 8000e9a:	f001 f8cf 	bl	800203c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000e9e:	f107 010f 	add.w	r1, r7, #15
 8000ea2:	230a      	movs	r3, #10
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	480a      	ldr	r0, [pc, #40]	; (8000ed0 <LIS3DSH_WriteIO+0x50>)
 8000ea8:	f003 f857 	bl	8003f5a <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	b29a      	uxth	r2, r3
 8000eb0:	230a      	movs	r3, #10
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <LIS3DSH_WriteIO+0x50>)
 8000eb6:	f003 f850 	bl	8003f5a <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000eba:	2201      	movs	r2, #1
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	4803      	ldr	r0, [pc, #12]	; (8000ecc <LIS3DSH_WriteIO+0x4c>)
 8000ec0:	f001 f8bc 	bl	800203c <HAL_GPIO_WritePin>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	20000194 	.word	0x20000194

08000ed4 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000eee:	2200      	movs	r2, #0
 8000ef0:	2108      	movs	r1, #8
 8000ef2:	4818      	ldr	r0, [pc, #96]	; (8000f54 <LIS3DSH_ReadIO+0x80>)
 8000ef4:	f001 f8a2 	bl	800203c <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000ef8:	f107 0108 	add.w	r1, r7, #8
 8000efc:	230a      	movs	r3, #10
 8000efe:	2201      	movs	r2, #1
 8000f00:	4815      	ldr	r0, [pc, #84]	; (8000f58 <LIS3DSH_ReadIO+0x84>)
 8000f02:	f003 f82a 	bl	8003f5a <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f06:	79bb      	ldrb	r3, [r7, #6]
 8000f08:	b29a      	uxth	r2, r3
 8000f0a:	f107 0108 	add.w	r1, r7, #8
 8000f0e:	230a      	movs	r3, #10
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <LIS3DSH_ReadIO+0x84>)
 8000f12:	f003 f95e 	bl	80041d2 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000f16:	2201      	movs	r2, #1
 8000f18:	2108      	movs	r1, #8
 8000f1a:	480e      	ldr	r0, [pc, #56]	; (8000f54 <LIS3DSH_ReadIO+0x80>)
 8000f1c:	f001 f88e 	bl	800203c <HAL_GPIO_WritePin>

	for(uint8_t i=0; i<(size&0x3); i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	e00b      	b.n	8000f3e <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000f26:	7bfa      	ldrb	r2, [r7, #15]
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	3210      	adds	r2, #16
 8000f30:	443a      	add	r2, r7
 8000f32:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f36:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	73fb      	strb	r3, [r7, #15]
 8000f3e:	7bfa      	ldrb	r2, [r7, #15]
 8000f40:	79bb      	ldrb	r3, [r7, #6]
 8000f42:	f003 0303 	and.w	r3, r3, #3
 8000f46:	429a      	cmp	r2, r3
 8000f48:	dbed      	blt.n	8000f26 <LIS3DSH_ReadIO+0x52>
	}
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40021000 	.word	0x40021000
 8000f58:	20000194 	.word	0x20000194

08000f5c <LIS3DSH_Init>:
//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	73fb      	strb	r3, [r7, #15]

	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000f6a:	2258      	movs	r2, #88	; 0x58
 8000f6c:	6879      	ldr	r1, [r7, #4]
 8000f6e:	485b      	ldr	r0, [pc, #364]	; (80010dc <LIS3DSH_Init+0x180>)
 8000f70:	f007 fea6 	bl	8008cc0 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	78db      	ldrb	r3, [r3, #3]
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	b25a      	sxtb	r2, r3
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	b25b      	sxtb	r3, r3
 8000f84:	4313      	orrs	r3, r2
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	b25b      	sxtb	r3, r3
 8000f92:	f023 030f 	bic.w	r3, r3, #15
 8000f96:	b25a      	sxtb	r2, r3
 8000f98:	7bfb      	ldrb	r3, [r7, #15]
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	b2db      	uxtb	r3, r3
 8000fa2:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000fa4:	f107 030f 	add.w	r3, r7, #15
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4619      	mov	r1, r3
 8000fac:	2020      	movs	r0, #32
 8000fae:	f7ff ff67 	bl	8000e80 <LIS3DSH_WriteIO>

	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	789b      	ldrb	r3, [r3, #2]
 8000fba:	b25b      	sxtb	r3, r3
 8000fbc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fc0:	b25a      	sxtb	r2, r3
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	b25b      	sxtb	r3, r3
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	b25b      	sxtb	r3, r3
 8000fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000fd8:	b25a      	sxtb	r2, r3
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	b25b      	sxtb	r3, r3
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 8000fe6:	f107 030f 	add.w	r3, r7, #15
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	2024      	movs	r0, #36	; 0x24
 8000ff0:	f7ff ff46 	bl	8000e80 <LIS3DSH_WriteIO>

	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	791b      	ldrb	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d008      	beq.n	800100e <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8000ffc:	2388      	movs	r3, #136	; 0x88
 8000ffe:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001000:	f107 030f 	add.w	r3, r7, #15
 8001004:	2201      	movs	r2, #1
 8001006:	4619      	mov	r1, r3
 8001008:	2023      	movs	r0, #35	; 0x23
 800100a:	f7ff ff39 	bl	8000e80 <LIS3DSH_WriteIO>
	}

	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	785b      	ldrb	r3, [r3, #1]
 8001012:	2b20      	cmp	r3, #32
 8001014:	d858      	bhi.n	80010c8 <LIS3DSH_Init+0x16c>
 8001016:	a201      	add	r2, pc, #4	; (adr r2, 800101c <LIS3DSH_Init+0xc0>)
 8001018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101c:	080010a1 	.word	0x080010a1
 8001020:	080010c9 	.word	0x080010c9
 8001024:	080010c9 	.word	0x080010c9
 8001028:	080010c9 	.word	0x080010c9
 800102c:	080010c9 	.word	0x080010c9
 8001030:	080010c9 	.word	0x080010c9
 8001034:	080010c9 	.word	0x080010c9
 8001038:	080010c9 	.word	0x080010c9
 800103c:	080010a9 	.word	0x080010a9
 8001040:	080010c9 	.word	0x080010c9
 8001044:	080010c9 	.word	0x080010c9
 8001048:	080010c9 	.word	0x080010c9
 800104c:	080010c9 	.word	0x080010c9
 8001050:	080010c9 	.word	0x080010c9
 8001054:	080010c9 	.word	0x080010c9
 8001058:	080010c9 	.word	0x080010c9
 800105c:	080010b1 	.word	0x080010b1
 8001060:	080010c9 	.word	0x080010c9
 8001064:	080010c9 	.word	0x080010c9
 8001068:	080010c9 	.word	0x080010c9
 800106c:	080010c9 	.word	0x080010c9
 8001070:	080010c9 	.word	0x080010c9
 8001074:	080010c9 	.word	0x080010c9
 8001078:	080010c9 	.word	0x080010c9
 800107c:	080010b9 	.word	0x080010b9
 8001080:	080010c9 	.word	0x080010c9
 8001084:	080010c9 	.word	0x080010c9
 8001088:	080010c9 	.word	0x080010c9
 800108c:	080010c9 	.word	0x080010c9
 8001090:	080010c9 	.word	0x080010c9
 8001094:	080010c9 	.word	0x080010c9
 8001098:	080010c9 	.word	0x080010c9
 800109c:	080010c1 	.word	0x080010c1
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80010a0:	4b0f      	ldr	r3, [pc, #60]	; (80010e0 <LIS3DSH_Init+0x184>)
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <LIS3DSH_Init+0x188>)
 80010a4:	601a      	str	r2, [r3, #0]
			break;
 80010a6:	e00f      	b.n	80010c8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80010a8:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <LIS3DSH_Init+0x184>)
 80010aa:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <LIS3DSH_Init+0x18c>)
 80010ac:	601a      	str	r2, [r3, #0]
			break;
 80010ae:	e00b      	b.n	80010c8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <LIS3DSH_Init+0x184>)
 80010b2:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LIS3DSH_Init+0x190>)
 80010b4:	601a      	str	r2, [r3, #0]
			break;
 80010b6:	e007      	b.n	80010c8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <LIS3DSH_Init+0x184>)
 80010ba:	4a0d      	ldr	r2, [pc, #52]	; (80010f0 <LIS3DSH_Init+0x194>)
 80010bc:	601a      	str	r2, [r3, #0]
			break;
 80010be:	e003      	b.n	80010c8 <LIS3DSH_Init+0x16c>

		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80010c0:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <LIS3DSH_Init+0x184>)
 80010c2:	4a0c      	ldr	r2, [pc, #48]	; (80010f4 <LIS3DSH_Init+0x198>)
 80010c4:	601a      	str	r2, [r3, #0]
			break;
 80010c6:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80010c8:	2201      	movs	r2, #1
 80010ca:	2108      	movs	r1, #8
 80010cc:	480a      	ldr	r0, [pc, #40]	; (80010f8 <LIS3DSH_Init+0x19c>)
 80010ce:	f000 ffb5 	bl	800203c <HAL_GPIO_WritePin>
}
 80010d2:	bf00      	nop
 80010d4:	3710      	adds	r7, #16
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000194 	.word	0x20000194
 80010e0:	20000000 	.word	0x20000000
 80010e4:	3d75c28f 	.word	0x3d75c28f
 80010e8:	3df5c28f 	.word	0x3df5c28f
 80010ec:	3e3851ec 	.word	0x3e3851ec
 80010f0:	3e75c28f 	.word	0x3e75c28f
 80010f4:	3f3ae148 	.word	0x3f3ae148
 80010f8:	40021000 	.word	0x40021000

080010fc <LIS3DSH_GetDataRaw>:

//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b086      	sub	sp, #24
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2202      	movs	r2, #2
 800110a:	4619      	mov	r1, r3
 800110c:	2028      	movs	r0, #40	; 0x28
 800110e:	f7ff fee1 	bl	8000ed4 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001112:	7d7b      	ldrb	r3, [r7, #21]
 8001114:	b29b      	uxth	r3, r3
 8001116:	021b      	lsls	r3, r3, #8
 8001118:	b29a      	uxth	r2, r3
 800111a:	7d3b      	ldrb	r3, [r7, #20]
 800111c:	b29b      	uxth	r3, r3
 800111e:	4413      	add	r3, r2
 8001120:	b29b      	uxth	r3, r3
 8001122:	b21b      	sxth	r3, r3
 8001124:	81bb      	strh	r3, [r7, #12]

	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	2202      	movs	r2, #2
 800112c:	4619      	mov	r1, r3
 800112e:	202a      	movs	r0, #42	; 0x2a
 8001130:	f7ff fed0 	bl	8000ed4 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001134:	7d7b      	ldrb	r3, [r7, #21]
 8001136:	b29b      	uxth	r3, r3
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b29a      	uxth	r2, r3
 800113c:	7d3b      	ldrb	r3, [r7, #20]
 800113e:	b29b      	uxth	r3, r3
 8001140:	4413      	add	r3, r2
 8001142:	b29b      	uxth	r3, r3
 8001144:	b21b      	sxth	r3, r3
 8001146:	81fb      	strh	r3, [r7, #14]

	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2202      	movs	r2, #2
 800114e:	4619      	mov	r1, r3
 8001150:	202c      	movs	r0, #44	; 0x2c
 8001152:	f7ff febf 	bl	8000ed4 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 8001156:	7d7b      	ldrb	r3, [r7, #21]
 8001158:	b29b      	uxth	r3, r3
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b29a      	uxth	r2, r3
 800115e:	7d3b      	ldrb	r3, [r7, #20]
 8001160:	b29b      	uxth	r3, r3
 8001162:	4413      	add	r3, r2
 8001164:	b29b      	uxth	r3, r3
 8001166:	b21b      	sxth	r3, r3
 8001168:	823b      	strh	r3, [r7, #16]

	return tempDataRaw;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	461a      	mov	r2, r3
 800116e:	f107 030c 	add.w	r3, r7, #12
 8001172:	6818      	ldr	r0, [r3, #0]
 8001174:	6010      	str	r0, [r2, #0]
 8001176:	889b      	ldrh	r3, [r3, #4]
 8001178:	8093      	strh	r3, [r2, #4]

}
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	3718      	adds	r7, #24
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b08c      	sub	sp, #48	; 0x30
 8001188:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 800118a:	f107 031c 	add.w	r3, r7, #28
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff ffb4 	bl	80010fc <LIS3DSH_GetDataRaw>
	//Scale data and return
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 8001194:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001198:	ee07 3a90 	vmov	s15, r3
 800119c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011a0:	4b31      	ldr	r3, [pc, #196]	; (8001268 <LIS3DSH_GetDataScaled+0xe4>)
 80011a2:	edd3 7a00 	vldr	s15, [r3]
 80011a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011aa:	4b30      	ldr	r3, [pc, #192]	; (800126c <LIS3DSH_GetDataScaled+0xe8>)
 80011ac:	edd3 7a00 	vldr	s15, [r3]
 80011b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011b4:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001270 <LIS3DSH_GetDataScaled+0xec>
 80011b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <LIS3DSH_GetDataScaled+0xf0>)
 80011be:	edd3 7a00 	vldr	s15, [r3]
 80011c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c6:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80011ca:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011d6:	4b24      	ldr	r3, [pc, #144]	; (8001268 <LIS3DSH_GetDataScaled+0xe4>)
 80011d8:	edd3 7a00 	vldr	s15, [r3]
 80011dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <LIS3DSH_GetDataScaled+0xf4>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011ea:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001270 <LIS3DSH_GetDataScaled+0xec>
 80011ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <LIS3DSH_GetDataScaled+0xf8>)
 80011f4:	edd3 7a00 	vldr	s15, [r3]
 80011f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011fc:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 8001200:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001204:	ee07 3a90 	vmov	s15, r3
 8001208:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800120c:	4b16      	ldr	r3, [pc, #88]	; (8001268 <LIS3DSH_GetDataScaled+0xe4>)
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001216:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <LIS3DSH_GetDataScaled+0xfc>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001220:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001270 <LIS3DSH_GetDataScaled+0xec>
 8001224:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <LIS3DSH_GetDataScaled+0x100>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001232:	edc7 7a06 	vstr	s15, [r7, #24]

	return tempScaledData;
 8001236:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123a:	f107 0210 	add.w	r2, r7, #16
 800123e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001240:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001246:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800124a:	ee06 1a90 	vmov	s13, r1
 800124e:	ee07 2a10 	vmov	s14, r2
 8001252:	ee07 3a90 	vmov	s15, r3
}
 8001256:	eeb0 0a66 	vmov.f32	s0, s13
 800125a:	eef0 0a47 	vmov.f32	s1, s14
 800125e:	eeb0 1a67 	vmov.f32	s2, s15
 8001262:	3730      	adds	r7, #48	; 0x30
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	20000000 	.word	0x20000000
 800126c:	20000004 	.word	0x20000004
 8001270:	00000000 	.word	0x00000000
 8001274:	200001ec 	.word	0x200001ec
 8001278:	20000008 	.word	0x20000008
 800127c:	200001f0 	.word	0x200001f0
 8001280:	2000000c 	.word	0x2000000c
 8001284:	200001f4 	.word	0x200001f4

08001288 <LIS3DSH_PollDRDY>:
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 8001290:	f000 fbf6 	bl	8001a80 <HAL_GetTick>
 8001294:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 8001296:	f107 030b 	add.w	r3, r7, #11
 800129a:	2201      	movs	r2, #1
 800129c:	4619      	mov	r1, r3
 800129e:	2027      	movs	r0, #39	; 0x27
 80012a0:	f7ff fe18 	bl	8000ed4 <LIS3DSH_ReadIO>
		if(Acc_status & 0x07)break;
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d10d      	bne.n	80012ca <LIS3DSH_PollDRDY+0x42>

	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 80012ae:	7afb      	ldrb	r3, [r7, #11]
 80012b0:	f003 0307 	and.w	r3, r3, #7
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d109      	bne.n	80012cc <LIS3DSH_PollDRDY+0x44>
 80012b8:	f000 fbe2 	bl	8001a80 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d8e6      	bhi.n	8001296 <LIS3DSH_PollDRDY+0xe>
 80012c8:	e000      	b.n	80012cc <LIS3DSH_PollDRDY+0x44>
		if(Acc_status & 0x07)break;
 80012ca:	bf00      	nop
	if(Acc_status & 0x07)
 80012cc:	7afb      	ldrb	r3, [r7, #11]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <LIS3DSH_PollDRDY+0x52>
	{
		return true;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <LIS3DSH_PollDRDY+0x54>
	}
	return false;
 80012da:	2300      	movs	r3, #0

}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e4:	b5b0      	push	{r4, r5, r7, lr}
 80012e6:	b0c0      	sub	sp, #256	; 0x100
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ea:	f000 fb63 	bl	80019b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ee:	f000 f8b7 	bl	8001460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012f2:	f000 f955 	bl	80015a0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012f6:	f006 ff65 	bl	80081c4 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 80012fa:	f000 f91b 	bl	8001534 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 80012fe:	4b52      	ldr	r3, [pc, #328]	; (8001448 <main+0x164>)
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	701a      	strb	r2, [r3, #0]
  	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 8001304:	4b50      	ldr	r3, [pc, #320]	; (8001448 <main+0x164>)
 8001306:	2208      	movs	r2, #8
 8001308:	705a      	strb	r2, [r3, #1]
  	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;//update rate
 800130a:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <main+0x164>)
 800130c:	22c0      	movs	r2, #192	; 0xc0
 800130e:	709a      	strb	r2, [r3, #2]
  	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 8001310:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <main+0x164>)
 8001312:	2207      	movs	r2, #7
 8001314:	70da      	strb	r2, [r3, #3]
  	myAccConfigDef.interruptEnable = false;
 8001316:	4b4c      	ldr	r3, [pc, #304]	; (8001448 <main+0x164>)
 8001318:	2200      	movs	r2, #0
 800131a:	711a      	strb	r2, [r3, #4]
  	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 800131c:	494a      	ldr	r1, [pc, #296]	; (8001448 <main+0x164>)
 800131e:	484b      	ldr	r0, [pc, #300]	; (800144c <main+0x168>)
 8001320:	f7ff fe1c 	bl	8000f5c <LIS3DSH_Init>
  while (1)
  {
	 // CDC_Transmit_FS(sendbuffer, strlen(sendbuffer));
	//  HAL_Delay(100);
	  	 char *ret;
	  ret = strstr(recivebuffer, "9");
 8001324:	2139      	movs	r1, #57	; 0x39
 8001326:	484a      	ldr	r0, [pc, #296]	; (8001450 <main+0x16c>)
 8001328:	f007 fcef 	bl	8008d0a <strchr>
 800132c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
	 			  	    if (!ret)
 8001330:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f5      	bne.n	8001324 <main+0x40>
	 			  	    {
	  if (LIS3DSH_PollDRDY(100)==true)
 8001338:	2064      	movs	r0, #100	; 0x64
 800133a:	f7ff ffa5 	bl	8001288 <LIS3DSH_PollDRDY>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0ef      	beq.n	8001324 <main+0x40>
	  {
		myscaledata=LIS3DSH_GetDataScaled();
 8001344:	f7ff ff1e 	bl	8001184 <LIS3DSH_GetDataScaled>
 8001348:	eef0 6a40 	vmov.f32	s13, s0
 800134c:	eeb0 7a60 	vmov.f32	s14, s1
 8001350:	eef0 7a41 	vmov.f32	s15, s2
 8001354:	edc7 6a3c 	vstr	s13, [r7, #240]	; 0xf0
 8001358:	ed87 7a3d 	vstr	s14, [r7, #244]	; 0xf4
 800135c:	edc7 7a3e 	vstr	s15, [r7, #248]	; 0xf8
		char *bufx[20];
			  	char *bufy[20];
			  	char *bufz[20];
				memset( bufx, 0, sizeof( bufx));
 8001360:	463b      	mov	r3, r7
 8001362:	2250      	movs	r2, #80	; 0x50
 8001364:	2100      	movs	r1, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f007 fcb8 	bl	8008cdc <memset>
				memset( bufy, 0, sizeof( bufy));
 800136c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001370:	2250      	movs	r2, #80	; 0x50
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f007 fcb1 	bl	8008cdc <memset>
				memset( bufz, 0, sizeof( bufz));
 800137a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800137e:	2250      	movs	r2, #80	; 0x50
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f007 fcaa 	bl	8008cdc <memset>
			  	gcvt(myscaledata.x, 9, bufx);
 8001388:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f8db 	bl	8000548 <__aeabi_f2d>
 8001392:	4604      	mov	r4, r0
 8001394:	460d      	mov	r5, r1
 8001396:	463b      	mov	r3, r7
 8001398:	4619      	mov	r1, r3
 800139a:	2009      	movs	r0, #9
 800139c:	ec45 4b10 	vmov	d0, r4, r5
 80013a0:	f007 fc40 	bl	8008c24 <gcvt>
			  	gcvt(myscaledata.y, 9, bufy);
 80013a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff f8cd 	bl	8000548 <__aeabi_f2d>
 80013ae:	4604      	mov	r4, r0
 80013b0:	460d      	mov	r5, r1
 80013b2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013b6:	4619      	mov	r1, r3
 80013b8:	2009      	movs	r0, #9
 80013ba:	ec45 4b10 	vmov	d0, r4, r5
 80013be:	f007 fc31 	bl	8008c24 <gcvt>
			  	gcvt(myscaledata.z, 9, bufz);
 80013c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff f8be 	bl	8000548 <__aeabi_f2d>
 80013cc:	4604      	mov	r4, r0
 80013ce:	460d      	mov	r5, r1
 80013d0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80013d4:	4619      	mov	r1, r3
 80013d6:	2009      	movs	r0, #9
 80013d8:	ec45 4b10 	vmov	d0, r4, r5
 80013dc:	f007 fc22 	bl	8008c24 <gcvt>
			  	strcat(message,bufx);
 80013e0:	463b      	mov	r3, r7
 80013e2:	4619      	mov	r1, r3
 80013e4:	481b      	ldr	r0, [pc, #108]	; (8001454 <main+0x170>)
 80013e6:	f007 fc81 	bl	8008cec <strcat>
			  	strcat(message,comma);
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <main+0x174>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4619      	mov	r1, r3
 80013f0:	4818      	ldr	r0, [pc, #96]	; (8001454 <main+0x170>)
 80013f2:	f007 fc7b 	bl	8008cec <strcat>
			  	strcat(message,bufy);
 80013f6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80013fa:	4619      	mov	r1, r3
 80013fc:	4815      	ldr	r0, [pc, #84]	; (8001454 <main+0x170>)
 80013fe:	f007 fc75 	bl	8008cec <strcat>
			  	strcat(message,comma);
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <main+0x174>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4619      	mov	r1, r3
 8001408:	4812      	ldr	r0, [pc, #72]	; (8001454 <main+0x170>)
 800140a:	f007 fc6f 	bl	8008cec <strcat>
			  	strcat(message,bufz);
 800140e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001412:	4619      	mov	r1, r3
 8001414:	480f      	ldr	r0, [pc, #60]	; (8001454 <main+0x170>)
 8001416:	f007 fc69 	bl	8008cec <strcat>
			  	strcat(message,end);
 800141a:	4b10      	ldr	r3, [pc, #64]	; (800145c <main+0x178>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4619      	mov	r1, r3
 8001420:	480c      	ldr	r0, [pc, #48]	; (8001454 <main+0x170>)
 8001422:	f007 fc63 	bl	8008cec <strcat>




			  	CDC_Transmit_FS((uint8_t *) message, strlen(message));
 8001426:	480b      	ldr	r0, [pc, #44]	; (8001454 <main+0x170>)
 8001428:	f7fe fed2 	bl	80001d0 <strlen>
 800142c:	4603      	mov	r3, r0
 800142e:	b29b      	uxth	r3, r3
 8001430:	4619      	mov	r1, r3
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <main+0x170>)
 8001434:	f006 ff9a 	bl	800836c <CDC_Transmit_FS>
			  	memset(message, 0, sizeof(message));
 8001438:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800143c:	2100      	movs	r1, #0
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <main+0x170>)
 8001440:	f007 fc4c 	bl	8008cdc <memset>
  {
 8001444:	e76e      	b.n	8001324 <main+0x40>
 8001446:	bf00      	nop
 8001448:	200001f8 	.word	0x200001f8
 800144c:	20000200 	.word	0x20000200
 8001450:	20000a28 	.word	0x20000a28
 8001454:	20000258 	.word	0x20000258
 8001458:	20000010 	.word	0x20000010
 800145c:	20000014 	.word	0x20000014

08001460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b094      	sub	sp, #80	; 0x50
 8001464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001466:	f107 0320 	add.w	r3, r7, #32
 800146a:	2230      	movs	r2, #48	; 0x30
 800146c:	2100      	movs	r1, #0
 800146e:	4618      	mov	r0, r3
 8001470:	f007 fc34 	bl	8008cdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001474:	f107 030c 	add.w	r3, r7, #12
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	605a      	str	r2, [r3, #4]
 800147e:	609a      	str	r2, [r3, #8]
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	2300      	movs	r3, #0
 8001486:	60bb      	str	r3, [r7, #8]
 8001488:	4b28      	ldr	r3, [pc, #160]	; (800152c <SystemClock_Config+0xcc>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a27      	ldr	r2, [pc, #156]	; (800152c <SystemClock_Config+0xcc>)
 800148e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b25      	ldr	r3, [pc, #148]	; (800152c <SystemClock_Config+0xcc>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014a0:	2300      	movs	r3, #0
 80014a2:	607b      	str	r3, [r7, #4]
 80014a4:	4b22      	ldr	r3, [pc, #136]	; (8001530 <SystemClock_Config+0xd0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a21      	ldr	r2, [pc, #132]	; (8001530 <SystemClock_Config+0xd0>)
 80014aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b1f      	ldr	r3, [pc, #124]	; (8001530 <SystemClock_Config+0xd0>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014bc:	2301      	movs	r3, #1
 80014be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014c6:	2302      	movs	r3, #2
 80014c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80014ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80014d0:	2304      	movs	r3, #4
 80014d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80014d4:	23a8      	movs	r3, #168	; 0xa8
 80014d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014d8:	2302      	movs	r3, #2
 80014da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80014dc:	2307      	movs	r3, #7
 80014de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e0:	f107 0320 	add.w	r3, r7, #32
 80014e4:	4618      	mov	r0, r3
 80014e6:	f002 f83f 	bl	8003568 <HAL_RCC_OscConfig>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014f0:	f000 f8b4 	bl	800165c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f4:	230f      	movs	r3, #15
 80014f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014f8:	2302      	movs	r3, #2
 80014fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001500:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001504:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2105      	movs	r1, #5
 8001512:	4618      	mov	r0, r3
 8001514:	f002 faa0 	bl	8003a58 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800151e:	f000 f89d 	bl	800165c <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3750      	adds	r7, #80	; 0x50
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40007000 	.word	0x40007000

08001534 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001538:	4b17      	ldr	r3, [pc, #92]	; (8001598 <MX_SPI1_Init+0x64>)
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <MX_SPI1_Init+0x68>)
 800153c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800153e:	4b16      	ldr	r3, [pc, #88]	; (8001598 <MX_SPI1_Init+0x64>)
 8001540:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001544:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001546:	4b14      	ldr	r3, [pc, #80]	; (8001598 <MX_SPI1_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800154c:	4b12      	ldr	r3, [pc, #72]	; (8001598 <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001552:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_SPI1_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001558:	4b0f      	ldr	r3, [pc, #60]	; (8001598 <MX_SPI1_Init+0x64>)
 800155a:	2200      	movs	r2, #0
 800155c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_SPI1_Init+0x64>)
 8001560:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001564:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_SPI1_Init+0x64>)
 8001568:	2200      	movs	r2, #0
 800156a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800156c:	4b0a      	ldr	r3, [pc, #40]	; (8001598 <MX_SPI1_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001572:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_SPI1_Init+0x64>)
 8001574:	2200      	movs	r2, #0
 8001576:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <MX_SPI1_Init+0x64>)
 800157a:	2200      	movs	r2, #0
 800157c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800157e:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_SPI1_Init+0x64>)
 8001580:	220a      	movs	r2, #10
 8001582:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001584:	4804      	ldr	r0, [pc, #16]	; (8001598 <MX_SPI1_Init+0x64>)
 8001586:	f002 fc5f 	bl	8003e48 <HAL_SPI_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001590:	f000 f864 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001594:	bf00      	nop
 8001596:	bd80      	pop	{r7, pc}
 8001598:	20000200 	.word	0x20000200
 800159c:	40013000 	.word	0x40013000

080015a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
 80015ba:	4b26      	ldr	r3, [pc, #152]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a25      	ldr	r2, [pc, #148]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015c0:	f043 0310 	orr.w	r3, r3, #16
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b23      	ldr	r3, [pc, #140]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0310 	and.w	r3, r3, #16
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	60fb      	str	r3, [r7, #12]
 80015d6:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	4a1e      	ldr	r2, [pc, #120]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015e0:	6313      	str	r3, [r2, #48]	; 0x30
 80015e2:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a17      	ldr	r2, [pc, #92]	; (8001654 <MX_GPIO_Init+0xb4>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_GPIO_Init+0xb4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_GPIO_Init+0xb4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	4a10      	ldr	r2, [pc, #64]	; (8001654 <MX_GPIO_Init+0xb4>)
 8001614:	f043 0302 	orr.w	r3, r3, #2
 8001618:	6313      	str	r3, [r2, #48]	; 0x30
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <MX_GPIO_Init+0xb4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 8001626:	2200      	movs	r2, #0
 8001628:	2109      	movs	r1, #9
 800162a:	480b      	ldr	r0, [pc, #44]	; (8001658 <MX_GPIO_Init+0xb8>)
 800162c:	f000 fd06 	bl	800203c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8001630:	2309      	movs	r3, #9
 8001632:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001634:	2301      	movs	r3, #1
 8001636:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163c:	2300      	movs	r3, #0
 800163e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001640:	f107 0314 	add.w	r3, r7, #20
 8001644:	4619      	mov	r1, r3
 8001646:	4804      	ldr	r0, [pc, #16]	; (8001658 <MX_GPIO_Init+0xb8>)
 8001648:	f000 fb5c 	bl	8001d04 <HAL_GPIO_Init>

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40023800 	.word	0x40023800
 8001658:	40021000 	.word	0x40021000

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001660:	b672      	cpsid	i
}
 8001662:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001664:	e7fe      	b.n	8001664 <Error_Handler+0x8>
	...

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	; (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167c:	6453      	str	r3, [r2, #68]	; 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	; (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	; (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a19      	ldr	r2, [pc, #100]	; (800173c <HAL_SPI_MspInit+0x84>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d12b      	bne.n	8001732 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_SPI_MspInit+0x88>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a17      	ldr	r2, [pc, #92]	; (8001740 <HAL_SPI_MspInit+0x88>)
 80016e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_SPI_MspInit+0x88>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b11      	ldr	r3, [pc, #68]	; (8001740 <HAL_SPI_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a10      	ldr	r2, [pc, #64]	; (8001740 <HAL_SPI_MspInit+0x88>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <HAL_SPI_MspInit+0x88>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0301 	and.w	r3, r3, #1
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001712:	23e0      	movs	r3, #224	; 0xe0
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001716:	2302      	movs	r3, #2
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001722:	2305      	movs	r3, #5
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <HAL_SPI_MspInit+0x8c>)
 800172e:	f000 fae9 	bl	8001d04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001732:	bf00      	nop
 8001734:	3728      	adds	r7, #40	; 0x28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40013000 	.word	0x40013000
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000

08001748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800174c:	e7fe      	b.n	800174c <NMI_Handler+0x4>

0800174e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800174e:	b480      	push	{r7}
 8001750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001752:	e7fe      	b.n	8001752 <HardFault_Handler+0x4>

08001754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001758:	e7fe      	b.n	8001758 <MemManage_Handler+0x4>

0800175a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800175e:	e7fe      	b.n	800175e <BusFault_Handler+0x4>

08001760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001764:	e7fe      	b.n	8001764 <UsageFault_Handler+0x4>

08001766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001782:	b480      	push	{r7}
 8001784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001786:	bf00      	nop
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001794:	f000 f960 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017a0:	4802      	ldr	r0, [pc, #8]	; (80017ac <OTG_FS_IRQHandler+0x10>)
 80017a2:	f000 fdb4 	bl	800230e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20002010 	.word	0x20002010

080017b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
	return 1;
 80017b4:	2301      	movs	r3, #1
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_kill>:

int _kill(int pid, int sig)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80017ca:	f007 fa4f 	bl	8008c6c <__errno>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2216      	movs	r2, #22
 80017d2:	601a      	str	r2, [r3, #0]
	return -1;
 80017d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3708      	adds	r7, #8
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <_exit>:

void _exit (int status)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80017e8:	f04f 31ff 	mov.w	r1, #4294967295
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7ff ffe7 	bl	80017c0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80017f2:	e7fe      	b.n	80017f2 <_exit+0x12>

080017f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	e00a      	b.n	800181c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001806:	f3af 8000 	nop.w
 800180a:	4601      	mov	r1, r0
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	60ba      	str	r2, [r7, #8]
 8001812:	b2ca      	uxtb	r2, r1
 8001814:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3301      	adds	r3, #1
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	429a      	cmp	r2, r3
 8001822:	dbf0      	blt.n	8001806 <_read+0x12>
	}

return len;
 8001824:	687b      	ldr	r3, [r7, #4]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	e009      	b.n	8001854 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	1c5a      	adds	r2, r3, #1
 8001844:	60ba      	str	r2, [r7, #8]
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	3301      	adds	r3, #1
 8001852:	617b      	str	r3, [r7, #20]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	429a      	cmp	r2, r3
 800185a:	dbf1      	blt.n	8001840 <_write+0x12>
	}
	return len;
 800185c:	687b      	ldr	r3, [r7, #4]
}
 800185e:	4618      	mov	r0, r3
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <_close>:

int _close(int file)
{
 8001866:	b480      	push	{r7}
 8001868:	b083      	sub	sp, #12
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
	return -1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
 8001886:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188e:	605a      	str	r2, [r3, #4]
	return 0;
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <_isatty>:

int _isatty(int file)
{
 800189e:	b480      	push	{r7}
 80018a0:	b083      	sub	sp, #12
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
	return 1;
 80018a6:	2301      	movs	r3, #1
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
	return 0;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3714      	adds	r7, #20
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
	...

080018d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <_sbrk+0x5c>)
 80018da:	4b15      	ldr	r3, [pc, #84]	; (8001930 <_sbrk+0x60>)
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <_sbrk+0x64>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d102      	bne.n	80018f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018ec:	4b11      	ldr	r3, [pc, #68]	; (8001934 <_sbrk+0x64>)
 80018ee:	4a12      	ldr	r2, [pc, #72]	; (8001938 <_sbrk+0x68>)
 80018f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f2:	4b10      	ldr	r3, [pc, #64]	; (8001934 <_sbrk+0x64>)
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	693a      	ldr	r2, [r7, #16]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d207      	bcs.n	8001910 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001900:	f007 f9b4 	bl	8008c6c <__errno>
 8001904:	4603      	mov	r3, r0
 8001906:	220c      	movs	r2, #12
 8001908:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190a:	f04f 33ff 	mov.w	r3, #4294967295
 800190e:	e009      	b.n	8001924 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <_sbrk+0x64>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <_sbrk+0x64>)
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4413      	add	r3, r2
 800191e:	4a05      	ldr	r2, [pc, #20]	; (8001934 <_sbrk+0x64>)
 8001920:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001922:	68fb      	ldr	r3, [r7, #12]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20020000 	.word	0x20020000
 8001930:	00000400 	.word	0x00000400
 8001934:	20000b28 	.word	0x20000b28
 8001938:	20002750 	.word	0x20002750

0800193c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <SystemInit+0x20>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001946:	4a05      	ldr	r2, [pc, #20]	; (800195c <SystemInit+0x20>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001964:	480d      	ldr	r0, [pc, #52]	; (800199c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001966:	490e      	ldr	r1, [pc, #56]	; (80019a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001968:	4a0e      	ldr	r2, [pc, #56]	; (80019a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0b      	ldr	r2, [pc, #44]	; (80019a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800197c:	4c0b      	ldr	r4, [pc, #44]	; (80019ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198a:	f7ff ffd7 	bl	800193c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800198e:	f007 f973 	bl	8008c78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001992:	f7ff fca7 	bl	80012e4 <main>
  bx  lr    
 8001996:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800199c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019a0:	20000178 	.word	0x20000178
  ldr r2, =_sidata
 80019a4:	0800b760 	.word	0x0800b760
  ldr r2, =_sbss
 80019a8:	20000178 	.word	0x20000178
  ldr r4, =_ebss
 80019ac:	2000274c 	.word	0x2000274c

080019b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019b0:	e7fe      	b.n	80019b0 <ADC_IRQHandler>
	...

080019b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019b8:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <HAL_Init+0x40>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0d      	ldr	r2, [pc, #52]	; (80019f4 <HAL_Init+0x40>)
 80019be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019c4:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_Init+0x40>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <HAL_Init+0x40>)
 80019ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <HAL_Init+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_Init+0x40>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019dc:	2003      	movs	r0, #3
 80019de:	f000 f94f 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019e2:	200f      	movs	r0, #15
 80019e4:	f000 f808 	bl	80019f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019e8:	f7ff fe3e 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	40023c00 	.word	0x40023c00

080019f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a00:	4b12      	ldr	r3, [pc, #72]	; (8001a4c <HAL_InitTick+0x54>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <HAL_InitTick+0x58>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f967 	bl	8001cea <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e00e      	b.n	8001a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b0f      	cmp	r3, #15
 8001a2a:	d80a      	bhi.n	8001a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	6879      	ldr	r1, [r7, #4]
 8001a30:	f04f 30ff 	mov.w	r0, #4294967295
 8001a34:	f000 f92f 	bl	8001c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a38:	4a06      	ldr	r2, [pc, #24]	; (8001a54 <HAL_InitTick+0x5c>)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e000      	b.n	8001a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20000018 	.word	0x20000018
 8001a50:	20000020 	.word	0x20000020
 8001a54:	2000001c 	.word	0x2000001c

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000020 	.word	0x20000020
 8001a7c:	20000b2c 	.word	0x20000b2c

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	20000b2c 	.word	0x20000b2c

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000020 	.word	0x20000020

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff29 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff3e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
	...

08001d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
 8001d1e:	e16b      	b.n	8001ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d20:	2201      	movs	r2, #1
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d34:	693a      	ldr	r2, [r7, #16]
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	f040 815a 	bne.w	8001ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 0303 	and.w	r3, r3, #3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d005      	beq.n	8001d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d130      	bne.n	8001db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	005b      	lsls	r3, r3, #1
 8001d60:	2203      	movs	r2, #3
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	091b      	lsrs	r3, r3, #4
 8001da2:	f003 0201 	and.w	r2, r3, #1
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f003 0303 	and.w	r3, r3, #3
 8001dc0:	2b03      	cmp	r3, #3
 8001dc2:	d017      	beq.n	8001df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	2203      	movs	r2, #3
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	43db      	mvns	r3, r3
 8001dd6:	69ba      	ldr	r2, [r7, #24]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d123      	bne.n	8001e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	08da      	lsrs	r2, r3, #3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3208      	adds	r2, #8
 8001e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	009b      	lsls	r3, r3, #2
 8001e16:	220f      	movs	r2, #15
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	69ba      	ldr	r2, [r7, #24]
 8001e20:	4013      	ands	r3, r2
 8001e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691a      	ldr	r2, [r3, #16]
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	08da      	lsrs	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	3208      	adds	r2, #8
 8001e42:	69b9      	ldr	r1, [r7, #24]
 8001e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	2203      	movs	r2, #3
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	43db      	mvns	r3, r3
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 0203 	and.w	r2, r3, #3
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4313      	orrs	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 80b4 	beq.w	8001ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b60      	ldr	r3, [pc, #384]	; (8002010 <HAL_GPIO_Init+0x30c>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	4a5f      	ldr	r2, [pc, #380]	; (8002010 <HAL_GPIO_Init+0x30c>)
 8001e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e98:	6453      	str	r3, [r2, #68]	; 0x44
 8001e9a:	4b5d      	ldr	r3, [pc, #372]	; (8002010 <HAL_GPIO_Init+0x30c>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ea6:	4a5b      	ldr	r2, [pc, #364]	; (8002014 <HAL_GPIO_Init+0x310>)
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	089b      	lsrs	r3, r3, #2
 8001eac:	3302      	adds	r3, #2
 8001eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f003 0303 	and.w	r3, r3, #3
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a52      	ldr	r2, [pc, #328]	; (8002018 <HAL_GPIO_Init+0x314>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02b      	beq.n	8001f2a <HAL_GPIO_Init+0x226>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a51      	ldr	r2, [pc, #324]	; (800201c <HAL_GPIO_Init+0x318>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d025      	beq.n	8001f26 <HAL_GPIO_Init+0x222>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a50      	ldr	r2, [pc, #320]	; (8002020 <HAL_GPIO_Init+0x31c>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d01f      	beq.n	8001f22 <HAL_GPIO_Init+0x21e>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4a4f      	ldr	r2, [pc, #316]	; (8002024 <HAL_GPIO_Init+0x320>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d019      	beq.n	8001f1e <HAL_GPIO_Init+0x21a>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4a4e      	ldr	r2, [pc, #312]	; (8002028 <HAL_GPIO_Init+0x324>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_GPIO_Init+0x216>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4a4d      	ldr	r2, [pc, #308]	; (800202c <HAL_GPIO_Init+0x328>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <HAL_GPIO_Init+0x212>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a4c      	ldr	r2, [pc, #304]	; (8002030 <HAL_GPIO_Init+0x32c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d007      	beq.n	8001f12 <HAL_GPIO_Init+0x20e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a4b      	ldr	r2, [pc, #300]	; (8002034 <HAL_GPIO_Init+0x330>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_GPIO_Init+0x20a>
 8001f0a:	2307      	movs	r3, #7
 8001f0c:	e00e      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f0e:	2308      	movs	r3, #8
 8001f10:	e00c      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f12:	2306      	movs	r3, #6
 8001f14:	e00a      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f16:	2305      	movs	r3, #5
 8001f18:	e008      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	e006      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e004      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f22:	2302      	movs	r3, #2
 8001f24:	e002      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <HAL_GPIO_Init+0x228>
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	69fa      	ldr	r2, [r7, #28]
 8001f2e:	f002 0203 	and.w	r2, r2, #3
 8001f32:	0092      	lsls	r2, r2, #2
 8001f34:	4093      	lsls	r3, r2
 8001f36:	69ba      	ldr	r2, [r7, #24]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f3c:	4935      	ldr	r1, [pc, #212]	; (8002014 <HAL_GPIO_Init+0x310>)
 8001f3e:	69fb      	ldr	r3, [r7, #28]
 8001f40:	089b      	lsrs	r3, r3, #2
 8001f42:	3302      	adds	r3, #2
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f4a:	4b3b      	ldr	r3, [pc, #236]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4013      	ands	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001f66:	69ba      	ldr	r2, [r7, #24]
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f6e:	4a32      	ldr	r2, [pc, #200]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f74:	4b30      	ldr	r3, [pc, #192]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f98:	4a27      	ldr	r2, [pc, #156]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001fc2:	4a1d      	ldr	r2, [pc, #116]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fc8:	4b1b      	ldr	r3, [pc, #108]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	69ba      	ldr	r2, [r7, #24]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fec:	4a12      	ldr	r2, [pc, #72]	; (8002038 <HAL_GPIO_Init+0x334>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	61fb      	str	r3, [r7, #28]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	2b0f      	cmp	r3, #15
 8001ffc:	f67f ae90 	bls.w	8001d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002000:	bf00      	nop
 8002002:	bf00      	nop
 8002004:	3724      	adds	r7, #36	; 0x24
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40013800 	.word	0x40013800
 8002018:	40020000 	.word	0x40020000
 800201c:	40020400 	.word	0x40020400
 8002020:	40020800 	.word	0x40020800
 8002024:	40020c00 	.word	0x40020c00
 8002028:	40021000 	.word	0x40021000
 800202c:	40021400 	.word	0x40021400
 8002030:	40021800 	.word	0x40021800
 8002034:	40021c00 	.word	0x40021c00
 8002038:	40013c00 	.word	0x40013c00

0800203c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	807b      	strh	r3, [r7, #2]
 8002048:	4613      	mov	r3, r2
 800204a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d003      	beq.n	800205a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002052:	887a      	ldrh	r2, [r7, #2]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002058:	e003      	b.n	8002062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800205a:	887b      	ldrh	r3, [r7, #2]
 800205c:	041a      	lsls	r2, r3, #16
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	619a      	str	r2, [r3, #24]
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800206e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002070:	b08f      	sub	sp, #60	; 0x3c
 8002072:	af0a      	add	r7, sp, #40	; 0x28
 8002074:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e10f      	b.n	80022a0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800208c:	b2db      	uxtb	r3, r3
 800208e:	2b00      	cmp	r3, #0
 8002090:	d106      	bne.n	80020a0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f006 faae 	bl	80085fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2203      	movs	r2, #3
 80020a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d102      	bne.n	80020ba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f002 fd7f 	bl	8004bc2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	603b      	str	r3, [r7, #0]
 80020ca:	687e      	ldr	r6, [r7, #4]
 80020cc:	466d      	mov	r5, sp
 80020ce:	f106 0410 	add.w	r4, r6, #16
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020de:	e885 0003 	stmia.w	r5, {r0, r1}
 80020e2:	1d33      	adds	r3, r6, #4
 80020e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e6:	6838      	ldr	r0, [r7, #0]
 80020e8:	f002 fc56 	bl	8004998 <USB_CoreInit>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d005      	beq.n	80020fe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2202      	movs	r2, #2
 80020f6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e0d0      	b.n	80022a0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f002 fd6d 	bl	8004be4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210a:	2300      	movs	r3, #0
 800210c:	73fb      	strb	r3, [r7, #15]
 800210e:	e04a      	b.n	80021a6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002110:	7bfa      	ldrb	r2, [r7, #15]
 8002112:	6879      	ldr	r1, [r7, #4]
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	333d      	adds	r3, #61	; 0x3d
 8002120:	2201      	movs	r2, #1
 8002122:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	333c      	adds	r3, #60	; 0x3c
 8002134:	7bfa      	ldrb	r2, [r7, #15]
 8002136:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002138:	7bfa      	ldrb	r2, [r7, #15]
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	b298      	uxth	r0, r3
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3344      	adds	r3, #68	; 0x44
 800214c:	4602      	mov	r2, r0
 800214e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3340      	adds	r3, #64	; 0x40
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002164:	7bfa      	ldrb	r2, [r7, #15]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	4413      	add	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3348      	adds	r3, #72	; 0x48
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	334c      	adds	r3, #76	; 0x4c
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	3354      	adds	r3, #84	; 0x54
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d3af      	bcc.n	8002110 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
 80021b4:	e044      	b.n	8002240 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80021b6:	7bfa      	ldrb	r2, [r7, #15]
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	440b      	add	r3, r1
 80021c4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80021de:	7bfa      	ldrb	r2, [r7, #15]
 80021e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80021e2:	7bfa      	ldrb	r2, [r7, #15]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4413      	add	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4413      	add	r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800220a:	2200      	movs	r2, #0
 800220c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4413      	add	r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002224:	7bfa      	ldrb	r2, [r7, #15]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002236:	2200      	movs	r2, #0
 8002238:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	3301      	adds	r3, #1
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	7bfa      	ldrb	r2, [r7, #15]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	429a      	cmp	r2, r3
 8002248:	d3b5      	bcc.n	80021b6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	687e      	ldr	r6, [r7, #4]
 8002252:	466d      	mov	r5, sp
 8002254:	f106 0410 	add.w	r4, r6, #16
 8002258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800225c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800225e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002260:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002264:	e885 0003 	stmia.w	r5, {r0, r1}
 8002268:	1d33      	adds	r3, r6, #4
 800226a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800226c:	6838      	ldr	r0, [r7, #0]
 800226e:	f002 fd05 	bl	8004c7c <USB_DevInit>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2202      	movs	r2, #2
 800227c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e00d      	b.n	80022a0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f003 fe54 	bl	8005f46 <USB_DevDisconnect>

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3714      	adds	r7, #20
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022a8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_PCD_Start+0x1c>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e020      	b.n	8002306 <HAL_PCD_Start+0x5e>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d109      	bne.n	80022e8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d005      	beq.n	80022e8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f002 fc57 	bl	8004ba0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f003 fe04 	bl	8005f04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800230e:	b590      	push	{r4, r7, lr}
 8002310:	b08d      	sub	sp, #52	; 0x34
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800231c:	6a3b      	ldr	r3, [r7, #32]
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f003 fec2 	bl	80060ae <USB_GetMode>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	f040 848a 	bne.w	8002c46 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 fe26 	bl	8005f88 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 8480 	beq.w	8002c44 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f003 fe13 	bl	8005f88 <USB_ReadInterrupts>
 8002362:	4603      	mov	r3, r0
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b02      	cmp	r3, #2
 800236a:	d107      	bne.n	800237c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	695a      	ldr	r2, [r3, #20]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f002 0202 	and.w	r2, r2, #2
 800237a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	f003 fe01 	bl	8005f88 <USB_ReadInterrupts>
 8002386:	4603      	mov	r3, r0
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b10      	cmp	r3, #16
 800238e:	d161      	bne.n	8002454 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0210 	bic.w	r2, r2, #16
 800239e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80023a0:	6a3b      	ldr	r3, [r7, #32]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f003 020f 	and.w	r2, r3, #15
 80023ac:	4613      	mov	r3, r2
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	4413      	add	r3, r2
 80023bc:	3304      	adds	r3, #4
 80023be:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	0c5b      	lsrs	r3, r3, #17
 80023c4:	f003 030f 	and.w	r3, r3, #15
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d124      	bne.n	8002416 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d035      	beq.n	8002444 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80023e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	6a38      	ldr	r0, [r7, #32]
 80023ec:	f003 fc38 	bl	8005c60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	091b      	lsrs	r3, r3, #4
 80023f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023fc:	441a      	add	r2, r3
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	091b      	lsrs	r3, r3, #4
 800240a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800240e:	441a      	add	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	621a      	str	r2, [r3, #32]
 8002414:	e016      	b.n	8002444 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002416:	69bb      	ldr	r3, [r7, #24]
 8002418:	0c5b      	lsrs	r3, r3, #17
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	2b06      	cmp	r3, #6
 8002420:	d110      	bne.n	8002444 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002428:	2208      	movs	r2, #8
 800242a:	4619      	mov	r1, r3
 800242c:	6a38      	ldr	r0, [r7, #32]
 800242e:	f003 fc17 	bl	8005c60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	6a1a      	ldr	r2, [r3, #32]
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800243e:	441a      	add	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	699a      	ldr	r2, [r3, #24]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0210 	orr.w	r2, r2, #16
 8002452:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4618      	mov	r0, r3
 800245a:	f003 fd95 	bl	8005f88 <USB_ReadInterrupts>
 800245e:	4603      	mov	r3, r0
 8002460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002464:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002468:	f040 80a7 	bne.w	80025ba <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800246c:	2300      	movs	r3, #0
 800246e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4618      	mov	r0, r3
 8002476:	f003 fd9a 	bl	8005fae <USB_ReadDevAllOutEpInterrupt>
 800247a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800247c:	e099      	b.n	80025b2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800247e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 808e 	beq.w	80025a6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002490:	b2d2      	uxtb	r2, r2
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f003 fdbe 	bl	8006016 <USB_ReadDevOutEPInterrupt>
 800249a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00c      	beq.n	80024c0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	015a      	lsls	r2, r3, #5
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	4413      	add	r3, r2
 80024ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b2:	461a      	mov	r2, r3
 80024b4:	2301      	movs	r3, #1
 80024b6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80024b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f000 fec2 	bl	8003244 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00c      	beq.n	80024e4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024d6:	461a      	mov	r2, r3
 80024d8:	2308      	movs	r3, #8
 80024da:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80024dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 ff98 	bl	8003414 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d008      	beq.n	8002500 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fa:	461a      	mov	r2, r3
 80024fc:	2310      	movs	r3, #16
 80024fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d030      	beq.n	800256c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002512:	2b80      	cmp	r3, #128	; 0x80
 8002514:	d109      	bne.n	800252a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002524:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002528:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800252a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800252c:	4613      	mov	r3, r2
 800252e:	00db      	lsls	r3, r3, #3
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	4413      	add	r3, r2
 800253c:	3304      	adds	r3, #4
 800253e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	78db      	ldrb	r3, [r3, #3]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d108      	bne.n	800255a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	2200      	movs	r2, #0
 800254c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800254e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002550:	b2db      	uxtb	r3, r3
 8002552:	4619      	mov	r1, r3
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f006 f957 	bl	8008808 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002566:	461a      	mov	r2, r3
 8002568:	2302      	movs	r3, #2
 800256a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	f003 0320 	and.w	r3, r3, #32
 8002572:	2b00      	cmp	r3, #0
 8002574:	d008      	beq.n	8002588 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002578:	015a      	lsls	r2, r3, #5
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	4413      	add	r3, r2
 800257e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002582:	461a      	mov	r2, r3
 8002584:	2320      	movs	r3, #32
 8002586:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002594:	015a      	lsls	r2, r3, #5
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	4413      	add	r3, r2
 800259a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800259e:	461a      	mov	r2, r3
 80025a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025a4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80025ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025ae:	085b      	lsrs	r3, r3, #1
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80025b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f47f af62 	bne.w	800247e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f003 fce2 	bl	8005f88 <USB_ReadInterrupts>
 80025c4:	4603      	mov	r3, r0
 80025c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80025ce:	f040 80db 	bne.w	8002788 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f003 fd03 	bl	8005fe2 <USB_ReadDevAllInEpInterrupt>
 80025dc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80025de:	2300      	movs	r3, #0
 80025e0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80025e2:	e0cd      	b.n	8002780 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80025e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 80c2 	beq.w	8002774 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	4611      	mov	r1, r2
 80025fa:	4618      	mov	r0, r3
 80025fc:	f003 fd29 	bl	8006052 <USB_ReadDevInEPInterrupt>
 8002600:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	f003 0301 	and.w	r3, r3, #1
 8002608:	2b00      	cmp	r3, #0
 800260a:	d057      	beq.n	80026bc <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800260c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	2201      	movs	r2, #1
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	43db      	mvns	r3, r3
 8002626:	69f9      	ldr	r1, [r7, #28]
 8002628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800262c:	4013      	ands	r3, r2
 800262e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	015a      	lsls	r2, r3, #5
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800263c:	461a      	mov	r2, r3
 800263e:	2301      	movs	r3, #1
 8002640:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d132      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	440b      	add	r3, r1
 8002658:	334c      	adds	r3, #76	; 0x4c
 800265a:	6819      	ldr	r1, [r3, #0]
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4403      	add	r3, r0
 800266a:	3348      	adds	r3, #72	; 0x48
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4419      	add	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4403      	add	r3, r0
 800267e:	334c      	adds	r3, #76	; 0x4c
 8002680:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002684:	2b00      	cmp	r3, #0
 8002686:	d113      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x3a2>
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	3354      	adds	r3, #84	; 0x54
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d108      	bne.n	80026b0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80026a8:	461a      	mov	r2, r3
 80026aa:	2101      	movs	r1, #1
 80026ac:	f003 fd30 	bl	8006110 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	b2db      	uxtb	r3, r3
 80026b4:	4619      	mov	r1, r3
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f006 f821 	bl	80086fe <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d008      	beq.n	80026d8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026d2:	461a      	mov	r2, r3
 80026d4:	2308      	movs	r3, #8
 80026d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	f003 0310 	and.w	r3, r3, #16
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d008      	beq.n	80026f4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80026e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e4:	015a      	lsls	r2, r3, #5
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	4413      	add	r3, r2
 80026ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026ee:	461a      	mov	r2, r3
 80026f0:	2310      	movs	r3, #16
 80026f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4413      	add	r3, r2
 8002706:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800270a:	461a      	mov	r2, r3
 800270c:	2340      	movs	r3, #64	; 0x40
 800270e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d023      	beq.n	8002762 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800271a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800271c:	6a38      	ldr	r0, [r7, #32]
 800271e:	f002 fc11 	bl	8004f44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	4613      	mov	r3, r2
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	3338      	adds	r3, #56	; 0x38
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	4413      	add	r3, r2
 8002732:	3304      	adds	r3, #4
 8002734:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	78db      	ldrb	r3, [r3, #3]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d108      	bne.n	8002750 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2200      	movs	r2, #0
 8002742:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	b2db      	uxtb	r3, r3
 8002748:	4619      	mov	r1, r3
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f006 f86e 	bl	800882c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	015a      	lsls	r2, r3, #5
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	4413      	add	r3, r2
 8002758:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800275c:	461a      	mov	r2, r3
 800275e:	2302      	movs	r3, #2
 8002760:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800276c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 fcdb 	bl	800312a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	3301      	adds	r3, #1
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800277a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277c:	085b      	lsrs	r3, r3, #1
 800277e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	2b00      	cmp	r3, #0
 8002784:	f47f af2e 	bne.w	80025e4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4618      	mov	r0, r3
 800278e:	f003 fbfb 	bl	8005f88 <USB_ReadInterrupts>
 8002792:	4603      	mov	r3, r0
 8002794:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800279c:	d122      	bne.n	80027e4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	69fa      	ldr	r2, [r7, #28]
 80027a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027ac:	f023 0301 	bic.w	r3, r3, #1
 80027b0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d108      	bne.n	80027ce <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80027c4:	2100      	movs	r1, #0
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fec2 	bl	8003550 <HAL_PCDEx_LPM_Callback>
 80027cc:	e002      	b.n	80027d4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f006 f80c 	bl	80087ec <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80027e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f003 fbcd 	bl	8005f88 <USB_ReadInterrupts>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f8:	d112      	bne.n	8002820 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	2b01      	cmp	r3, #1
 8002808:	d102      	bne.n	8002810 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f005 ffc8 	bl	80087a0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800281e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f003 fbaf 	bl	8005f88 <USB_ReadInterrupts>
 800282a:	4603      	mov	r3, r0
 800282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002834:	f040 80b7 	bne.w	80029a6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002846:	f023 0301 	bic.w	r3, r3, #1
 800284a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2110      	movs	r1, #16
 8002852:	4618      	mov	r0, r3
 8002854:	f002 fb76 	bl	8004f44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002858:	2300      	movs	r3, #0
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800285c:	e046      	b.n	80028ec <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800285e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002860:	015a      	lsls	r2, r3, #5
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	4413      	add	r3, r2
 8002866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286a:	461a      	mov	r2, r3
 800286c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002870:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002874:	015a      	lsls	r2, r3, #5
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002882:	0151      	lsls	r1, r2, #5
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	440a      	add	r2, r1
 8002888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800288c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002890:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002894:	015a      	lsls	r2, r3, #5
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	4413      	add	r3, r2
 800289a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800289e:	461a      	mov	r2, r3
 80028a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028a4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80028a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a8:	015a      	lsls	r2, r3, #5
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	4413      	add	r3, r2
 80028ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b6:	0151      	lsls	r1, r2, #5
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	440a      	add	r2, r1
 80028bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028c4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028d6:	0151      	lsls	r1, r2, #5
 80028d8:	69fa      	ldr	r2, [r7, #28]
 80028da:	440a      	add	r2, r1
 80028dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80028e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80028e4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	3301      	adds	r3, #1
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d3b3      	bcc.n	800285e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fc:	69db      	ldr	r3, [r3, #28]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002904:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002908:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	2b00      	cmp	r3, #0
 8002910:	d016      	beq.n	8002940 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002922:	f043 030b 	orr.w	r3, r3, #11
 8002926:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	69fa      	ldr	r2, [r7, #28]
 8002934:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002938:	f043 030b 	orr.w	r3, r3, #11
 800293c:	6453      	str	r3, [r2, #68]	; 0x44
 800293e:	e015      	b.n	800296c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	69fa      	ldr	r2, [r7, #28]
 800294a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800294e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002952:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002956:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002966:	f043 030b 	orr.w	r3, r3, #11
 800296a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	69fa      	ldr	r2, [r7, #28]
 8002976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800297a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800297e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002990:	461a      	mov	r2, r3
 8002992:	f003 fbbd 	bl	8006110 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	695a      	ldr	r2, [r3, #20]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80029a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 faec 	bl	8005f88 <USB_ReadInterrupts>
 80029b0:	4603      	mov	r3, r0
 80029b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ba:	d124      	bne.n	8002a06 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f003 fb82 	bl	80060ca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f002 fb37 	bl	800503e <USB_GetDevSpeed>
 80029d0:	4603      	mov	r3, r0
 80029d2:	461a      	mov	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681c      	ldr	r4, [r3, #0]
 80029dc:	f001 fa28 	bl	8003e30 <HAL_RCC_GetHCLKFreq>
 80029e0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	461a      	mov	r2, r3
 80029ea:	4620      	mov	r0, r4
 80029ec:	f002 f836 	bl	8004a5c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f005 feac 	bl	800874e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	695a      	ldr	r2, [r3, #20]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 fabc 	bl	8005f88 <USB_ReadInterrupts>
 8002a10:	4603      	mov	r3, r0
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b08      	cmp	r3, #8
 8002a18:	d10a      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f005 fe89 	bl	8008732 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	695a      	ldr	r2, [r3, #20]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f002 0208 	and.w	r2, r2, #8
 8002a2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 faa7 	bl	8005f88 <USB_ReadInterrupts>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d122      	bne.n	8002a8a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a50:	2301      	movs	r3, #1
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	e014      	b.n	8002a80 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4413      	add	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	440b      	add	r3, r1
 8002a64:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d105      	bne.n	8002a7a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	4619      	mov	r1, r3
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fb27 	bl	80030c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d3e5      	bcc.n	8002a56 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f003 fa7a 	bl	8005f88 <USB_ReadInterrupts>
 8002a94:	4603      	mov	r3, r0
 8002a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a9e:	d13b      	bne.n	8002b18 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002aa4:	e02b      	b.n	8002afe <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	015a      	lsls	r2, r3, #5
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	4413      	add	r3, r2
 8002aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	4613      	mov	r3, r2
 8002abc:	00db      	lsls	r3, r3, #3
 8002abe:	4413      	add	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	3340      	adds	r3, #64	; 0x40
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d115      	bne.n	8002af8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002acc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	da12      	bge.n	8002af8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002ad2:	6879      	ldr	r1, [r7, #4]
 8002ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	00db      	lsls	r3, r3, #3
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	333f      	adds	r3, #63	; 0x3f
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	4619      	mov	r1, r3
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 fae8 	bl	80030c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002afa:	3301      	adds	r3, #1
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d3ce      	bcc.n	8002aa6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695a      	ldr	r2, [r3, #20]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b16:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f003 fa33 	bl	8005f88 <USB_ReadInterrupts>
 8002b22:	4603      	mov	r3, r0
 8002b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b2c:	d155      	bne.n	8002bda <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b2e:	2301      	movs	r3, #1
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e045      	b.n	8002bc0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b44:	6879      	ldr	r1, [r7, #4]
 8002b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b48:	4613      	mov	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d12e      	bne.n	8002bba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b5c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	da2b      	bge.n	8002bba <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b6e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d121      	bne.n	8002bba <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b8c:	6a3b      	ldr	r3, [r7, #32]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b94:	6a3b      	ldr	r3, [r7, #32]
 8002b96:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b98:	6a3b      	ldr	r3, [r7, #32]
 8002b9a:	695b      	ldr	r3, [r3, #20]
 8002b9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d10a      	bne.n	8002bba <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bb6:	6053      	str	r3, [r2, #4]
            break;
 8002bb8:	e007      	b.n	8002bca <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d3b4      	bcc.n	8002b34 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	695a      	ldr	r2, [r3, #20]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002bd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4618      	mov	r0, r3
 8002be0:	f003 f9d2 	bl	8005f88 <USB_ReadInterrupts>
 8002be4:	4603      	mov	r3, r0
 8002be6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bee:	d10a      	bne.n	8002c06 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f005 fe2d 	bl	8008850 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695a      	ldr	r2, [r3, #20]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f003 f9bc 	bl	8005f88 <USB_ReadInterrupts>
 8002c10:	4603      	mov	r3, r0
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	2b04      	cmp	r3, #4
 8002c18:	d115      	bne.n	8002c46 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d002      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c2c:	6878      	ldr	r0, [r7, #4]
 8002c2e:	f005 fe1d 	bl	800886c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6859      	ldr	r1, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	69ba      	ldr	r2, [r7, #24]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	e000      	b.n	8002c46 <HAL_PCD_IRQHandler+0x938>
      return;
 8002c44:	bf00      	nop
    }
  }
}
 8002c46:	3734      	adds	r7, #52	; 0x34
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd90      	pop	{r4, r7, pc}

08002c4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_PCD_SetAddress+0x1a>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e013      	b.n	8002c8e <HAL_PCD_SetAddress+0x42>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f003 f91a 	bl	8005eb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	4608      	mov	r0, r1
 8002ca0:	4611      	mov	r1, r2
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	70fb      	strb	r3, [r7, #3]
 8002ca8:	460b      	mov	r3, r1
 8002caa:	803b      	strh	r3, [r7, #0]
 8002cac:	4613      	mov	r3, r2
 8002cae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da0f      	bge.n	8002cdc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	f003 020f 	and.w	r2, r3, #15
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	3338      	adds	r3, #56	; 0x38
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	4413      	add	r3, r2
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	705a      	strb	r2, [r3, #1]
 8002cda:	e00f      	b.n	8002cfc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	f003 020f 	and.w	r2, r3, #15
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	00db      	lsls	r3, r3, #3
 8002ce6:	4413      	add	r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	3304      	adds	r3, #4
 8002cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cfc:	78fb      	ldrb	r3, [r7, #3]
 8002cfe:	f003 030f 	and.w	r3, r3, #15
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d08:	883a      	ldrh	r2, [r7, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	78ba      	ldrb	r2, [r7, #2]
 8002d12:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d004      	beq.n	8002d26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b29a      	uxth	r2, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d26:	78bb      	ldrb	r3, [r7, #2]
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d102      	bne.n	8002d32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d101      	bne.n	8002d40 <HAL_PCD_EP_Open+0xaa>
 8002d3c:	2302      	movs	r3, #2
 8002d3e:	e00e      	b.n	8002d5e <HAL_PCD_EP_Open+0xc8>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68f9      	ldr	r1, [r7, #12]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 f99a 	bl	8005088 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b084      	sub	sp, #16
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
 8002d6e:	460b      	mov	r3, r1
 8002d70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	da0f      	bge.n	8002d9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d7a:	78fb      	ldrb	r3, [r7, #3]
 8002d7c:	f003 020f 	and.w	r2, r3, #15
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	3338      	adds	r3, #56	; 0x38
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	3304      	adds	r3, #4
 8002d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2201      	movs	r2, #1
 8002d96:	705a      	strb	r2, [r3, #1]
 8002d98:	e00f      	b.n	8002dba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	f003 020f 	and.w	r2, r3, #15
 8002da0:	4613      	mov	r3, r2
 8002da2:	00db      	lsls	r3, r3, #3
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	4413      	add	r3, r2
 8002db0:	3304      	adds	r3, #4
 8002db2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2200      	movs	r2, #0
 8002db8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	f003 030f 	and.w	r3, r3, #15
 8002dc0:	b2da      	uxtb	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_PCD_EP_Close+0x6e>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e00e      	b.n	8002df2 <HAL_PCD_EP_Close+0x8c>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68f9      	ldr	r1, [r7, #12]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f002 f9d8 	bl	8005198 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b086      	sub	sp, #24
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	60f8      	str	r0, [r7, #12]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
 8002e06:	460b      	mov	r3, r1
 8002e08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	7afb      	ldrb	r3, [r7, #11]
 8002e0c:	f003 020f 	and.w	r2, r3, #15
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	3304      	adds	r3, #4
 8002e22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	2200      	movs	r2, #0
 8002e34:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e3c:	7afb      	ldrb	r3, [r7, #11]
 8002e3e:	f003 030f 	and.w	r3, r3, #15
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d102      	bne.n	8002e56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	6979      	ldr	r1, [r7, #20]
 8002e6e:	f002 fcb7 	bl	80057e0 <USB_EP0StartXfer>
 8002e72:	e008      	b.n	8002e86 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6818      	ldr	r0, [r3, #0]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	461a      	mov	r2, r3
 8002e80:	6979      	ldr	r1, [r7, #20]
 8002e82:	f002 fa65 	bl	8005350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3718      	adds	r7, #24
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002e9c:	78fb      	ldrb	r3, [r7, #3]
 8002e9e:	f003 020f 	and.w	r2, r3, #15
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002eb2:	681b      	ldr	r3, [r3, #0]
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr

08002ec0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b086      	sub	sp, #24
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607a      	str	r2, [r7, #4]
 8002eca:	603b      	str	r3, [r7, #0]
 8002ecc:	460b      	mov	r3, r1
 8002ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed0:	7afb      	ldrb	r3, [r7, #11]
 8002ed2:	f003 020f 	and.w	r2, r3, #15
 8002ed6:	4613      	mov	r3, r2
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	3338      	adds	r3, #56	; 0x38
 8002ee0:	68fa      	ldr	r2, [r7, #12]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	687a      	ldr	r2, [r7, #4]
 8002eec:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	683a      	ldr	r2, [r7, #0]
 8002ef2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	2201      	movs	r2, #1
 8002efe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f00:	7afb      	ldrb	r3, [r7, #11]
 8002f02:	f003 030f 	and.w	r3, r3, #15
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d102      	bne.n	8002f1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f1a:	7afb      	ldrb	r3, [r7, #11]
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d109      	bne.n	8002f38 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6818      	ldr	r0, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	461a      	mov	r2, r3
 8002f30:	6979      	ldr	r1, [r7, #20]
 8002f32:	f002 fc55 	bl	80057e0 <USB_EP0StartXfer>
 8002f36:	e008      	b.n	8002f4a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	6979      	ldr	r1, [r7, #20]
 8002f46:	f002 fa03 	bl	8005350 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	f003 020f 	and.w	r2, r3, #15
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d901      	bls.n	8002f72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e050      	b.n	8003014 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	da0f      	bge.n	8002f9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	4613      	mov	r3, r2
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4413      	add	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	3338      	adds	r3, #56	; 0x38
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3304      	adds	r3, #4
 8002f90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	705a      	strb	r2, [r3, #1]
 8002f98:	e00d      	b.n	8002fb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	4413      	add	r3, r2
 8002fac:	3304      	adds	r3, #4
 8002fae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fbc:	78fb      	ldrb	r3, [r7, #3]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_PCD_EP_SetStall+0x82>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e01e      	b.n	8003014 <HAL_PCD_EP_SetStall+0xc0>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68f9      	ldr	r1, [r7, #12]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f002 fe93 	bl	8005d10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6818      	ldr	r0, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	b2d9      	uxtb	r1, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003004:	461a      	mov	r2, r3
 8003006:	f003 f883 	bl	8006110 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003012:	2300      	movs	r3, #0
}
 8003014:	4618      	mov	r0, r3
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003028:	78fb      	ldrb	r3, [r7, #3]
 800302a:	f003 020f 	and.w	r2, r3, #15
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	429a      	cmp	r2, r3
 8003034:	d901      	bls.n	800303a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e042      	b.n	80030c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800303a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800303e:	2b00      	cmp	r3, #0
 8003040:	da0f      	bge.n	8003062 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	f003 020f 	and.w	r2, r3, #15
 8003048:	4613      	mov	r3, r2
 800304a:	00db      	lsls	r3, r3, #3
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	3338      	adds	r3, #56	; 0x38
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4413      	add	r3, r2
 8003056:	3304      	adds	r3, #4
 8003058:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2201      	movs	r2, #1
 800305e:	705a      	strb	r2, [r3, #1]
 8003060:	e00f      	b.n	8003082 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	4413      	add	r3, r2
 8003078:	3304      	adds	r3, #4
 800307a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	b2da      	uxtb	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800309a:	2b01      	cmp	r3, #1
 800309c:	d101      	bne.n	80030a2 <HAL_PCD_EP_ClrStall+0x86>
 800309e:	2302      	movs	r3, #2
 80030a0:	e00e      	b.n	80030c0 <HAL_PCD_EP_ClrStall+0xa4>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2201      	movs	r2, #1
 80030a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68f9      	ldr	r1, [r7, #12]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fe9b 	bl	8005dec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3710      	adds	r7, #16
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80030d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	da0c      	bge.n	80030f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030dc:	78fb      	ldrb	r3, [r7, #3]
 80030de:	f003 020f 	and.w	r2, r3, #15
 80030e2:	4613      	mov	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	3338      	adds	r3, #56	; 0x38
 80030ec:	687a      	ldr	r2, [r7, #4]
 80030ee:	4413      	add	r3, r2
 80030f0:	3304      	adds	r3, #4
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	e00c      	b.n	8003110 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030f6:	78fb      	ldrb	r3, [r7, #3]
 80030f8:	f003 020f 	and.w	r2, r3, #15
 80030fc:	4613      	mov	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	4413      	add	r3, r2
 800310c:	3304      	adds	r3, #4
 800310e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	4618      	mov	r0, r3
 8003118:	f002 fcba 	bl	8005a90 <USB_EPStopXfer>
 800311c:	4603      	mov	r3, r0
 800311e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003120:	7afb      	ldrb	r3, [r7, #11]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b08a      	sub	sp, #40	; 0x28
 800312e:	af02      	add	r7, sp, #8
 8003130:	6078      	str	r0, [r7, #4]
 8003132:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800313e:	683a      	ldr	r2, [r7, #0]
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	3338      	adds	r3, #56	; 0x38
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	4413      	add	r3, r2
 800314e:	3304      	adds	r3, #4
 8003150:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6a1a      	ldr	r2, [r3, #32]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	429a      	cmp	r2, r3
 800315c:	d901      	bls.n	8003162 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e06c      	b.n	800323c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	d902      	bls.n	800317e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	3303      	adds	r3, #3
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003186:	e02b      	b.n	80031e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699a      	ldr	r2, [r3, #24]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	429a      	cmp	r2, r3
 800319c:	d902      	bls.n	80031a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3303      	adds	r3, #3
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6919      	ldr	r1, [r3, #16]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	b2da      	uxtb	r2, r3
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	4603      	mov	r3, r0
 80031c2:	6978      	ldr	r0, [r7, #20]
 80031c4:	f002 fd0e 	bl	8005be4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	441a      	add	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a1a      	ldr	r2, [r3, #32]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	441a      	add	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	015a      	lsls	r2, r3, #5
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	4413      	add	r3, r2
 80031e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ec:	699b      	ldr	r3, [r3, #24]
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d809      	bhi.n	800320a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031fe:	429a      	cmp	r2, r3
 8003200:	d203      	bcs.n	800320a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1be      	bne.n	8003188 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	699a      	ldr	r2, [r3, #24]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	429a      	cmp	r2, r3
 8003214:	d811      	bhi.n	800323a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	f003 030f 	and.w	r3, r3, #15
 800321c:	2201      	movs	r2, #1
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	43db      	mvns	r3, r3
 8003230:	6939      	ldr	r1, [r7, #16]
 8003232:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003236:	4013      	ands	r3, r2
 8003238:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3720      	adds	r7, #32
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b088      	sub	sp, #32
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	333c      	adds	r3, #60	; 0x3c
 800325c:	3304      	adds	r3, #4
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	4413      	add	r3, r2
 800326a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d17b      	bne.n	8003372 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d015      	beq.n	80032b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	4a61      	ldr	r2, [pc, #388]	; (800340c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	f240 80b9 	bls.w	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80b3 	beq.w	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a6:	461a      	mov	r2, r3
 80032a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ac:	6093      	str	r3, [r2, #8]
 80032ae:	e0a7      	b.n	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	f003 0320 	and.w	r3, r3, #32
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032c6:	461a      	mov	r2, r3
 80032c8:	2320      	movs	r3, #32
 80032ca:	6093      	str	r3, [r2, #8]
 80032cc:	e098      	b.n	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f040 8093 	bne.w	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	4a4b      	ldr	r2, [pc, #300]	; (800340c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d90f      	bls.n	8003302 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00a      	beq.n	8003302 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	015a      	lsls	r2, r3, #5
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	4413      	add	r3, r2
 80032f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f8:	461a      	mov	r2, r3
 80032fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032fe:	6093      	str	r3, [r2, #8]
 8003300:	e07e      	b.n	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003302:	683a      	ldr	r2, [r7, #0]
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	4413      	add	r3, r2
 8003314:	3304      	adds	r3, #4
 8003316:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	69da      	ldr	r2, [r3, #28]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	0159      	lsls	r1, r3, #5
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	440b      	add	r3, r1
 8003324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800332e:	1ad2      	subs	r2, r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d114      	bne.n	8003364 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d109      	bne.n	8003356 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6818      	ldr	r0, [r3, #0]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800334c:	461a      	mov	r2, r3
 800334e:	2101      	movs	r1, #1
 8003350:	f002 fede 	bl	8006110 <USB_EP0_OutStart>
 8003354:	e006      	b.n	8003364 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6a1b      	ldr	r3, [r3, #32]
 800335e:	441a      	add	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	4619      	mov	r1, r3
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f005 f9ac 	bl	80086c8 <HAL_PCD_DataOutStageCallback>
 8003370:	e046      	b.n	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	4a26      	ldr	r2, [pc, #152]	; (8003410 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d124      	bne.n	80033c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d00a      	beq.n	800339a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	015a      	lsls	r2, r3, #5
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	4413      	add	r3, r2
 800338c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003390:	461a      	mov	r2, r3
 8003392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003396:	6093      	str	r3, [r2, #8]
 8003398:	e032      	b.n	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	015a      	lsls	r2, r3, #5
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	4413      	add	r3, r2
 80033ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b0:	461a      	mov	r2, r3
 80033b2:	2320      	movs	r3, #32
 80033b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	4619      	mov	r1, r3
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f005 f983 	bl	80086c8 <HAL_PCD_DataOutStageCallback>
 80033c2:	e01d      	b.n	8003400 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d114      	bne.n	80033f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d108      	bne.n	80033f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80033ec:	461a      	mov	r2, r3
 80033ee:	2100      	movs	r1, #0
 80033f0:	f002 fe8e 	bl	8006110 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	4619      	mov	r1, r3
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f005 f964 	bl	80086c8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	4f54300a 	.word	0x4f54300a
 8003410:	4f54310a 	.word	0x4f54310a

08003414 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b086      	sub	sp, #24
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	333c      	adds	r3, #60	; 0x3c
 800342c:	3304      	adds	r3, #4
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a15      	ldr	r2, [pc, #84]	; (800349c <PCD_EP_OutSetupPacket_int+0x88>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d90e      	bls.n	8003468 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	461a      	mov	r2, r3
 8003462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003466:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f005 f91b 	bl	80086a4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	4a0a      	ldr	r2, [pc, #40]	; (800349c <PCD_EP_OutSetupPacket_int+0x88>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d90c      	bls.n	8003490 <PCD_EP_OutSetupPacket_int+0x7c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b01      	cmp	r3, #1
 800347c:	d108      	bne.n	8003490 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003488:	461a      	mov	r2, r3
 800348a:	2101      	movs	r1, #1
 800348c:	f002 fe40 	bl	8006110 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3718      	adds	r7, #24
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	4f54300a 	.word	0x4f54300a

080034a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
 80034ac:	4613      	mov	r3, r2
 80034ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d107      	bne.n	80034ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034be:	883b      	ldrh	r3, [r7, #0]
 80034c0:	0419      	lsls	r1, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	430a      	orrs	r2, r1
 80034ca:	629a      	str	r2, [r3, #40]	; 0x28
 80034cc:	e028      	b.n	8003520 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	0c1b      	lsrs	r3, r3, #16
 80034d6:	68ba      	ldr	r2, [r7, #8]
 80034d8:	4413      	add	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034dc:	2300      	movs	r3, #0
 80034de:	73fb      	strb	r3, [r7, #15]
 80034e0:	e00d      	b.n	80034fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	7bfb      	ldrb	r3, [r7, #15]
 80034e8:	3340      	adds	r3, #64	; 0x40
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4413      	add	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80034f8:	7bfb      	ldrb	r3, [r7, #15]
 80034fa:	3301      	adds	r3, #1
 80034fc:	73fb      	strb	r3, [r7, #15]
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	3b01      	subs	r3, #1
 8003504:	429a      	cmp	r2, r3
 8003506:	d3ec      	bcc.n	80034e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003508:	883b      	ldrh	r3, [r7, #0]
 800350a:	0418      	lsls	r0, r3, #16
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	3b01      	subs	r3, #1
 8003514:	68ba      	ldr	r2, [r7, #8]
 8003516:	4302      	orrs	r2, r0
 8003518:	3340      	adds	r3, #64	; 0x40
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3714      	adds	r7, #20
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr

0800352e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
 8003536:	460b      	mov	r3, r1
 8003538:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	887a      	ldrh	r2, [r7, #2]
 8003540:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	4618      	mov	r0, r3
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	460b      	mov	r3, r1
 800355a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e267      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d075      	beq.n	8003672 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003586:	4b88      	ldr	r3, [pc, #544]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 030c 	and.w	r3, r3, #12
 800358e:	2b04      	cmp	r3, #4
 8003590:	d00c      	beq.n	80035ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003592:	4b85      	ldr	r3, [pc, #532]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800359a:	2b08      	cmp	r3, #8
 800359c:	d112      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800359e:	4b82      	ldr	r3, [pc, #520]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035aa:	d10b      	bne.n	80035c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	4b7e      	ldr	r3, [pc, #504]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d05b      	beq.n	8003670 <HAL_RCC_OscConfig+0x108>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d157      	bne.n	8003670 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e242      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035cc:	d106      	bne.n	80035dc <HAL_RCC_OscConfig+0x74>
 80035ce:	4b76      	ldr	r3, [pc, #472]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a75      	ldr	r2, [pc, #468]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80035d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035d8:	6013      	str	r3, [r2, #0]
 80035da:	e01d      	b.n	8003618 <HAL_RCC_OscConfig+0xb0>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80035e4:	d10c      	bne.n	8003600 <HAL_RCC_OscConfig+0x98>
 80035e6:	4b70      	ldr	r3, [pc, #448]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6f      	ldr	r2, [pc, #444]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80035ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035f0:	6013      	str	r3, [r2, #0]
 80035f2:	4b6d      	ldr	r3, [pc, #436]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a6c      	ldr	r2, [pc, #432]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80035f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035fc:	6013      	str	r3, [r2, #0]
 80035fe:	e00b      	b.n	8003618 <HAL_RCC_OscConfig+0xb0>
 8003600:	4b69      	ldr	r3, [pc, #420]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a68      	ldr	r2, [pc, #416]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003606:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800360a:	6013      	str	r3, [r2, #0]
 800360c:	4b66      	ldr	r3, [pc, #408]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a65      	ldr	r2, [pc, #404]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003616:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d013      	beq.n	8003648 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003620:	f7fe fa2e 	bl	8001a80 <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003628:	f7fe fa2a 	bl	8001a80 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b64      	cmp	r3, #100	; 0x64
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e207      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363a:	4b5b      	ldr	r3, [pc, #364]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0xc0>
 8003646:	e014      	b.n	8003672 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003648:	f7fe fa1a 	bl	8001a80 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003650:	f7fe fa16 	bl	8001a80 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b64      	cmp	r3, #100	; 0x64
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e1f3      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003662:	4b51      	ldr	r3, [pc, #324]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1f0      	bne.n	8003650 <HAL_RCC_OscConfig+0xe8>
 800366e:	e000      	b.n	8003672 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d063      	beq.n	8003746 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800367e:	4b4a      	ldr	r3, [pc, #296]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f003 030c 	and.w	r3, r3, #12
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00b      	beq.n	80036a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003692:	2b08      	cmp	r3, #8
 8003694:	d11c      	bne.n	80036d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d116      	bne.n	80036d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a2:	4b41      	ldr	r3, [pc, #260]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0302 	and.w	r3, r3, #2
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d005      	beq.n	80036ba <HAL_RCC_OscConfig+0x152>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d001      	beq.n	80036ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e1c7      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036ba:	4b3b      	ldr	r3, [pc, #236]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	691b      	ldr	r3, [r3, #16]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	4937      	ldr	r1, [pc, #220]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80036ca:	4313      	orrs	r3, r2
 80036cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036ce:	e03a      	b.n	8003746 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d020      	beq.n	800371a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <HAL_RCC_OscConfig+0x244>)
 80036da:	2201      	movs	r2, #1
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036de:	f7fe f9cf 	bl	8001a80 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036e6:	f7fe f9cb 	bl	8001a80 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e1a8      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f8:	4b2b      	ldr	r3, [pc, #172]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003704:	4b28      	ldr	r3, [pc, #160]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4925      	ldr	r1, [pc, #148]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 8003714:	4313      	orrs	r3, r2
 8003716:	600b      	str	r3, [r1, #0]
 8003718:	e015      	b.n	8003746 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371a:	4b24      	ldr	r3, [pc, #144]	; (80037ac <HAL_RCC_OscConfig+0x244>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003720:	f7fe f9ae 	bl	8001a80 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003726:	e008      	b.n	800373a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003728:	f7fe f9aa 	bl	8001a80 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d901      	bls.n	800373a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e187      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373a:	4b1b      	ldr	r3, [pc, #108]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1f0      	bne.n	8003728 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b00      	cmp	r3, #0
 8003750:	d036      	beq.n	80037c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d016      	beq.n	8003788 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375a:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <HAL_RCC_OscConfig+0x248>)
 800375c:	2201      	movs	r2, #1
 800375e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003760:	f7fe f98e 	bl	8001a80 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003768:	f7fe f98a 	bl	8001a80 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e167      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377a:	4b0b      	ldr	r3, [pc, #44]	; (80037a8 <HAL_RCC_OscConfig+0x240>)
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0f0      	beq.n	8003768 <HAL_RCC_OscConfig+0x200>
 8003786:	e01b      	b.n	80037c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003788:	4b09      	ldr	r3, [pc, #36]	; (80037b0 <HAL_RCC_OscConfig+0x248>)
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800378e:	f7fe f977 	bl	8001a80 <HAL_GetTick>
 8003792:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003794:	e00e      	b.n	80037b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003796:	f7fe f973 	bl	8001a80 <HAL_GetTick>
 800379a:	4602      	mov	r2, r0
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	1ad3      	subs	r3, r2, r3
 80037a0:	2b02      	cmp	r3, #2
 80037a2:	d907      	bls.n	80037b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037a4:	2303      	movs	r3, #3
 80037a6:	e150      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
 80037a8:	40023800 	.word	0x40023800
 80037ac:	42470000 	.word	0x42470000
 80037b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b4:	4b88      	ldr	r3, [pc, #544]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80037b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b8:	f003 0302 	and.w	r3, r3, #2
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d1ea      	bne.n	8003796 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8097 	beq.w	80038fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037ce:	2300      	movs	r3, #0
 80037d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d2:	4b81      	ldr	r3, [pc, #516]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80037d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d10f      	bne.n	80037fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037de:	2300      	movs	r3, #0
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	4b7d      	ldr	r3, [pc, #500]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	4a7c      	ldr	r2, [pc, #496]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80037e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ec:	6413      	str	r3, [r2, #64]	; 0x40
 80037ee:	4b7a      	ldr	r3, [pc, #488]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f6:	60bb      	str	r3, [r7, #8]
 80037f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fa:	2301      	movs	r3, #1
 80037fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037fe:	4b77      	ldr	r3, [pc, #476]	; (80039dc <HAL_RCC_OscConfig+0x474>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003806:	2b00      	cmp	r3, #0
 8003808:	d118      	bne.n	800383c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380a:	4b74      	ldr	r3, [pc, #464]	; (80039dc <HAL_RCC_OscConfig+0x474>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a73      	ldr	r2, [pc, #460]	; (80039dc <HAL_RCC_OscConfig+0x474>)
 8003810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003814:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003816:	f7fe f933 	bl	8001a80 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381c:	e008      	b.n	8003830 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800381e:	f7fe f92f 	bl	8001a80 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	d901      	bls.n	8003830 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	e10c      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003830:	4b6a      	ldr	r3, [pc, #424]	; (80039dc <HAL_RCC_OscConfig+0x474>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d0f0      	beq.n	800381e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <HAL_RCC_OscConfig+0x2ea>
 8003844:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	4a63      	ldr	r2, [pc, #396]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 800384a:	f043 0301 	orr.w	r3, r3, #1
 800384e:	6713      	str	r3, [r2, #112]	; 0x70
 8003850:	e01c      	b.n	800388c <HAL_RCC_OscConfig+0x324>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	2b05      	cmp	r3, #5
 8003858:	d10c      	bne.n	8003874 <HAL_RCC_OscConfig+0x30c>
 800385a:	4b5f      	ldr	r3, [pc, #380]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 800385c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385e:	4a5e      	ldr	r2, [pc, #376]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 8003860:	f043 0304 	orr.w	r3, r3, #4
 8003864:	6713      	str	r3, [r2, #112]	; 0x70
 8003866:	4b5c      	ldr	r3, [pc, #368]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	4a5b      	ldr	r2, [pc, #364]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 800386c:	f043 0301 	orr.w	r3, r3, #1
 8003870:	6713      	str	r3, [r2, #112]	; 0x70
 8003872:	e00b      	b.n	800388c <HAL_RCC_OscConfig+0x324>
 8003874:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 8003876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003878:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 800387a:	f023 0301 	bic.w	r3, r3, #1
 800387e:	6713      	str	r3, [r2, #112]	; 0x70
 8003880:	4b55      	ldr	r3, [pc, #340]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 8003882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003884:	4a54      	ldr	r2, [pc, #336]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 8003886:	f023 0304 	bic.w	r3, r3, #4
 800388a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d015      	beq.n	80038c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003894:	f7fe f8f4 	bl	8001a80 <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389a:	e00a      	b.n	80038b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800389c:	f7fe f8f0 	bl	8001a80 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0cb      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b2:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0ee      	beq.n	800389c <HAL_RCC_OscConfig+0x334>
 80038be:	e014      	b.n	80038ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038c0:	f7fe f8de 	bl	8001a80 <HAL_GetTick>
 80038c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038c6:	e00a      	b.n	80038de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038c8:	f7fe f8da 	bl	8001a80 <HAL_GetTick>
 80038cc:	4602      	mov	r2, r0
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e0b5      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038de:	4b3e      	ldr	r3, [pc, #248]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ee      	bne.n	80038c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80038ea:	7dfb      	ldrb	r3, [r7, #23]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d105      	bne.n	80038fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f0:	4b39      	ldr	r3, [pc, #228]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	4a38      	ldr	r2, [pc, #224]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80038f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	2b00      	cmp	r3, #0
 8003902:	f000 80a1 	beq.w	8003a48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003906:	4b34      	ldr	r3, [pc, #208]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b08      	cmp	r3, #8
 8003910:	d05c      	beq.n	80039cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	2b02      	cmp	r3, #2
 8003918:	d141      	bne.n	800399e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391a:	4b31      	ldr	r3, [pc, #196]	; (80039e0 <HAL_RCC_OscConfig+0x478>)
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003920:	f7fe f8ae 	bl	8001a80 <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe f8aa 	bl	8001a80 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e087      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b27      	ldr	r3, [pc, #156]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003954:	019b      	lsls	r3, r3, #6
 8003956:	431a      	orrs	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	085b      	lsrs	r3, r3, #1
 800395e:	3b01      	subs	r3, #1
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003968:	061b      	lsls	r3, r3, #24
 800396a:	491b      	ldr	r1, [pc, #108]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 800396c:	4313      	orrs	r3, r2
 800396e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003970:	4b1b      	ldr	r3, [pc, #108]	; (80039e0 <HAL_RCC_OscConfig+0x478>)
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003976:	f7fe f883 	bl	8001a80 <HAL_GetTick>
 800397a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397c:	e008      	b.n	8003990 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397e:	f7fe f87f 	bl	8001a80 <HAL_GetTick>
 8003982:	4602      	mov	r2, r0
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	2b02      	cmp	r3, #2
 800398a:	d901      	bls.n	8003990 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e05c      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003990:	4b11      	ldr	r3, [pc, #68]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d0f0      	beq.n	800397e <HAL_RCC_OscConfig+0x416>
 800399c:	e054      	b.n	8003a48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399e:	4b10      	ldr	r3, [pc, #64]	; (80039e0 <HAL_RCC_OscConfig+0x478>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe f86c 	bl	8001a80 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039ac:	f7fe f868 	bl	8001a80 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e045      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039be:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <HAL_RCC_OscConfig+0x470>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0x444>
 80039ca:	e03d      	b.n	8003a48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d107      	bne.n	80039e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e038      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40007000 	.word	0x40007000
 80039e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039e4:	4b1b      	ldr	r3, [pc, #108]	; (8003a54 <HAL_RCC_OscConfig+0x4ec>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	699b      	ldr	r3, [r3, #24]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d028      	beq.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d121      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d11a      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a14:	4013      	ands	r3, r2
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d111      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a2a:	085b      	lsrs	r3, r3, #1
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d001      	beq.n	8003a48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40023800 	.word	0x40023800

08003a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0cc      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b68      	ldr	r3, [pc, #416]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d90c      	bls.n	8003a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b65      	ldr	r3, [pc, #404]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e0b8      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d020      	beq.n	8003ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0304 	and.w	r3, r3, #4
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d005      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	4a58      	ldr	r2, [pc, #352]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0308 	and.w	r3, r3, #8
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d005      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ac4:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a52      	ldr	r2, [pc, #328]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ad0:	4b50      	ldr	r3, [pc, #320]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	494d      	ldr	r1, [pc, #308]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d044      	beq.n	8003b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d119      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d003      	beq.n	8003b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b12:	2b03      	cmp	r3, #3
 8003b14:	d107      	bne.n	8003b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b16:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d109      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e06f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e067      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b36:	4b37      	ldr	r3, [pc, #220]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b38:	689b      	ldr	r3, [r3, #8]
 8003b3a:	f023 0203 	bic.w	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4934      	ldr	r1, [pc, #208]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b48:	f7fd ff9a 	bl	8001a80 <HAL_GetTick>
 8003b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b4e:	e00a      	b.n	8003b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b50:	f7fd ff96 	bl	8001a80 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d901      	bls.n	8003b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e04f      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b66:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 020c 	and.w	r2, r3, #12
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d1eb      	bne.n	8003b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b78:	4b25      	ldr	r3, [pc, #148]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0307 	and.w	r3, r3, #7
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d20c      	bcs.n	8003ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b86:	4b22      	ldr	r3, [pc, #136]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_ClockConfig+0x1b8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0307 	and.w	r3, r3, #7
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d001      	beq.n	8003ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e032      	b.n	8003c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d008      	beq.n	8003bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bac:	4b19      	ldr	r3, [pc, #100]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	4916      	ldr	r1, [pc, #88]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d009      	beq.n	8003bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bca:	4b12      	ldr	r3, [pc, #72]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	490e      	ldr	r1, [pc, #56]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003bde:	f000 f821 	bl	8003c24 <HAL_RCC_GetSysClockFreq>
 8003be2:	4602      	mov	r2, r0
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	091b      	lsrs	r3, r3, #4
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	490a      	ldr	r1, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	5ccb      	ldrb	r3, [r1, r3]
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	4a09      	ldr	r2, [pc, #36]	; (8003c1c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003bfa:	4b09      	ldr	r3, [pc, #36]	; (8003c20 <HAL_RCC_ClockConfig+0x1c8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd fefa 	bl	80019f8 <HAL_InitTick>

  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3710      	adds	r7, #16
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023c00 	.word	0x40023c00
 8003c14:	40023800 	.word	0x40023800
 8003c18:	0800b480 	.word	0x0800b480
 8003c1c:	20000018 	.word	0x20000018
 8003c20:	2000001c 	.word	0x2000001c

08003c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c28:	b094      	sub	sp, #80	; 0x50
 8003c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8003c30:	2300      	movs	r3, #0
 8003c32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c34:	2300      	movs	r3, #0
 8003c36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c3c:	4b79      	ldr	r3, [pc, #484]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d00d      	beq.n	8003c64 <HAL_RCC_GetSysClockFreq+0x40>
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	f200 80e1 	bhi.w	8003e10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d002      	beq.n	8003c58 <HAL_RCC_GetSysClockFreq+0x34>
 8003c52:	2b04      	cmp	r3, #4
 8003c54:	d003      	beq.n	8003c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8003c56:	e0db      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c58:	4b73      	ldr	r3, [pc, #460]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c5a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003c5c:	e0db      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c5e:	4b73      	ldr	r3, [pc, #460]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x208>)
 8003c60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c62:	e0d8      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c64:	4b6f      	ldr	r3, [pc, #444]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c6c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c6e:	4b6d      	ldr	r3, [pc, #436]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d063      	beq.n	8003d42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c7a:	4b6a      	ldr	r3, [pc, #424]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	099b      	lsrs	r3, r3, #6
 8003c80:	2200      	movs	r2, #0
 8003c82:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c8c:	633b      	str	r3, [r7, #48]	; 0x30
 8003c8e:	2300      	movs	r3, #0
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
 8003c92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c96:	4622      	mov	r2, r4
 8003c98:	462b      	mov	r3, r5
 8003c9a:	f04f 0000 	mov.w	r0, #0
 8003c9e:	f04f 0100 	mov.w	r1, #0
 8003ca2:	0159      	lsls	r1, r3, #5
 8003ca4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca8:	0150      	lsls	r0, r2, #5
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4621      	mov	r1, r4
 8003cb0:	1a51      	subs	r1, r2, r1
 8003cb2:	6139      	str	r1, [r7, #16]
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	eb63 0301 	sbc.w	r3, r3, r1
 8003cba:	617b      	str	r3, [r7, #20]
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	f04f 0300 	mov.w	r3, #0
 8003cc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003cc8:	4659      	mov	r1, fp
 8003cca:	018b      	lsls	r3, r1, #6
 8003ccc:	4651      	mov	r1, sl
 8003cce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cd2:	4651      	mov	r1, sl
 8003cd4:	018a      	lsls	r2, r1, #6
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	ebb2 0801 	subs.w	r8, r2, r1
 8003cdc:	4659      	mov	r1, fp
 8003cde:	eb63 0901 	sbc.w	r9, r3, r1
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cf6:	4690      	mov	r8, r2
 8003cf8:	4699      	mov	r9, r3
 8003cfa:	4623      	mov	r3, r4
 8003cfc:	eb18 0303 	adds.w	r3, r8, r3
 8003d00:	60bb      	str	r3, [r7, #8]
 8003d02:	462b      	mov	r3, r5
 8003d04:	eb49 0303 	adc.w	r3, r9, r3
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	f04f 0200 	mov.w	r2, #0
 8003d0e:	f04f 0300 	mov.w	r3, #0
 8003d12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d16:	4629      	mov	r1, r5
 8003d18:	024b      	lsls	r3, r1, #9
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d20:	4621      	mov	r1, r4
 8003d22:	024a      	lsls	r2, r1, #9
 8003d24:	4610      	mov	r0, r2
 8003d26:	4619      	mov	r1, r3
 8003d28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d34:	f7fc ff22 	bl	8000b7c <__aeabi_uldivmod>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d40:	e058      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d42:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	099b      	lsrs	r3, r3, #6
 8003d48:	2200      	movs	r2, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	4611      	mov	r1, r2
 8003d4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d52:	623b      	str	r3, [r7, #32]
 8003d54:	2300      	movs	r3, #0
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
 8003d58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	464b      	mov	r3, r9
 8003d60:	f04f 0000 	mov.w	r0, #0
 8003d64:	f04f 0100 	mov.w	r1, #0
 8003d68:	0159      	lsls	r1, r3, #5
 8003d6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d6e:	0150      	lsls	r0, r2, #5
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4641      	mov	r1, r8
 8003d76:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d7a:	4649      	mov	r1, r9
 8003d7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d80:	f04f 0200 	mov.w	r2, #0
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d94:	ebb2 040a 	subs.w	r4, r2, sl
 8003d98:	eb63 050b 	sbc.w	r5, r3, fp
 8003d9c:	f04f 0200 	mov.w	r2, #0
 8003da0:	f04f 0300 	mov.w	r3, #0
 8003da4:	00eb      	lsls	r3, r5, #3
 8003da6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003daa:	00e2      	lsls	r2, r4, #3
 8003dac:	4614      	mov	r4, r2
 8003dae:	461d      	mov	r5, r3
 8003db0:	4643      	mov	r3, r8
 8003db2:	18e3      	adds	r3, r4, r3
 8003db4:	603b      	str	r3, [r7, #0]
 8003db6:	464b      	mov	r3, r9
 8003db8:	eb45 0303 	adc.w	r3, r5, r3
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	f04f 0200 	mov.w	r2, #0
 8003dc2:	f04f 0300 	mov.w	r3, #0
 8003dc6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003dca:	4629      	mov	r1, r5
 8003dcc:	028b      	lsls	r3, r1, #10
 8003dce:	4621      	mov	r1, r4
 8003dd0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dd4:	4621      	mov	r1, r4
 8003dd6:	028a      	lsls	r2, r1, #10
 8003dd8:	4610      	mov	r0, r2
 8003dda:	4619      	mov	r1, r3
 8003ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dde:	2200      	movs	r2, #0
 8003de0:	61bb      	str	r3, [r7, #24]
 8003de2:	61fa      	str	r2, [r7, #28]
 8003de4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003de8:	f7fc fec8 	bl	8000b7c <__aeabi_uldivmod>
 8003dec:	4602      	mov	r2, r0
 8003dee:	460b      	mov	r3, r1
 8003df0:	4613      	mov	r3, r2
 8003df2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003df4:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x200>)
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	0c1b      	lsrs	r3, r3, #16
 8003dfa:	f003 0303 	and.w	r3, r3, #3
 8003dfe:	3301      	adds	r3, #1
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3750      	adds	r7, #80	; 0x50
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e22:	bf00      	nop
 8003e24:	40023800 	.word	0x40023800
 8003e28:	00f42400 	.word	0x00f42400
 8003e2c:	007a1200 	.word	0x007a1200

08003e30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e30:	b480      	push	{r7}
 8003e32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e34:	4b03      	ldr	r3, [pc, #12]	; (8003e44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e36:	681b      	ldr	r3, [r3, #0]
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20000018 	.word	0x20000018

08003e48 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d101      	bne.n	8003e5a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e07b      	b.n	8003f52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d108      	bne.n	8003e74 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6a:	d009      	beq.n	8003e80 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	61da      	str	r2, [r3, #28]
 8003e72:	e005      	b.n	8003e80 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fc0c 	bl	80016b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eb6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ed2:	431a      	orrs	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	431a      	orrs	r2, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003efa:	431a      	orrs	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	ea42 0103 	orr.w	r1, r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	0c1b      	lsrs	r3, r3, #16
 8003f1e:	f003 0104 	and.w	r1, r3, #4
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f26:	f003 0210 	and.w	r2, r3, #16
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b088      	sub	sp, #32
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	603b      	str	r3, [r7, #0]
 8003f66:	4613      	mov	r3, r2
 8003f68:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_SPI_Transmit+0x22>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e126      	b.n	80041ca <HAL_SPI_Transmit+0x270>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f84:	f7fd fd7c 	bl	8001a80 <HAL_GetTick>
 8003f88:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d002      	beq.n	8003fa0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003f9a:	2302      	movs	r3, #2
 8003f9c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f9e:	e10b      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Transmit+0x52>
 8003fa6:	88fb      	ldrh	r3, [r7, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003fb0:	e102      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68ba      	ldr	r2, [r7, #8]
 8003fc4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	88fa      	ldrh	r2, [r7, #6]
 8003fca:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff8:	d10f      	bne.n	800401a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004008:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004024:	2b40      	cmp	r3, #64	; 0x40
 8004026:	d007      	beq.n	8004038 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004040:	d14b      	bne.n	80040da <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Transmit+0xf6>
 800404a:	8afb      	ldrh	r3, [r7, #22]
 800404c:	2b01      	cmp	r3, #1
 800404e:	d13e      	bne.n	80040ce <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	881a      	ldrh	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004060:	1c9a      	adds	r2, r3, #2
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004074:	e02b      	b.n	80040ce <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d112      	bne.n	80040aa <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	881a      	ldrh	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004094:	1c9a      	adds	r2, r3, #2
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800409e:	b29b      	uxth	r3, r3
 80040a0:	3b01      	subs	r3, #1
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	86da      	strh	r2, [r3, #54]	; 0x36
 80040a8:	e011      	b.n	80040ce <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80040aa:	f7fd fce9 	bl	8001a80 <HAL_GetTick>
 80040ae:	4602      	mov	r2, r0
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d803      	bhi.n	80040c2 <HAL_SPI_Transmit+0x168>
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d102      	bne.n	80040c8 <HAL_SPI_Transmit+0x16e>
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d102      	bne.n	80040ce <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80040cc:	e074      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d1ce      	bne.n	8004076 <HAL_SPI_Transmit+0x11c>
 80040d8:	e04c      	b.n	8004174 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_Transmit+0x18e>
 80040e2:	8afb      	ldrh	r3, [r7, #22]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d140      	bne.n	800416a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	330c      	adds	r3, #12
 80040f2:	7812      	ldrb	r2, [r2, #0]
 80040f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fa:	1c5a      	adds	r2, r3, #1
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004104:	b29b      	uxth	r3, r3
 8004106:	3b01      	subs	r3, #1
 8004108:	b29a      	uxth	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800410e:	e02c      	b.n	800416a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	d113      	bne.n	8004146 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	330c      	adds	r3, #12
 8004128:	7812      	ldrb	r2, [r2, #0]
 800412a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800413a:	b29b      	uxth	r3, r3
 800413c:	3b01      	subs	r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	86da      	strh	r2, [r3, #54]	; 0x36
 8004144:	e011      	b.n	800416a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004146:	f7fd fc9b 	bl	8001a80 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	69bb      	ldr	r3, [r7, #24]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d803      	bhi.n	800415e <HAL_SPI_Transmit+0x204>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d102      	bne.n	8004164 <HAL_SPI_Transmit+0x20a>
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d102      	bne.n	800416a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004168:	e026      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1cd      	bne.n	8004110 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004174:	69ba      	ldr	r2, [r7, #24]
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fbcb 	bl	8004914 <SPI_EndRxTxTransaction>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d002      	beq.n	800418a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10a      	bne.n	80041a8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004192:	2300      	movs	r3, #0
 8004194:	613b      	str	r3, [r7, #16]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	613b      	str	r3, [r7, #16]
 80041a6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	77fb      	strb	r3, [r7, #31]
 80041b4:	e000      	b.n	80041b8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80041b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2200      	movs	r2, #0
 80041c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3720      	adds	r7, #32
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b088      	sub	sp, #32
 80041d6:	af02      	add	r7, sp, #8
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	60b9      	str	r1, [r7, #8]
 80041dc:	603b      	str	r3, [r7, #0]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80041e2:	2300      	movs	r3, #0
 80041e4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041ee:	d112      	bne.n	8004216 <HAL_SPI_Receive+0x44>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10e      	bne.n	8004216 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2204      	movs	r2, #4
 80041fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004200:	88fa      	ldrh	r2, [r7, #6]
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	4613      	mov	r3, r2
 8004208:	68ba      	ldr	r2, [r7, #8]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 f8f1 	bl	80043f4 <HAL_SPI_TransmitReceive>
 8004212:	4603      	mov	r3, r0
 8004214:	e0ea      	b.n	80043ec <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_SPI_Receive+0x52>
 8004220:	2302      	movs	r3, #2
 8004222:	e0e3      	b.n	80043ec <HAL_SPI_Receive+0x21a>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800422c:	f7fd fc28 	bl	8001a80 <HAL_GetTick>
 8004230:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d002      	beq.n	8004244 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800423e:	2302      	movs	r3, #2
 8004240:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004242:	e0ca      	b.n	80043da <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d002      	beq.n	8004250 <HAL_SPI_Receive+0x7e>
 800424a:	88fb      	ldrh	r3, [r7, #6]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d102      	bne.n	8004256 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004254:	e0c1      	b.n	80043da <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2204      	movs	r2, #4
 800425a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	88fa      	ldrh	r2, [r7, #6]
 800426e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2200      	movs	r2, #0
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429c:	d10f      	bne.n	80042be <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80042bc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042c8:	2b40      	cmp	r3, #64	; 0x40
 80042ca:	d007      	beq.n	80042dc <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042da:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d162      	bne.n	80043aa <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80042e4:	e02e      	b.n	8004344 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 0301 	and.w	r3, r3, #1
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d115      	bne.n	8004320 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f103 020c 	add.w	r2, r3, #12
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	7812      	ldrb	r2, [r2, #0]
 8004302:	b2d2      	uxtb	r2, r2
 8004304:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800431e:	e011      	b.n	8004344 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004320:	f7fd fbae 	bl	8001a80 <HAL_GetTick>
 8004324:	4602      	mov	r2, r0
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	1ad3      	subs	r3, r2, r3
 800432a:	683a      	ldr	r2, [r7, #0]
 800432c:	429a      	cmp	r2, r3
 800432e:	d803      	bhi.n	8004338 <HAL_SPI_Receive+0x166>
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004336:	d102      	bne.n	800433e <HAL_SPI_Receive+0x16c>
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d102      	bne.n	8004344 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004342:	e04a      	b.n	80043da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d1cb      	bne.n	80042e6 <HAL_SPI_Receive+0x114>
 800434e:	e031      	b.n	80043b4 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b01      	cmp	r3, #1
 800435c:	d113      	bne.n	8004386 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68da      	ldr	r2, [r3, #12]
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	b292      	uxth	r2, r2
 800436a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	1c9a      	adds	r2, r3, #2
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437a:	b29b      	uxth	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b29a      	uxth	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004384:	e011      	b.n	80043aa <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004386:	f7fd fb7b 	bl	8001a80 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	429a      	cmp	r2, r3
 8004394:	d803      	bhi.n	800439e <HAL_SPI_Receive+0x1cc>
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439c:	d102      	bne.n	80043a4 <HAL_SPI_Receive+0x1d2>
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80043a8:	e017      	b.n	80043da <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1cd      	bne.n	8004350 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	6839      	ldr	r1, [r7, #0]
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 fa45 	bl	8004848 <SPI_EndRxTransaction>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d002      	beq.n	80043ca <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2220      	movs	r2, #32
 80043c8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d002      	beq.n	80043d8 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	75fb      	strb	r3, [r7, #23]
 80043d6:	e000      	b.n	80043da <HAL_SPI_Receive+0x208>
  }

error :
 80043d8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80043ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3718      	adds	r7, #24
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	; 0x30
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	60f8      	str	r0, [r7, #12]
 80043fc:	60b9      	str	r1, [r7, #8]
 80043fe:	607a      	str	r2, [r7, #4]
 8004400:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004402:	2301      	movs	r3, #1
 8004404:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_SPI_TransmitReceive+0x26>
 8004416:	2302      	movs	r3, #2
 8004418:	e18a      	b.n	8004730 <HAL_SPI_TransmitReceive+0x33c>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004422:	f7fd fb2d 	bl	8001a80 <HAL_GetTick>
 8004426:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800442e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004438:	887b      	ldrh	r3, [r7, #2]
 800443a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800443c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004440:	2b01      	cmp	r3, #1
 8004442:	d00f      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x70>
 8004444:	69fb      	ldr	r3, [r7, #28]
 8004446:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800444a:	d107      	bne.n	800445c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <HAL_SPI_TransmitReceive+0x68>
 8004454:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004458:	2b04      	cmp	r3, #4
 800445a:	d003      	beq.n	8004464 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800445c:	2302      	movs	r3, #2
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004462:	e15b      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x82>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_TransmitReceive+0x82>
 8004470:	887b      	ldrh	r3, [r7, #2]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d103      	bne.n	800447e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800447c:	e14e      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2b04      	cmp	r3, #4
 8004488:	d003      	beq.n	8004492 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2205      	movs	r2, #5
 800448e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	687a      	ldr	r2, [r7, #4]
 800449c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	887a      	ldrh	r2, [r7, #2]
 80044a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	887a      	ldrh	r2, [r7, #2]
 80044a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	887a      	ldrh	r2, [r7, #2]
 80044b4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	887a      	ldrh	r2, [r7, #2]
 80044ba:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d2:	2b40      	cmp	r3, #64	; 0x40
 80044d4:	d007      	beq.n	80044e6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044e4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	68db      	ldr	r3, [r3, #12]
 80044ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ee:	d178      	bne.n	80045e2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d002      	beq.n	80044fe <HAL_SPI_TransmitReceive+0x10a>
 80044f8:	8b7b      	ldrh	r3, [r7, #26]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d166      	bne.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	881a      	ldrh	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	1c9a      	adds	r2, r3, #2
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004518:	b29b      	uxth	r3, r3
 800451a:	3b01      	subs	r3, #1
 800451c:	b29a      	uxth	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004522:	e053      	b.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	f003 0302 	and.w	r3, r3, #2
 800452e:	2b02      	cmp	r3, #2
 8004530:	d11b      	bne.n	800456a <HAL_SPI_TransmitReceive+0x176>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004536:	b29b      	uxth	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d016      	beq.n	800456a <HAL_SPI_TransmitReceive+0x176>
 800453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800453e:	2b01      	cmp	r3, #1
 8004540:	d113      	bne.n	800456a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004546:	881a      	ldrh	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004552:	1c9a      	adds	r2, r3, #2
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b29a      	uxth	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004566:	2300      	movs	r3, #0
 8004568:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b01      	cmp	r3, #1
 8004576:	d119      	bne.n	80045ac <HAL_SPI_TransmitReceive+0x1b8>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d014      	beq.n	80045ac <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68da      	ldr	r2, [r3, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458c:	b292      	uxth	r2, r2
 800458e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	1c9a      	adds	r2, r3, #2
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800459e:	b29b      	uxth	r3, r3
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045a8:	2301      	movs	r3, #1
 80045aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80045ac:	f7fd fa68 	bl	8001a80 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d807      	bhi.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
 80045bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045c2:	d003      	beq.n	80045cc <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80045ca:	e0a7      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1a6      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x130>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80045da:	b29b      	uxth	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d1a1      	bne.n	8004524 <HAL_SPI_TransmitReceive+0x130>
 80045e0:	e07c      	b.n	80046dc <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d002      	beq.n	80045f0 <HAL_SPI_TransmitReceive+0x1fc>
 80045ea:	8b7b      	ldrh	r3, [r7, #26]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d16b      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	330c      	adds	r3, #12
 80045fa:	7812      	ldrb	r2, [r2, #0]
 80045fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800460c:	b29b      	uxth	r3, r3
 800460e:	3b01      	subs	r3, #1
 8004610:	b29a      	uxth	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004616:	e057      	b.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d11c      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800462a:	b29b      	uxth	r3, r3
 800462c:	2b00      	cmp	r3, #0
 800462e:	d017      	beq.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2b01      	cmp	r3, #1
 8004634:	d114      	bne.n	8004660 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	7812      	ldrb	r2, [r2, #0]
 8004642:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004652:	b29b      	uxth	r3, r3
 8004654:	3b01      	subs	r3, #1
 8004656:	b29a      	uxth	r2, r3
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b01      	cmp	r3, #1
 800466c:	d119      	bne.n	80046a2 <HAL_SPI_TransmitReceive+0x2ae>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d014      	beq.n	80046a2 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	b2d2      	uxtb	r2, r2
 8004684:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468a:	1c5a      	adds	r2, r3, #1
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004694:	b29b      	uxth	r3, r3
 8004696:	3b01      	subs	r3, #1
 8004698:	b29a      	uxth	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800469e:	2301      	movs	r3, #1
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80046a2:	f7fd f9ed 	bl	8001a80 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d803      	bhi.n	80046ba <HAL_SPI_TransmitReceive+0x2c6>
 80046b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b8:	d102      	bne.n	80046c0 <HAL_SPI_TransmitReceive+0x2cc>
 80046ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d103      	bne.n	80046c8 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80046c6:	e029      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046cc:	b29b      	uxth	r3, r3
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1a2      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x224>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d19d      	bne.n	8004618 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80046e0:	68f8      	ldr	r0, [r7, #12]
 80046e2:	f000 f917 	bl	8004914 <SPI_EndRxTxTransaction>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d006      	beq.n	80046fa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80046f8:	e010      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10b      	bne.n	800471a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	617b      	str	r3, [r7, #20]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	617b      	str	r3, [r7, #20]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	e000      	b.n	800471c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800471a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800472c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004730:	4618      	mov	r0, r3
 8004732:	3730      	adds	r7, #48	; 0x30
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004748:	f7fd f99a 	bl	8001a80 <HAL_GetTick>
 800474c:	4602      	mov	r2, r0
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	1a9b      	subs	r3, r3, r2
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	4413      	add	r3, r2
 8004756:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004758:	f7fd f992 	bl	8001a80 <HAL_GetTick>
 800475c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800475e:	4b39      	ldr	r3, [pc, #228]	; (8004844 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	015b      	lsls	r3, r3, #5
 8004764:	0d1b      	lsrs	r3, r3, #20
 8004766:	69fa      	ldr	r2, [r7, #28]
 8004768:	fb02 f303 	mul.w	r3, r2, r3
 800476c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800476e:	e054      	b.n	800481a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004776:	d050      	beq.n	800481a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004778:	f7fd f982 	bl	8001a80 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	429a      	cmp	r2, r3
 8004786:	d902      	bls.n	800478e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d13d      	bne.n	800480a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800479c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047a6:	d111      	bne.n	80047cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047b0:	d004      	beq.n	80047bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047ba:	d107      	bne.n	80047cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d4:	d10f      	bne.n	80047f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e017      	b.n	800483a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004810:	2300      	movs	r3, #0
 8004812:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3b01      	subs	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	429a      	cmp	r2, r3
 8004828:	bf0c      	ite	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	2300      	movne	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	429a      	cmp	r2, r3
 8004836:	d19b      	bne.n	8004770 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	20000018 	.word	0x20000018

08004848 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b086      	sub	sp, #24
 800484c:	af02      	add	r7, sp, #8
 800484e:	60f8      	str	r0, [r7, #12]
 8004850:	60b9      	str	r1, [r7, #8]
 8004852:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800485c:	d111      	bne.n	8004882 <SPI_EndRxTransaction+0x3a>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004866:	d004      	beq.n	8004872 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004870:	d107      	bne.n	8004882 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681a      	ldr	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004880:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800488a:	d12a      	bne.n	80048e2 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004894:	d012      	beq.n	80048bc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	9300      	str	r3, [sp, #0]
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2200      	movs	r2, #0
 800489e:	2180      	movs	r1, #128	; 0x80
 80048a0:	68f8      	ldr	r0, [r7, #12]
 80048a2:	f7ff ff49 	bl	8004738 <SPI_WaitFlagStateUntilTimeout>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d02d      	beq.n	8004908 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b0:	f043 0220 	orr.w	r2, r3, #32
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e026      	b.n	800490a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	2101      	movs	r1, #1
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff ff36 	bl	8004738 <SPI_WaitFlagStateUntilTimeout>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d01a      	beq.n	8004908 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f043 0220 	orr.w	r2, r3, #32
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80048de:	2303      	movs	r3, #3
 80048e0:	e013      	b.n	800490a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	9300      	str	r3, [sp, #0]
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2200      	movs	r2, #0
 80048ea:	2101      	movs	r1, #1
 80048ec:	68f8      	ldr	r0, [r7, #12]
 80048ee:	f7ff ff23 	bl	8004738 <SPI_WaitFlagStateUntilTimeout>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fc:	f043 0220 	orr.w	r2, r3, #32
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e000      	b.n	800490a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af02      	add	r7, sp, #8
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004920:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <SPI_EndRxTxTransaction+0x7c>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a1b      	ldr	r2, [pc, #108]	; (8004994 <SPI_EndRxTxTransaction+0x80>)
 8004926:	fba2 2303 	umull	r2, r3, r2, r3
 800492a:	0d5b      	lsrs	r3, r3, #21
 800492c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004930:	fb02 f303 	mul.w	r3, r2, r3
 8004934:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800493e:	d112      	bne.n	8004966 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	9300      	str	r3, [sp, #0]
 8004944:	68bb      	ldr	r3, [r7, #8]
 8004946:	2200      	movs	r2, #0
 8004948:	2180      	movs	r1, #128	; 0x80
 800494a:	68f8      	ldr	r0, [r7, #12]
 800494c:	f7ff fef4 	bl	8004738 <SPI_WaitFlagStateUntilTimeout>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d016      	beq.n	8004984 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800495a:	f043 0220 	orr.w	r2, r3, #32
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004962:	2303      	movs	r3, #3
 8004964:	e00f      	b.n	8004986 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00a      	beq.n	8004982 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3b01      	subs	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800497c:	2b80      	cmp	r3, #128	; 0x80
 800497e:	d0f2      	beq.n	8004966 <SPI_EndRxTxTransaction+0x52>
 8004980:	e000      	b.n	8004984 <SPI_EndRxTxTransaction+0x70>
        break;
 8004982:	bf00      	nop
  }

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	20000018 	.word	0x20000018
 8004994:	165e9f81 	.word	0x165e9f81

08004998 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004998:	b084      	sub	sp, #16
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	f107 001c 	add.w	r0, r7, #28
 80049a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d122      	bne.n	80049f6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68db      	ldr	r3, [r3, #12]
 80049c0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80049c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80049d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f001 fbee 	bl	80061cc <USB_CoreReset>
 80049f0:	4603      	mov	r3, r0
 80049f2:	73fb      	strb	r3, [r7, #15]
 80049f4:	e01a      	b.n	8004a2c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f001 fbe2 	bl	80061cc <USB_CoreReset>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	639a      	str	r2, [r3, #56]	; 0x38
 8004a1e:	e005      	b.n	8004a2c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d10b      	bne.n	8004a4a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f043 0206 	orr.w	r2, r3, #6
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f043 0220 	orr.w	r2, r3, #32
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a56:	b004      	add	sp, #16
 8004a58:	4770      	bx	lr
	...

08004a5c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	4613      	mov	r3, r2
 8004a68:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004a6a:	79fb      	ldrb	r3, [r7, #7]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d165      	bne.n	8004b3c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4a41      	ldr	r2, [pc, #260]	; (8004b78 <USB_SetTurnaroundTime+0x11c>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d906      	bls.n	8004a86 <USB_SetTurnaroundTime+0x2a>
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4a40      	ldr	r2, [pc, #256]	; (8004b7c <USB_SetTurnaroundTime+0x120>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d202      	bcs.n	8004a86 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004a80:	230f      	movs	r3, #15
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	e062      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	4a3c      	ldr	r2, [pc, #240]	; (8004b7c <USB_SetTurnaroundTime+0x120>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d306      	bcc.n	8004a9c <USB_SetTurnaroundTime+0x40>
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4a3b      	ldr	r2, [pc, #236]	; (8004b80 <USB_SetTurnaroundTime+0x124>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d202      	bcs.n	8004a9c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004a96:	230e      	movs	r3, #14
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	e057      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	4a38      	ldr	r2, [pc, #224]	; (8004b80 <USB_SetTurnaroundTime+0x124>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d306      	bcc.n	8004ab2 <USB_SetTurnaroundTime+0x56>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	4a37      	ldr	r2, [pc, #220]	; (8004b84 <USB_SetTurnaroundTime+0x128>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d202      	bcs.n	8004ab2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004aac:	230d      	movs	r3, #13
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	e04c      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	4a33      	ldr	r2, [pc, #204]	; (8004b84 <USB_SetTurnaroundTime+0x128>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d306      	bcc.n	8004ac8 <USB_SetTurnaroundTime+0x6c>
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4a32      	ldr	r2, [pc, #200]	; (8004b88 <USB_SetTurnaroundTime+0x12c>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d802      	bhi.n	8004ac8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004ac2:	230c      	movs	r3, #12
 8004ac4:	617b      	str	r3, [r7, #20]
 8004ac6:	e041      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4a2f      	ldr	r2, [pc, #188]	; (8004b88 <USB_SetTurnaroundTime+0x12c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d906      	bls.n	8004ade <USB_SetTurnaroundTime+0x82>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	4a2e      	ldr	r2, [pc, #184]	; (8004b8c <USB_SetTurnaroundTime+0x130>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d802      	bhi.n	8004ade <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004ad8:	230b      	movs	r3, #11
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	e036      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4a2a      	ldr	r2, [pc, #168]	; (8004b8c <USB_SetTurnaroundTime+0x130>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d906      	bls.n	8004af4 <USB_SetTurnaroundTime+0x98>
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4a29      	ldr	r2, [pc, #164]	; (8004b90 <USB_SetTurnaroundTime+0x134>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d802      	bhi.n	8004af4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004aee:	230a      	movs	r3, #10
 8004af0:	617b      	str	r3, [r7, #20]
 8004af2:	e02b      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	4a26      	ldr	r2, [pc, #152]	; (8004b90 <USB_SetTurnaroundTime+0x134>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d906      	bls.n	8004b0a <USB_SetTurnaroundTime+0xae>
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4a25      	ldr	r2, [pc, #148]	; (8004b94 <USB_SetTurnaroundTime+0x138>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d202      	bcs.n	8004b0a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004b04:	2309      	movs	r3, #9
 8004b06:	617b      	str	r3, [r7, #20]
 8004b08:	e020      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4a21      	ldr	r2, [pc, #132]	; (8004b94 <USB_SetTurnaroundTime+0x138>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d306      	bcc.n	8004b20 <USB_SetTurnaroundTime+0xc4>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <USB_SetTurnaroundTime+0x13c>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d802      	bhi.n	8004b20 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004b1a:	2308      	movs	r3, #8
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e015      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <USB_SetTurnaroundTime+0x13c>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d906      	bls.n	8004b36 <USB_SetTurnaroundTime+0xda>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	4a1c      	ldr	r2, [pc, #112]	; (8004b9c <USB_SetTurnaroundTime+0x140>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d202      	bcs.n	8004b36 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004b30:	2307      	movs	r3, #7
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e00a      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004b36:	2306      	movs	r3, #6
 8004b38:	617b      	str	r3, [r7, #20]
 8004b3a:	e007      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d102      	bne.n	8004b48 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004b42:	2309      	movs	r3, #9
 8004b44:	617b      	str	r3, [r7, #20]
 8004b46:	e001      	b.n	8004b4c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004b48:	2309      	movs	r3, #9
 8004b4a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	68da      	ldr	r2, [r3, #12]
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	029b      	lsls	r3, r3, #10
 8004b60:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004b64:	431a      	orrs	r2, r3
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004b6a:	2300      	movs	r3, #0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr
 8004b78:	00d8acbf 	.word	0x00d8acbf
 8004b7c:	00e4e1c0 	.word	0x00e4e1c0
 8004b80:	00f42400 	.word	0x00f42400
 8004b84:	01067380 	.word	0x01067380
 8004b88:	011a499f 	.word	0x011a499f
 8004b8c:	01312cff 	.word	0x01312cff
 8004b90:	014ca43f 	.word	0x014ca43f
 8004b94:	016e3600 	.word	0x016e3600
 8004b98:	01a6ab1f 	.word	0x01a6ab1f
 8004b9c:	01e84800 	.word	0x01e84800

08004ba0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f043 0201 	orr.w	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b083      	sub	sp, #12
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f023 0201 	bic.w	r2, r3, #1
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004c00:	78fb      	ldrb	r3, [r7, #3]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d115      	bne.n	8004c32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c12:	2001      	movs	r0, #1
 8004c14:	f7fc ff40 	bl	8001a98 <HAL_Delay>
      ms++;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f001 fa45 	bl	80060ae <USB_GetMode>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d01e      	beq.n	8004c68 <USB_SetCurrentMode+0x84>
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b31      	cmp	r3, #49	; 0x31
 8004c2e:	d9f0      	bls.n	8004c12 <USB_SetCurrentMode+0x2e>
 8004c30:	e01a      	b.n	8004c68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004c32:	78fb      	ldrb	r3, [r7, #3]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d115      	bne.n	8004c64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	68db      	ldr	r3, [r3, #12]
 8004c3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004c44:	2001      	movs	r0, #1
 8004c46:	f7fc ff27 	bl	8001a98 <HAL_Delay>
      ms++;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f001 fa2c 	bl	80060ae <USB_GetMode>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d005      	beq.n	8004c68 <USB_SetCurrentMode+0x84>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b31      	cmp	r3, #49	; 0x31
 8004c60:	d9f0      	bls.n	8004c44 <USB_SetCurrentMode+0x60>
 8004c62:	e001      	b.n	8004c68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004c64:	2301      	movs	r3, #1
 8004c66:	e005      	b.n	8004c74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2b32      	cmp	r3, #50	; 0x32
 8004c6c:	d101      	bne.n	8004c72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004c96:	2300      	movs	r3, #0
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	e009      	b.n	8004cb0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	3340      	adds	r3, #64	; 0x40
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	4413      	add	r3, r2
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	3301      	adds	r3, #1
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	2b0e      	cmp	r3, #14
 8004cb4:	d9f2      	bls.n	8004c9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d11c      	bne.n	8004cf6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cca:	f043 0302 	orr.w	r3, r3, #2
 8004cce:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8004cf4:	e00b      	b.n	8004d0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d14:	461a      	mov	r2, r3
 8004d16:	2300      	movs	r3, #0
 8004d18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d20:	4619      	mov	r1, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	461a      	mov	r2, r3
 8004d2a:	680b      	ldr	r3, [r1, #0]
 8004d2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d10c      	bne.n	8004d4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d104      	bne.n	8004d44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	f000 f965 	bl	800500c <USB_SetDevSpeed>
 8004d42:	e008      	b.n	8004d56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004d44:	2101      	movs	r1, #1
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f960 	bl	800500c <USB_SetDevSpeed>
 8004d4c:	e003      	b.n	8004d56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004d4e:	2103      	movs	r1, #3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 f95b 	bl	800500c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004d56:	2110      	movs	r1, #16
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 f8f3 	bl	8004f44 <USB_FlushTxFifo>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d001      	beq.n	8004d68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004d68:	6878      	ldr	r0, [r7, #4]
 8004d6a:	f000 f91f 	bl	8004fac <USB_FlushRxFifo>
 8004d6e:	4603      	mov	r3, r0
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d001      	beq.n	8004d78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2300      	movs	r3, #0
 8004d82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	461a      	mov	r2, r3
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	e043      	b.n	8004e2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004db4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004db8:	d118      	bne.n	8004dec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004dd2:	6013      	str	r3, [r2, #0]
 8004dd4:	e013      	b.n	8004dfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004de2:	461a      	mov	r2, r3
 8004de4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004de8:	6013      	str	r3, [r2, #0]
 8004dea:	e008      	b.n	8004dfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004e22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	3301      	adds	r3, #1
 8004e28:	613b      	str	r3, [r7, #16]
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d3b7      	bcc.n	8004da2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	e043      	b.n	8004ec0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e4e:	d118      	bne.n	8004e82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	461a      	mov	r2, r3
 8004e64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e013      	b.n	8004e94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	015a      	lsls	r2, r3, #5
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	4413      	add	r3, r2
 8004e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e78:	461a      	mov	r2, r3
 8004e7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004e7e:	6013      	str	r3, [r2, #0]
 8004e80:	e008      	b.n	8004e94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	461a      	mov	r2, r3
 8004e90:	2300      	movs	r3, #0
 8004e92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	015a      	lsls	r2, r3, #5
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4413      	add	r3, r2
 8004eae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004eb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	613b      	str	r3, [r7, #16]
 8004ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d3b7      	bcc.n	8004e38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ed6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004ee8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d105      	bne.n	8004efc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	f043 0210 	orr.w	r2, r3, #16
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	699a      	ldr	r2, [r3, #24]
 8004f00:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <USB_DevInit+0x2c4>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	f043 0208 	orr.w	r2, r3, #8
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d107      	bne.n	8004f30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	699b      	ldr	r3, [r3, #24]
 8004f24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f28:	f043 0304 	orr.w	r3, r3, #4
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3718      	adds	r7, #24
 8004f36:	46bd      	mov	sp, r7
 8004f38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f3c:	b004      	add	sp, #16
 8004f3e:	4770      	bx	lr
 8004f40:	803c3800 	.word	0x803c3800

08004f44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f44:	b480      	push	{r7}
 8004f46:	b085      	sub	sp, #20
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	3301      	adds	r3, #1
 8004f56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	4a13      	ldr	r2, [pc, #76]	; (8004fa8 <USB_FlushTxFifo+0x64>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e01b      	b.n	8004f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	daf2      	bge.n	8004f52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	019b      	lsls	r3, r3, #6
 8004f74:	f043 0220 	orr.w	r2, r3, #32
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4a08      	ldr	r2, [pc, #32]	; (8004fa8 <USB_FlushTxFifo+0x64>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e006      	b.n	8004f9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	f003 0320 	and.w	r3, r3, #32
 8004f96:	2b20      	cmp	r3, #32
 8004f98:	d0f0      	beq.n	8004f7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3714      	adds	r7, #20
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	00030d40 	.word	0x00030d40

08004fac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	3301      	adds	r3, #1
 8004fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	4a11      	ldr	r2, [pc, #68]	; (8005008 <USB_FlushRxFifo+0x5c>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d901      	bls.n	8004fca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e018      	b.n	8004ffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	691b      	ldr	r3, [r3, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	daf2      	bge.n	8004fb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2210      	movs	r2, #16
 8004fda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a08      	ldr	r2, [pc, #32]	; (8005008 <USB_FlushRxFifo+0x5c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d901      	bls.n	8004fee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e006      	b.n	8004ffc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f003 0310 	and.w	r3, r3, #16
 8004ff6:	2b10      	cmp	r3, #16
 8004ff8:	d0f0      	beq.n	8004fdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ffa:	2300      	movs	r3, #0
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr
 8005008:	00030d40 	.word	0x00030d40

0800500c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800503e:	b480      	push	{r7}
 8005040:	b087      	sub	sp, #28
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	f003 0306 	and.w	r3, r3, #6
 8005056:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800505e:	2300      	movs	r3, #0
 8005060:	75fb      	strb	r3, [r7, #23]
 8005062:	e00a      	b.n	800507a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d002      	beq.n	8005070 <USB_GetDevSpeed+0x32>
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	2b06      	cmp	r3, #6
 800506e:	d102      	bne.n	8005076 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005070:	2302      	movs	r3, #2
 8005072:	75fb      	strb	r3, [r7, #23]
 8005074:	e001      	b.n	800507a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005076:	230f      	movs	r3, #15
 8005078:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800507a:	7dfb      	ldrb	r3, [r7, #23]
}
 800507c:	4618      	mov	r0, r3
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005088:	b480      	push	{r7}
 800508a:	b085      	sub	sp, #20
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d13a      	bne.n	800511a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050aa:	69da      	ldr	r2, [r3, #28]
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	f003 030f 	and.w	r3, r3, #15
 80050b4:	2101      	movs	r1, #1
 80050b6:	fa01 f303 	lsl.w	r3, r1, r3
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	68f9      	ldr	r1, [r7, #12]
 80050be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050c2:	4313      	orrs	r3, r2
 80050c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d155      	bne.n	8005188 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	015a      	lsls	r2, r3, #5
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	4413      	add	r3, r2
 80050e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	791b      	ldrb	r3, [r3, #4]
 80050f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80050f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	059b      	lsls	r3, r3, #22
 80050fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005100:	4313      	orrs	r3, r2
 8005102:	68ba      	ldr	r2, [r7, #8]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	68fa      	ldr	r2, [r7, #12]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005112:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e036      	b.n	8005188 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005120:	69da      	ldr	r2, [r3, #28]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	f003 030f 	and.w	r3, r3, #15
 800512a:	2101      	movs	r1, #1
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	041b      	lsls	r3, r3, #16
 8005132:	68f9      	ldr	r1, [r7, #12]
 8005134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005138:	4313      	orrs	r3, r2
 800513a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	015a      	lsls	r2, r3, #5
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	4413      	add	r3, r2
 8005144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d11a      	bne.n	8005188 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	791b      	ldrb	r3, [r3, #4]
 800516c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800516e:	430b      	orrs	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800517e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005182:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005186:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3714      	adds	r7, #20
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	781b      	ldrb	r3, [r3, #0]
 80051aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	785b      	ldrb	r3, [r3, #1]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d161      	bne.n	8005278 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	015a      	lsls	r2, r3, #5
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	4413      	add	r3, r2
 80051bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ca:	d11f      	bne.n	800520c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	0151      	lsls	r1, r2, #5
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	440a      	add	r2, r1
 80051e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80051ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4413      	add	r3, r2
 80051f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	0151      	lsls	r1, r2, #5
 80051fe:	68fa      	ldr	r2, [r7, #12]
 8005200:	440a      	add	r2, r1
 8005202:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005206:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800520a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005212:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	f003 030f 	and.w	r3, r3, #15
 800521c:	2101      	movs	r1, #1
 800521e:	fa01 f303 	lsl.w	r3, r1, r3
 8005222:	b29b      	uxth	r3, r3
 8005224:	43db      	mvns	r3, r3
 8005226:	68f9      	ldr	r1, [r7, #12]
 8005228:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800522c:	4013      	ands	r3, r2
 800522e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005236:	69da      	ldr	r2, [r3, #28]
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	f003 030f 	and.w	r3, r3, #15
 8005240:	2101      	movs	r1, #1
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	b29b      	uxth	r3, r3
 8005248:	43db      	mvns	r3, r3
 800524a:	68f9      	ldr	r1, [r7, #12]
 800524c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005250:	4013      	ands	r3, r2
 8005252:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	015a      	lsls	r2, r3, #5
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	4413      	add	r3, r2
 800525c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	0159      	lsls	r1, r3, #5
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	440b      	add	r3, r1
 800526a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526e:	4619      	mov	r1, r3
 8005270:	4b35      	ldr	r3, [pc, #212]	; (8005348 <USB_DeactivateEndpoint+0x1b0>)
 8005272:	4013      	ands	r3, r2
 8005274:	600b      	str	r3, [r1, #0]
 8005276:	e060      	b.n	800533a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800528a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800528e:	d11f      	bne.n	80052d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	015a      	lsls	r2, r3, #5
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	4413      	add	r3, r2
 8005298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	0151      	lsls	r1, r2, #5
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	440a      	add	r2, r1
 80052a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	015a      	lsls	r2, r3, #5
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68ba      	ldr	r2, [r7, #8]
 80052c0:	0151      	lsls	r1, r2, #5
 80052c2:	68fa      	ldr	r2, [r7, #12]
 80052c4:	440a      	add	r2, r1
 80052c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f003 030f 	and.w	r3, r3, #15
 80052e0:	2101      	movs	r1, #1
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	041b      	lsls	r3, r3, #16
 80052e8:	43db      	mvns	r3, r3
 80052ea:	68f9      	ldr	r1, [r7, #12]
 80052ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052f0:	4013      	ands	r3, r2
 80052f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052fa:	69da      	ldr	r2, [r3, #28]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	f003 030f 	and.w	r3, r3, #15
 8005304:	2101      	movs	r1, #1
 8005306:	fa01 f303 	lsl.w	r3, r1, r3
 800530a:	041b      	lsls	r3, r3, #16
 800530c:	43db      	mvns	r3, r3
 800530e:	68f9      	ldr	r1, [r7, #12]
 8005310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005314:	4013      	ands	r3, r2
 8005316:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	0159      	lsls	r1, r3, #5
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	440b      	add	r3, r1
 800532e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005332:	4619      	mov	r1, r3
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <USB_DeactivateEndpoint+0x1b4>)
 8005336:	4013      	ands	r3, r2
 8005338:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	ec337800 	.word	0xec337800
 800534c:	eff37800 	.word	0xeff37800

08005350 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08a      	sub	sp, #40	; 0x28
 8005354:	af02      	add	r7, sp, #8
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	4613      	mov	r3, r2
 800535c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	785b      	ldrb	r3, [r3, #1]
 800536c:	2b01      	cmp	r3, #1
 800536e:	f040 815c 	bne.w	800562a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d132      	bne.n	80053e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	015a      	lsls	r2, r3, #5
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	4413      	add	r3, r2
 8005382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	69ba      	ldr	r2, [r7, #24]
 800538a:	0151      	lsls	r1, r2, #5
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	440a      	add	r2, r1
 8005390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800539c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800539e:	69bb      	ldr	r3, [r7, #24]
 80053a0:	015a      	lsls	r2, r3, #5
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	4413      	add	r3, r2
 80053a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	69ba      	ldr	r2, [r7, #24]
 80053ae:	0151      	lsls	r1, r2, #5
 80053b0:	69fa      	ldr	r2, [r7, #28]
 80053b2:	440a      	add	r2, r1
 80053b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	69ba      	ldr	r2, [r7, #24]
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d8:	0cdb      	lsrs	r3, r3, #19
 80053da:	04db      	lsls	r3, r3, #19
 80053dc:	6113      	str	r3, [r2, #16]
 80053de:	e074      	b.n	80054ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053e0:	69bb      	ldr	r3, [r7, #24]
 80053e2:	015a      	lsls	r2, r3, #5
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	4413      	add	r3, r2
 80053e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	69ba      	ldr	r2, [r7, #24]
 80053f0:	0151      	lsls	r1, r2, #5
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	440a      	add	r2, r1
 80053f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053fa:	0cdb      	lsrs	r3, r3, #19
 80053fc:	04db      	lsls	r3, r3, #19
 80053fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	4413      	add	r3, r2
 8005408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	0151      	lsls	r1, r2, #5
 8005412:	69fa      	ldr	r2, [r7, #28]
 8005414:	440a      	add	r2, r1
 8005416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800541a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800541e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	015a      	lsls	r2, r3, #5
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	4413      	add	r3, r2
 800542c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005430:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	6999      	ldr	r1, [r3, #24]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	440b      	add	r3, r1
 800543c:	1e59      	subs	r1, r3, #1
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	fbb1 f3f3 	udiv	r3, r1, r3
 8005446:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005448:	4b9d      	ldr	r3, [pc, #628]	; (80056c0 <USB_EPStartXfer+0x370>)
 800544a:	400b      	ands	r3, r1
 800544c:	69b9      	ldr	r1, [r7, #24]
 800544e:	0148      	lsls	r0, r1, #5
 8005450:	69f9      	ldr	r1, [r7, #28]
 8005452:	4401      	add	r1, r0
 8005454:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005458:	4313      	orrs	r3, r2
 800545a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800545c:	69bb      	ldr	r3, [r7, #24]
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	699b      	ldr	r3, [r3, #24]
 800546e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005472:	69b9      	ldr	r1, [r7, #24]
 8005474:	0148      	lsls	r0, r1, #5
 8005476:	69f9      	ldr	r1, [r7, #28]
 8005478:	4401      	add	r1, r0
 800547a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800547e:	4313      	orrs	r3, r2
 8005480:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	791b      	ldrb	r3, [r3, #4]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d11f      	bne.n	80054ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800548a:	69bb      	ldr	r3, [r7, #24]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	4413      	add	r3, r2
 8005492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	69ba      	ldr	r2, [r7, #24]
 800549a:	0151      	lsls	r1, r2, #5
 800549c:	69fa      	ldr	r2, [r7, #28]
 800549e:	440a      	add	r2, r1
 80054a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80054a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	015a      	lsls	r2, r3, #5
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	69ba      	ldr	r2, [r7, #24]
 80054ba:	0151      	lsls	r1, r2, #5
 80054bc:	69fa      	ldr	r2, [r7, #28]
 80054be:	440a      	add	r2, r1
 80054c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80054ca:	79fb      	ldrb	r3, [r7, #7]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d14b      	bne.n	8005568 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d009      	beq.n	80054ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	015a      	lsls	r2, r3, #5
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	4413      	add	r3, r2
 80054e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e4:	461a      	mov	r2, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	695b      	ldr	r3, [r3, #20]
 80054ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	791b      	ldrb	r3, [r3, #4]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d128      	bne.n	8005546 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005500:	2b00      	cmp	r3, #0
 8005502:	d110      	bne.n	8005526 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	015a      	lsls	r2, r3, #5
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	0151      	lsls	r1, r2, #5
 8005516:	69fa      	ldr	r2, [r7, #28]
 8005518:	440a      	add	r2, r1
 800551a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800551e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005522:	6013      	str	r3, [r2, #0]
 8005524:	e00f      	b.n	8005546 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	015a      	lsls	r2, r3, #5
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69ba      	ldr	r2, [r7, #24]
 8005536:	0151      	lsls	r1, r2, #5
 8005538:	69fa      	ldr	r2, [r7, #28]
 800553a:	440a      	add	r2, r1
 800553c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005544:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	015a      	lsls	r2, r3, #5
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	4413      	add	r3, r2
 800554e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69ba      	ldr	r2, [r7, #24]
 8005556:	0151      	lsls	r1, r2, #5
 8005558:	69fa      	ldr	r2, [r7, #28]
 800555a:	440a      	add	r2, r1
 800555c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005560:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	e133      	b.n	80057d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	4413      	add	r3, r2
 8005570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	0151      	lsls	r1, r2, #5
 800557a:	69fa      	ldr	r2, [r7, #28]
 800557c:	440a      	add	r2, r1
 800557e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005582:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005586:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	791b      	ldrb	r3, [r3, #4]
 800558c:	2b01      	cmp	r3, #1
 800558e:	d015      	beq.n	80055bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	2b00      	cmp	r3, #0
 8005596:	f000 811b 	beq.w	80057d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	f003 030f 	and.w	r3, r3, #15
 80055aa:	2101      	movs	r1, #1
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	69f9      	ldr	r1, [r7, #28]
 80055b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055b6:	4313      	orrs	r3, r2
 80055b8:	634b      	str	r3, [r1, #52]	; 0x34
 80055ba:	e109      	b.n	80057d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d110      	bne.n	80055ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	015a      	lsls	r2, r3, #5
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	4413      	add	r3, r2
 80055d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	0151      	lsls	r1, r2, #5
 80055de:	69fa      	ldr	r2, [r7, #28]
 80055e0:	440a      	add	r2, r1
 80055e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80055ea:	6013      	str	r3, [r2, #0]
 80055ec:	e00f      	b.n	800560e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	69fb      	ldr	r3, [r7, #28]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	69fa      	ldr	r2, [r7, #28]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005608:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800560c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	6919      	ldr	r1, [r3, #16]
 8005612:	68bb      	ldr	r3, [r7, #8]
 8005614:	781a      	ldrb	r2, [r3, #0]
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	b298      	uxth	r0, r3
 800561c:	79fb      	ldrb	r3, [r7, #7]
 800561e:	9300      	str	r3, [sp, #0]
 8005620:	4603      	mov	r3, r0
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 fade 	bl	8005be4 <USB_WritePacket>
 8005628:	e0d2      	b.n	80057d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005636:	691b      	ldr	r3, [r3, #16]
 8005638:	69ba      	ldr	r2, [r7, #24]
 800563a:	0151      	lsls	r1, r2, #5
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	440a      	add	r2, r1
 8005640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005644:	0cdb      	lsrs	r3, r3, #19
 8005646:	04db      	lsls	r3, r3, #19
 8005648:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	015a      	lsls	r2, r3, #5
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	4413      	add	r3, r2
 8005652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	69ba      	ldr	r2, [r7, #24]
 800565a:	0151      	lsls	r1, r2, #5
 800565c:	69fa      	ldr	r2, [r7, #28]
 800565e:	440a      	add	r2, r1
 8005660:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005664:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005668:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800566c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d126      	bne.n	80056c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800568c:	69b9      	ldr	r1, [r7, #24]
 800568e:	0148      	lsls	r0, r1, #5
 8005690:	69f9      	ldr	r1, [r7, #28]
 8005692:	4401      	add	r1, r0
 8005694:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005698:	4313      	orrs	r3, r2
 800569a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	69ba      	ldr	r2, [r7, #24]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	69fa      	ldr	r2, [r7, #28]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80056b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80056ba:	6113      	str	r3, [r2, #16]
 80056bc:	e03a      	b.n	8005734 <USB_EPStartXfer+0x3e4>
 80056be:	bf00      	nop
 80056c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	699a      	ldr	r2, [r3, #24]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4413      	add	r3, r2
 80056ce:	1e5a      	subs	r2, r3, #1
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	68db      	ldr	r3, [r3, #12]
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	8afa      	ldrh	r2, [r7, #22]
 80056e0:	fb03 f202 	mul.w	r2, r3, r2
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	69fb      	ldr	r3, [r7, #28]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	8afb      	ldrh	r3, [r7, #22]
 80056f8:	04d9      	lsls	r1, r3, #19
 80056fa:	4b38      	ldr	r3, [pc, #224]	; (80057dc <USB_EPStartXfer+0x48c>)
 80056fc:	400b      	ands	r3, r1
 80056fe:	69b9      	ldr	r1, [r7, #24]
 8005700:	0148      	lsls	r0, r1, #5
 8005702:	69f9      	ldr	r1, [r7, #28]
 8005704:	4401      	add	r1, r0
 8005706:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800570a:	4313      	orrs	r3, r2
 800570c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	69db      	ldr	r3, [r3, #28]
 8005720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005724:	69b9      	ldr	r1, [r7, #24]
 8005726:	0148      	lsls	r0, r1, #5
 8005728:	69f9      	ldr	r1, [r7, #28]
 800572a:	4401      	add	r1, r0
 800572c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005730:	4313      	orrs	r3, r2
 8005732:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005734:	79fb      	ldrb	r3, [r7, #7]
 8005736:	2b01      	cmp	r3, #1
 8005738:	d10d      	bne.n	8005756 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	691b      	ldr	r3, [r3, #16]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	6919      	ldr	r1, [r3, #16]
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	015a      	lsls	r2, r3, #5
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	4413      	add	r3, r2
 800574e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005752:	460a      	mov	r2, r1
 8005754:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	791b      	ldrb	r3, [r3, #4]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d128      	bne.n	80057b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800575e:	69fb      	ldr	r3, [r7, #28]
 8005760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005764:	689b      	ldr	r3, [r3, #8]
 8005766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800576a:	2b00      	cmp	r3, #0
 800576c:	d110      	bne.n	8005790 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	69fb      	ldr	r3, [r7, #28]
 8005774:	4413      	add	r3, r2
 8005776:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	69ba      	ldr	r2, [r7, #24]
 800577e:	0151      	lsls	r1, r2, #5
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	440a      	add	r2, r1
 8005784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005788:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800578c:	6013      	str	r3, [r2, #0]
 800578e:	e00f      	b.n	80057b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	015a      	lsls	r2, r3, #5
 8005794:	69fb      	ldr	r3, [r7, #28]
 8005796:	4413      	add	r3, r2
 8005798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	69ba      	ldr	r2, [r7, #24]
 80057a0:	0151      	lsls	r1, r2, #5
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	440a      	add	r2, r1
 80057a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	015a      	lsls	r2, r3, #5
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	4413      	add	r3, r2
 80057b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	69ba      	ldr	r2, [r7, #24]
 80057c0:	0151      	lsls	r1, r2, #5
 80057c2:	69fa      	ldr	r2, [r7, #28]
 80057c4:	440a      	add	r2, r1
 80057c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80057ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3720      	adds	r7, #32
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	1ff80000 	.word	0x1ff80000

080057e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	4613      	mov	r3, r2
 80057ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	785b      	ldrb	r3, [r3, #1]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	f040 80ce 	bne.w	800599e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d132      	bne.n	8005870 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	0151      	lsls	r1, r2, #5
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	440a      	add	r2, r1
 8005820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005824:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005828:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800582c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	015a      	lsls	r2, r3, #5
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	4413      	add	r3, r2
 8005836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	693a      	ldr	r2, [r7, #16]
 800583e:	0151      	lsls	r1, r2, #5
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	440a      	add	r2, r1
 8005844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005848:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800584c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	440a      	add	r2, r1
 8005864:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005868:	0cdb      	lsrs	r3, r3, #19
 800586a:	04db      	lsls	r3, r3, #19
 800586c:	6113      	str	r3, [r2, #16]
 800586e:	e04e      	b.n	800590e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	4413      	add	r3, r2
 8005878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587c:	691b      	ldr	r3, [r3, #16]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	0151      	lsls	r1, r2, #5
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	440a      	add	r2, r1
 8005886:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800588a:	0cdb      	lsrs	r3, r3, #19
 800588c:	04db      	lsls	r3, r3, #19
 800588e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	015a      	lsls	r2, r3, #5
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	4413      	add	r3, r2
 8005898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	0151      	lsls	r1, r2, #5
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	440a      	add	r2, r1
 80058a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80058ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80058b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	699a      	ldr	r2, [r3, #24]
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d903      	bls.n	80058c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	68da      	ldr	r2, [r3, #12]
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	693a      	ldr	r2, [r7, #16]
 80058d8:	0151      	lsls	r1, r2, #5
 80058da:	697a      	ldr	r2, [r7, #20]
 80058dc:	440a      	add	r2, r1
 80058de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	015a      	lsls	r2, r3, #5
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	4413      	add	r3, r2
 80058f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058f4:	691a      	ldr	r2, [r3, #16]
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	699b      	ldr	r3, [r3, #24]
 80058fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058fe:	6939      	ldr	r1, [r7, #16]
 8005900:	0148      	lsls	r0, r1, #5
 8005902:	6979      	ldr	r1, [r7, #20]
 8005904:	4401      	add	r1, r0
 8005906:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800590a:	4313      	orrs	r3, r2
 800590c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	2b01      	cmp	r3, #1
 8005912:	d11e      	bne.n	8005952 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	695b      	ldr	r3, [r3, #20]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	015a      	lsls	r2, r3, #5
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005928:	461a      	mov	r2, r3
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	695b      	ldr	r3, [r3, #20]
 800592e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	015a      	lsls	r2, r3, #5
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	4413      	add	r3, r2
 8005938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	0151      	lsls	r1, r2, #5
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	440a      	add	r2, r1
 8005946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800594a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800594e:	6013      	str	r3, [r2, #0]
 8005950:	e097      	b.n	8005a82 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	015a      	lsls	r2, r3, #5
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	4413      	add	r3, r2
 800595a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	0151      	lsls	r1, r2, #5
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	440a      	add	r2, r1
 8005968:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800596c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005970:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	2b00      	cmp	r3, #0
 8005978:	f000 8083 	beq.w	8005a82 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	f003 030f 	and.w	r3, r3, #15
 800598c:	2101      	movs	r1, #1
 800598e:	fa01 f303 	lsl.w	r3, r1, r3
 8005992:	6979      	ldr	r1, [r7, #20]
 8005994:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005998:	4313      	orrs	r3, r2
 800599a:	634b      	str	r3, [r1, #52]	; 0x34
 800599c:	e071      	b.n	8005a82 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	691b      	ldr	r3, [r3, #16]
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	0151      	lsls	r1, r2, #5
 80059b0:	697a      	ldr	r2, [r7, #20]
 80059b2:	440a      	add	r2, r1
 80059b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059b8:	0cdb      	lsrs	r3, r3, #19
 80059ba:	04db      	lsls	r3, r3, #19
 80059bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	015a      	lsls	r2, r3, #5
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	4413      	add	r3, r2
 80059c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	0151      	lsls	r1, r2, #5
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	440a      	add	r2, r1
 80059d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80059dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80059e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	699b      	ldr	r3, [r3, #24]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	68da      	ldr	r2, [r3, #12]
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	68da      	ldr	r2, [r3, #12]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	015a      	lsls	r2, r3, #5
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	4413      	add	r3, r2
 8005a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a06:	691b      	ldr	r3, [r3, #16]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	0151      	lsls	r1, r2, #5
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	440a      	add	r2, r1
 8005a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a18:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	015a      	lsls	r2, r3, #5
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	4413      	add	r3, r2
 8005a22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	69db      	ldr	r3, [r3, #28]
 8005a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a30:	6939      	ldr	r1, [r7, #16]
 8005a32:	0148      	lsls	r0, r1, #5
 8005a34:	6979      	ldr	r1, [r7, #20]
 8005a36:	4401      	add	r1, r0
 8005a38:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d10d      	bne.n	8005a62 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6919      	ldr	r1, [r3, #16]
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	015a      	lsls	r2, r3, #5
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	4413      	add	r3, r2
 8005a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a5e:	460a      	mov	r2, r1
 8005a60:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	015a      	lsls	r2, r3, #5
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	4413      	add	r3, r2
 8005a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	0151      	lsls	r1, r2, #5
 8005a74:	697a      	ldr	r2, [r7, #20]
 8005a76:	440a      	add	r2, r1
 8005a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a80:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	371c      	adds	r7, #28
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	785b      	ldrb	r3, [r3, #1]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d14a      	bne.n	8005b44 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ac6:	f040 8086 	bne.w	8005bd6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	7812      	ldrb	r2, [r2, #0]
 8005ade:	0151      	lsls	r1, r2, #5
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	440a      	add	r2, r1
 8005ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005aec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	015a      	lsls	r2, r3, #5
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4413      	add	r3, r2
 8005af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	0151      	lsls	r1, r2, #5
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	440a      	add	r2, r1
 8005b08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b10:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	3301      	adds	r3, #1
 8005b16:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d902      	bls.n	8005b28 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	75fb      	strb	r3, [r7, #23]
          break;
 8005b26:	e056      	b.n	8005bd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b40:	d0e7      	beq.n	8005b12 <USB_EPStopXfer+0x82>
 8005b42:	e048      	b.n	8005bd6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b5c:	d13b      	bne.n	8005bd6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	015a      	lsls	r2, r3, #5
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	4413      	add	r3, r2
 8005b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	683a      	ldr	r2, [r7, #0]
 8005b70:	7812      	ldrb	r2, [r2, #0]
 8005b72:	0151      	lsls	r1, r2, #5
 8005b74:	693a      	ldr	r2, [r7, #16]
 8005b76:	440a      	add	r2, r1
 8005b78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b80:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	683a      	ldr	r2, [r7, #0]
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	0151      	lsls	r1, r2, #5
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	440a      	add	r2, r1
 8005b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ba4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f242 7210 	movw	r2, #10000	; 0x2710
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d902      	bls.n	8005bbc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	75fb      	strb	r3, [r7, #23]
          break;
 8005bba:	e00c      	b.n	8005bd6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bd4:	d0e7      	beq.n	8005ba6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	371c      	adds	r7, #28
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be2:	4770      	bx	lr

08005be4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b089      	sub	sp, #36	; 0x24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	60f8      	str	r0, [r7, #12]
 8005bec:	60b9      	str	r1, [r7, #8]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	460b      	mov	r3, r1
 8005bf4:	71fb      	strb	r3, [r7, #7]
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005c02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d123      	bne.n	8005c52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005c0a:	88bb      	ldrh	r3, [r7, #4]
 8005c0c:	3303      	adds	r3, #3
 8005c0e:	089b      	lsrs	r3, r3, #2
 8005c10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	61bb      	str	r3, [r7, #24]
 8005c16:	e018      	b.n	8005c4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005c18:	79fb      	ldrb	r3, [r7, #7]
 8005c1a:	031a      	lsls	r2, r3, #12
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c24:	461a      	mov	r2, r3
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	3301      	adds	r3, #1
 8005c36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	3301      	adds	r3, #1
 8005c42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	3301      	adds	r3, #1
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d3e2      	bcc.n	8005c18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005c52:	2300      	movs	r3, #0
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3724      	adds	r7, #36	; 0x24
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b08b      	sub	sp, #44	; 0x2c
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	089b      	lsrs	r3, r3, #2
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005c7e:	88fb      	ldrh	r3, [r7, #6]
 8005c80:	f003 0303 	and.w	r3, r3, #3
 8005c84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005c86:	2300      	movs	r3, #0
 8005c88:	623b      	str	r3, [r7, #32]
 8005c8a:	e014      	b.n	8005cb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005c8c:	69bb      	ldr	r3, [r7, #24]
 8005c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c96:	601a      	str	r2, [r3, #0]
    pDest++;
 8005c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca6:	3301      	adds	r3, #1
 8005ca8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cac:	3301      	adds	r3, #1
 8005cae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	3301      	adds	r3, #1
 8005cb4:	623b      	str	r3, [r7, #32]
 8005cb6:	6a3a      	ldr	r2, [r7, #32]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d3e6      	bcc.n	8005c8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005cbe:	8bfb      	ldrh	r3, [r7, #30]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d01e      	beq.n	8005d02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cce:	461a      	mov	r2, r3
 8005cd0:	f107 0310 	add.w	r3, r7, #16
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	6a3b      	ldr	r3, [r7, #32]
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	00db      	lsls	r3, r3, #3
 8005ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8005ce4:	b2da      	uxtb	r2, r3
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	701a      	strb	r2, [r3, #0]
      i++;
 8005cea:	6a3b      	ldr	r3, [r7, #32]
 8005cec:	3301      	adds	r3, #1
 8005cee:	623b      	str	r3, [r7, #32]
      pDest++;
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005cf6:	8bfb      	ldrh	r3, [r7, #30]
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005cfc:	8bfb      	ldrh	r3, [r7, #30]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d1ea      	bne.n	8005cd8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	372c      	adds	r7, #44	; 0x2c
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d12c      	bne.n	8005d86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	db12      	blt.n	8005d64 <USB_EPSetStall+0x54>
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00f      	beq.n	8005d64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	015a      	lsls	r2, r3, #5
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	0151      	lsls	r1, r2, #5
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	440a      	add	r2, r1
 8005d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005d62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	e02b      	b.n	8005dde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	015a      	lsls	r2, r3, #5
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	4413      	add	r3, r2
 8005d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	db12      	blt.n	8005dbe <USB_EPSetStall+0xae>
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d00f      	beq.n	8005dbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	015a      	lsls	r2, r3, #5
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4413      	add	r3, r2
 8005da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68ba      	ldr	r2, [r7, #8]
 8005dae:	0151      	lsls	r1, r2, #5
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	440a      	add	r2, r1
 8005db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005dbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	015a      	lsls	r2, r3, #5
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	0151      	lsls	r1, r2, #5
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	440a      	add	r2, r1
 8005dd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005ddc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	785b      	ldrb	r3, [r3, #1]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d128      	bne.n	8005e5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	68fa      	ldr	r2, [r7, #12]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	791b      	ldrb	r3, [r3, #4]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d003      	beq.n	8005e38 <USB_EPClearStall+0x4c>
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	791b      	ldrb	r3, [r3, #4]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d138      	bne.n	8005eaa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	0151      	lsls	r1, r2, #5
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	440a      	add	r2, r1
 8005e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e027      	b.n	8005eaa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68ba      	ldr	r2, [r7, #8]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	68fa      	ldr	r2, [r7, #12]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	791b      	ldrb	r3, [r3, #4]
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d003      	beq.n	8005e8a <USB_EPClearStall+0x9e>
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	791b      	ldrb	r3, [r3, #4]
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d10f      	bne.n	8005eaa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68ba      	ldr	r2, [r7, #8]
 8005e9a:	0151      	lsls	r1, r2, #5
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	440a      	add	r2, r1
 8005ea0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005eda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	011b      	lsls	r3, r3, #4
 8005ee8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005eec:	68f9      	ldr	r1, [r7, #12]
 8005eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3714      	adds	r7, #20
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	68fa      	ldr	r2, [r7, #12]
 8005f1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f1e:	f023 0303 	bic.w	r3, r3, #3
 8005f22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f32:	f023 0302 	bic.w	r3, r3, #2
 8005f36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3714      	adds	r7, #20
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr

08005f46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005f46:	b480      	push	{r7}
 8005f48:	b085      	sub	sp, #20
 8005f4a:	af00      	add	r7, sp, #0
 8005f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f60:	f023 0303 	bic.w	r3, r3, #3
 8005f64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f74:	f043 0302 	orr.w	r3, r3, #2
 8005f78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005f7a:	2300      	movs	r3, #0
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3714      	adds	r7, #20
 8005f80:	46bd      	mov	sp, r7
 8005f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f86:	4770      	bx	lr

08005f88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	695b      	ldr	r3, [r3, #20]
 8005f94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fca:	69db      	ldr	r3, [r3, #28]
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	0c1b      	lsrs	r3, r3, #16
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3714      	adds	r7, #20
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b085      	sub	sp, #20
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff4:	699b      	ldr	r3, [r3, #24]
 8005ff6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	69db      	ldr	r3, [r3, #28]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	4013      	ands	r3, r2
 8006004:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	b29b      	uxth	r3, r3
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
 800601e:	460b      	mov	r3, r1
 8006020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006026:	78fb      	ldrb	r3, [r7, #3]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	4013      	ands	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006044:	68bb      	ldr	r3, [r7, #8]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3714      	adds	r7, #20
 800604a:	46bd      	mov	sp, r7
 800604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006050:	4770      	bx	lr

08006052 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006052:	b480      	push	{r7}
 8006054:	b087      	sub	sp, #28
 8006056:	af00      	add	r7, sp, #0
 8006058:	6078      	str	r0, [r7, #4]
 800605a:	460b      	mov	r3, r1
 800605c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006074:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006076:	78fb      	ldrb	r3, [r7, #3]
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	fa22 f303 	lsr.w	r3, r2, r3
 8006082:	01db      	lsls	r3, r3, #7
 8006084:	b2db      	uxtb	r3, r3
 8006086:	693a      	ldr	r2, [r7, #16]
 8006088:	4313      	orrs	r3, r2
 800608a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	4013      	ands	r3, r2
 800609e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80060a0:	68bb      	ldr	r3, [r7, #8]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	371c      	adds	r7, #28
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr

080060ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060ae:	b480      	push	{r7}
 80060b0:	b083      	sub	sp, #12
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	f003 0301 	and.w	r3, r3, #1
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b085      	sub	sp, #20
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80060e8:	f023 0307 	bic.w	r3, r3, #7
 80060ec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f4:	685b      	ldr	r3, [r3, #4]
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006100:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006102:	2300      	movs	r3, #0
}
 8006104:	4618      	mov	r0, r3
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006110:	b480      	push	{r7}
 8006112:	b087      	sub	sp, #28
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	460b      	mov	r3, r1
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	333c      	adds	r3, #60	; 0x3c
 8006126:	3304      	adds	r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	4a26      	ldr	r2, [pc, #152]	; (80061c8 <USB_EP0_OutStart+0xb8>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d90a      	bls.n	800614a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006144:	d101      	bne.n	800614a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006146:	2300      	movs	r3, #0
 8006148:	e037      	b.n	80061ba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006150:	461a      	mov	r2, r3
 8006152:	2300      	movs	r3, #0
 8006154:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	697a      	ldr	r2, [r7, #20]
 8006160:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006164:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006168:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006178:	f043 0318 	orr.w	r3, r3, #24
 800617c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800618c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006190:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006192:	7afb      	ldrb	r3, [r7, #11]
 8006194:	2b01      	cmp	r3, #1
 8006196:	d10f      	bne.n	80061b8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800619e:	461a      	mov	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	697a      	ldr	r2, [r7, #20]
 80061ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061b2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80061b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	371c      	adds	r7, #28
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	4f54300a 	.word	0x4f54300a

080061cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	3301      	adds	r3, #1
 80061dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a13      	ldr	r2, [pc, #76]	; (8006230 <USB_CoreReset+0x64>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d901      	bls.n	80061ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e01b      	b.n	8006222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	daf2      	bge.n	80061d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f043 0201 	orr.w	r2, r3, #1
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3301      	adds	r3, #1
 8006206:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	4a09      	ldr	r2, [pc, #36]	; (8006230 <USB_CoreReset+0x64>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d901      	bls.n	8006214 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e006      	b.n	8006222 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b01      	cmp	r3, #1
 800621e:	d0f0      	beq.n	8006202 <USB_CoreReset+0x36>

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	00030d40 	.word	0x00030d40

08006234 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006240:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006244:	f002 fcaa 	bl	8008b9c <USBD_static_malloc>
 8006248:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d109      	bne.n	8006264 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	32b0      	adds	r2, #176	; 0xb0
 800625a:	2100      	movs	r1, #0
 800625c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006260:	2302      	movs	r3, #2
 8006262:	e0d4      	b.n	800640e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006264:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006268:	2100      	movs	r1, #0
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f002 fd36 	bl	8008cdc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	32b0      	adds	r2, #176	; 0xb0
 800627a:	68f9      	ldr	r1, [r7, #12]
 800627c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	32b0      	adds	r2, #176	; 0xb0
 800628a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	7c1b      	ldrb	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d138      	bne.n	800630e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800629c:	4b5e      	ldr	r3, [pc, #376]	; (8006418 <USBD_CDC_Init+0x1e4>)
 800629e:	7819      	ldrb	r1, [r3, #0]
 80062a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062a4:	2202      	movs	r2, #2
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f002 fb55 	bl	8008956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80062ac:	4b5a      	ldr	r3, [pc, #360]	; (8006418 <USBD_CDC_Init+0x1e4>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	f003 020f 	and.w	r2, r3, #15
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	009b      	lsls	r3, r3, #2
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	3324      	adds	r3, #36	; 0x24
 80062c2:	2201      	movs	r2, #1
 80062c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80062c6:	4b55      	ldr	r3, [pc, #340]	; (800641c <USBD_CDC_Init+0x1e8>)
 80062c8:	7819      	ldrb	r1, [r3, #0]
 80062ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80062ce:	2202      	movs	r2, #2
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f002 fb40 	bl	8008956 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80062d6:	4b51      	ldr	r3, [pc, #324]	; (800641c <USBD_CDC_Init+0x1e8>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	f003 020f 	and.w	r2, r3, #15
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	4413      	add	r3, r2
 80062e6:	009b      	lsls	r3, r3, #2
 80062e8:	440b      	add	r3, r1
 80062ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80062ee:	2201      	movs	r2, #1
 80062f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80062f2:	4b4b      	ldr	r3, [pc, #300]	; (8006420 <USBD_CDC_Init+0x1ec>)
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	f003 020f 	and.w	r2, r3, #15
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	4613      	mov	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	440b      	add	r3, r1
 8006306:	3326      	adds	r3, #38	; 0x26
 8006308:	2210      	movs	r2, #16
 800630a:	801a      	strh	r2, [r3, #0]
 800630c:	e035      	b.n	800637a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800630e:	4b42      	ldr	r3, [pc, #264]	; (8006418 <USBD_CDC_Init+0x1e4>)
 8006310:	7819      	ldrb	r1, [r3, #0]
 8006312:	2340      	movs	r3, #64	; 0x40
 8006314:	2202      	movs	r2, #2
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f002 fb1d 	bl	8008956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800631c:	4b3e      	ldr	r3, [pc, #248]	; (8006418 <USBD_CDC_Init+0x1e4>)
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	f003 020f 	and.w	r2, r3, #15
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	3324      	adds	r3, #36	; 0x24
 8006332:	2201      	movs	r2, #1
 8006334:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006336:	4b39      	ldr	r3, [pc, #228]	; (800641c <USBD_CDC_Init+0x1e8>)
 8006338:	7819      	ldrb	r1, [r3, #0]
 800633a:	2340      	movs	r3, #64	; 0x40
 800633c:	2202      	movs	r2, #2
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f002 fb09 	bl	8008956 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006344:	4b35      	ldr	r3, [pc, #212]	; (800641c <USBD_CDC_Init+0x1e8>)
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	f003 020f 	and.w	r2, r3, #15
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	440b      	add	r3, r1
 8006358:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800635c:	2201      	movs	r2, #1
 800635e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006360:	4b2f      	ldr	r3, [pc, #188]	; (8006420 <USBD_CDC_Init+0x1ec>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	f003 020f 	and.w	r2, r3, #15
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	440b      	add	r3, r1
 8006374:	3326      	adds	r3, #38	; 0x26
 8006376:	2210      	movs	r2, #16
 8006378:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800637a:	4b29      	ldr	r3, [pc, #164]	; (8006420 <USBD_CDC_Init+0x1ec>)
 800637c:	7819      	ldrb	r1, [r3, #0]
 800637e:	2308      	movs	r3, #8
 8006380:	2203      	movs	r2, #3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f002 fae7 	bl	8008956 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006388:	4b25      	ldr	r3, [pc, #148]	; (8006420 <USBD_CDC_Init+0x1ec>)
 800638a:	781b      	ldrb	r3, [r3, #0]
 800638c:	f003 020f 	and.w	r2, r3, #15
 8006390:	6879      	ldr	r1, [r7, #4]
 8006392:	4613      	mov	r3, r2
 8006394:	009b      	lsls	r3, r3, #2
 8006396:	4413      	add	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	440b      	add	r3, r1
 800639c:	3324      	adds	r3, #36	; 0x24
 800639e:	2201      	movs	r2, #1
 80063a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	33b0      	adds	r3, #176	; 0xb0
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d101      	bne.n	80063dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80063d8:	2302      	movs	r3, #2
 80063da:	e018      	b.n	800640e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	7c1b      	ldrb	r3, [r3, #16]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10a      	bne.n	80063fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063e4:	4b0d      	ldr	r3, [pc, #52]	; (800641c <USBD_CDC_Init+0x1e8>)
 80063e6:	7819      	ldrb	r1, [r3, #0]
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f002 fb9e 	bl	8008b34 <USBD_LL_PrepareReceive>
 80063f8:	e008      	b.n	800640c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80063fa:	4b08      	ldr	r3, [pc, #32]	; (800641c <USBD_CDC_Init+0x1e8>)
 80063fc:	7819      	ldrb	r1, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006404:	2340      	movs	r3, #64	; 0x40
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f002 fb94 	bl	8008b34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	200000ab 	.word	0x200000ab
 800641c:	200000ac 	.word	0x200000ac
 8006420:	200000ad 	.word	0x200000ad

08006424 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	460b      	mov	r3, r1
 800642e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006430:	4b3a      	ldr	r3, [pc, #232]	; (800651c <USBD_CDC_DeInit+0xf8>)
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f002 fab3 	bl	80089a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800643c:	4b37      	ldr	r3, [pc, #220]	; (800651c <USBD_CDC_DeInit+0xf8>)
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	f003 020f 	and.w	r2, r3, #15
 8006444:	6879      	ldr	r1, [r7, #4]
 8006446:	4613      	mov	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4413      	add	r3, r2
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	440b      	add	r3, r1
 8006450:	3324      	adds	r3, #36	; 0x24
 8006452:	2200      	movs	r2, #0
 8006454:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006456:	4b32      	ldr	r3, [pc, #200]	; (8006520 <USBD_CDC_DeInit+0xfc>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f002 faa0 	bl	80089a2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006462:	4b2f      	ldr	r3, [pc, #188]	; (8006520 <USBD_CDC_DeInit+0xfc>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	f003 020f 	and.w	r2, r3, #15
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800647a:	2200      	movs	r2, #0
 800647c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800647e:	4b29      	ldr	r3, [pc, #164]	; (8006524 <USBD_CDC_DeInit+0x100>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f002 fa8c 	bl	80089a2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800648a:	4b26      	ldr	r3, [pc, #152]	; (8006524 <USBD_CDC_DeInit+0x100>)
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f003 020f 	and.w	r2, r3, #15
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	4613      	mov	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	4413      	add	r3, r2
 800649a:	009b      	lsls	r3, r3, #2
 800649c:	440b      	add	r3, r1
 800649e:	3324      	adds	r3, #36	; 0x24
 80064a0:	2200      	movs	r2, #0
 80064a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80064a4:	4b1f      	ldr	r3, [pc, #124]	; (8006524 <USBD_CDC_DeInit+0x100>)
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	f003 020f 	and.w	r2, r3, #15
 80064ac:	6879      	ldr	r1, [r7, #4]
 80064ae:	4613      	mov	r3, r2
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4413      	add	r3, r2
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	440b      	add	r3, r1
 80064b8:	3326      	adds	r3, #38	; 0x26
 80064ba:	2200      	movs	r2, #0
 80064bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	32b0      	adds	r2, #176	; 0xb0
 80064c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d01f      	beq.n	8006510 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80064d6:	687a      	ldr	r2, [r7, #4]
 80064d8:	33b0      	adds	r3, #176	; 0xb0
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	32b0      	adds	r2, #176	; 0xb0
 80064ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f002 fb60 	bl	8008bb8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	32b0      	adds	r2, #176	; 0xb0
 8006502:	2100      	movs	r1, #0
 8006504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2200      	movs	r2, #0
 800650c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	200000ab 	.word	0x200000ab
 8006520:	200000ac 	.word	0x200000ac
 8006524:	200000ad 	.word	0x200000ad

08006528 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	32b0      	adds	r2, #176	; 0xb0
 800653c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006540:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006546:	2300      	movs	r3, #0
 8006548:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8006554:	2303      	movs	r3, #3
 8006556:	e0bf      	b.n	80066d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006560:	2b00      	cmp	r3, #0
 8006562:	d050      	beq.n	8006606 <USBD_CDC_Setup+0xde>
 8006564:	2b20      	cmp	r3, #32
 8006566:	f040 80af 	bne.w	80066c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	88db      	ldrh	r3, [r3, #6]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d03a      	beq.n	80065e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	b25b      	sxtb	r3, r3
 8006578:	2b00      	cmp	r3, #0
 800657a:	da1b      	bge.n	80065b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	33b0      	adds	r3, #176	; 0xb0
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	683a      	ldr	r2, [r7, #0]
 8006590:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8006592:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006594:	683a      	ldr	r2, [r7, #0]
 8006596:	88d2      	ldrh	r2, [r2, #6]
 8006598:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	88db      	ldrh	r3, [r3, #6]
 800659e:	2b07      	cmp	r3, #7
 80065a0:	bf28      	it	cs
 80065a2:	2307      	movcs	r3, #7
 80065a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	89fa      	ldrh	r2, [r7, #14]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f001 fd89 	bl	80080c4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80065b2:	e090      	b.n	80066d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	785a      	ldrb	r2, [r3, #1]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	88db      	ldrh	r3, [r3, #6]
 80065c2:	2b3f      	cmp	r3, #63	; 0x3f
 80065c4:	d803      	bhi.n	80065ce <USBD_CDC_Setup+0xa6>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	88db      	ldrh	r3, [r3, #6]
 80065ca:	b2da      	uxtb	r2, r3
 80065cc:	e000      	b.n	80065d0 <USBD_CDC_Setup+0xa8>
 80065ce:	2240      	movs	r2, #64	; 0x40
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80065d6:	6939      	ldr	r1, [r7, #16]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80065de:	461a      	mov	r2, r3
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f001 fd9b 	bl	800811c <USBD_CtlPrepareRx>
      break;
 80065e6:	e076      	b.n	80066d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	33b0      	adds	r3, #176	; 0xb0
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	7850      	ldrb	r0, [r2, #1]
 80065fe:	2200      	movs	r2, #0
 8006600:	6839      	ldr	r1, [r7, #0]
 8006602:	4798      	blx	r3
      break;
 8006604:	e067      	b.n	80066d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	785b      	ldrb	r3, [r3, #1]
 800660a:	2b0b      	cmp	r3, #11
 800660c:	d851      	bhi.n	80066b2 <USBD_CDC_Setup+0x18a>
 800660e:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <USBD_CDC_Setup+0xec>)
 8006610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006614:	08006645 	.word	0x08006645
 8006618:	080066c1 	.word	0x080066c1
 800661c:	080066b3 	.word	0x080066b3
 8006620:	080066b3 	.word	0x080066b3
 8006624:	080066b3 	.word	0x080066b3
 8006628:	080066b3 	.word	0x080066b3
 800662c:	080066b3 	.word	0x080066b3
 8006630:	080066b3 	.word	0x080066b3
 8006634:	080066b3 	.word	0x080066b3
 8006638:	080066b3 	.word	0x080066b3
 800663c:	0800666f 	.word	0x0800666f
 8006640:	08006699 	.word	0x08006699
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800664a:	b2db      	uxtb	r3, r3
 800664c:	2b03      	cmp	r3, #3
 800664e:	d107      	bne.n	8006660 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006650:	f107 030a 	add.w	r3, r7, #10
 8006654:	2202      	movs	r2, #2
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fd33 	bl	80080c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800665e:	e032      	b.n	80066c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006660:	6839      	ldr	r1, [r7, #0]
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f001 fcbd 	bl	8007fe2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006668:	2303      	movs	r3, #3
 800666a:	75fb      	strb	r3, [r7, #23]
          break;
 800666c:	e02b      	b.n	80066c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b03      	cmp	r3, #3
 8006678:	d107      	bne.n	800668a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800667a:	f107 030d 	add.w	r3, r7, #13
 800667e:	2201      	movs	r2, #1
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f001 fd1e 	bl	80080c4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006688:	e01d      	b.n	80066c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f001 fca8 	bl	8007fe2 <USBD_CtlError>
            ret = USBD_FAIL;
 8006692:	2303      	movs	r3, #3
 8006694:	75fb      	strb	r3, [r7, #23]
          break;
 8006696:	e016      	b.n	80066c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b03      	cmp	r3, #3
 80066a2:	d00f      	beq.n	80066c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80066a4:	6839      	ldr	r1, [r7, #0]
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f001 fc9b 	bl	8007fe2 <USBD_CtlError>
            ret = USBD_FAIL;
 80066ac:	2303      	movs	r3, #3
 80066ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80066b0:	e008      	b.n	80066c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80066b2:	6839      	ldr	r1, [r7, #0]
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f001 fc94 	bl	8007fe2 <USBD_CtlError>
          ret = USBD_FAIL;
 80066ba:	2303      	movs	r3, #3
 80066bc:	75fb      	strb	r3, [r7, #23]
          break;
 80066be:	e002      	b.n	80066c6 <USBD_CDC_Setup+0x19e>
          break;
 80066c0:	bf00      	nop
 80066c2:	e008      	b.n	80066d6 <USBD_CDC_Setup+0x1ae>
          break;
 80066c4:	bf00      	nop
      }
      break;
 80066c6:	e006      	b.n	80066d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80066c8:	6839      	ldr	r1, [r7, #0]
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f001 fc89 	bl	8007fe2 <USBD_CtlError>
      ret = USBD_FAIL;
 80066d0:	2303      	movs	r3, #3
 80066d2:	75fb      	strb	r3, [r7, #23]
      break;
 80066d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80066d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3718      	adds	r7, #24
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	32b0      	adds	r2, #176	; 0xb0
 80066fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d101      	bne.n	800670a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006706:	2303      	movs	r3, #3
 8006708:	e065      	b.n	80067d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	32b0      	adds	r2, #176	; 0xb0
 8006714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006718:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800671a:	78fb      	ldrb	r3, [r7, #3]
 800671c:	f003 020f 	and.w	r2, r3, #15
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	3318      	adds	r3, #24
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d02f      	beq.n	8006794 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006734:	78fb      	ldrb	r3, [r7, #3]
 8006736:	f003 020f 	and.w	r2, r3, #15
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	4613      	mov	r3, r2
 800673e:	009b      	lsls	r3, r3, #2
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	440b      	add	r3, r1
 8006746:	3318      	adds	r3, #24
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	78fb      	ldrb	r3, [r7, #3]
 800674c:	f003 010f 	and.w	r1, r3, #15
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	460b      	mov	r3, r1
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	440b      	add	r3, r1
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4403      	add	r3, r0
 800675c:	3348      	adds	r3, #72	; 0x48
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	fbb2 f1f3 	udiv	r1, r2, r3
 8006764:	fb01 f303 	mul.w	r3, r1, r3
 8006768:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800676a:	2b00      	cmp	r3, #0
 800676c:	d112      	bne.n	8006794 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800676e:	78fb      	ldrb	r3, [r7, #3]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	6879      	ldr	r1, [r7, #4]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	440b      	add	r3, r1
 8006780:	3318      	adds	r3, #24
 8006782:	2200      	movs	r2, #0
 8006784:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006786:	78f9      	ldrb	r1, [r7, #3]
 8006788:	2300      	movs	r3, #0
 800678a:	2200      	movs	r2, #0
 800678c:	6878      	ldr	r0, [r7, #4]
 800678e:	f002 f9b0 	bl	8008af2 <USBD_LL_Transmit>
 8006792:	e01f      	b.n	80067d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	2200      	movs	r2, #0
 8006798:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	33b0      	adds	r3, #176	; 0xb0
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	4413      	add	r3, r2
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d010      	beq.n	80067d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80067b8:	687a      	ldr	r2, [r7, #4]
 80067ba:	33b0      	adds	r3, #176	; 0xb0
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	691b      	ldr	r3, [r3, #16]
 80067c4:	68ba      	ldr	r2, [r7, #8]
 80067c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80067ca:	68ba      	ldr	r2, [r7, #8]
 80067cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80067d4:	2300      	movs	r3, #0
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3710      	adds	r7, #16
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	460b      	mov	r3, r1
 80067e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	32b0      	adds	r2, #176	; 0xb0
 80067f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	32b0      	adds	r2, #176	; 0xb0
 8006804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d101      	bne.n	8006810 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800680c:	2303      	movs	r3, #3
 800680e:	e01a      	b.n	8006846 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	4619      	mov	r1, r3
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f002 f9ae 	bl	8008b76 <USBD_LL_GetRxDataSize>
 800681a:	4602      	mov	r2, r0
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	33b0      	adds	r3, #176	; 0xb0
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	685b      	ldr	r3, [r3, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006840:	4611      	mov	r1, r2
 8006842:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	32b0      	adds	r2, #176	; 0xb0
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d101      	bne.n	8006870 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800686c:	2303      	movs	r3, #3
 800686e:	e025      	b.n	80068bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	33b0      	adds	r3, #176	; 0xb0
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d01a      	beq.n	80068ba <USBD_CDC_EP0_RxReady+0x6c>
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800688a:	2bff      	cmp	r3, #255	; 0xff
 800688c:	d015      	beq.n	80068ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	33b0      	adds	r3, #176	; 0xb0
 8006898:	009b      	lsls	r3, r3, #2
 800689a:	4413      	add	r3, r2
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80068a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80068ae:	b292      	uxth	r2, r2
 80068b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	22ff      	movs	r2, #255	; 0xff
 80068b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80068cc:	2182      	movs	r1, #130	; 0x82
 80068ce:	4818      	ldr	r0, [pc, #96]	; (8006930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068d0:	f000 fd4f 	bl	8007372 <USBD_GetEpDesc>
 80068d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80068d6:	2101      	movs	r1, #1
 80068d8:	4815      	ldr	r0, [pc, #84]	; (8006930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068da:	f000 fd4a 	bl	8007372 <USBD_GetEpDesc>
 80068de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80068e0:	2181      	movs	r1, #129	; 0x81
 80068e2:	4813      	ldr	r0, [pc, #76]	; (8006930 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80068e4:	f000 fd45 	bl	8007372 <USBD_GetEpDesc>
 80068e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d002      	beq.n	80068f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2210      	movs	r2, #16
 80068f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d006      	beq.n	800690a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	2200      	movs	r2, #0
 8006900:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006904:	711a      	strb	r2, [r3, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d006      	beq.n	800691e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2200      	movs	r2, #0
 8006914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006918:	711a      	strb	r2, [r3, #4]
 800691a:	2200      	movs	r2, #0
 800691c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2243      	movs	r2, #67	; 0x43
 8006922:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006924:	4b02      	ldr	r3, [pc, #8]	; (8006930 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006926:	4618      	mov	r0, r3
 8006928:	3718      	adds	r7, #24
 800692a:	46bd      	mov	sp, r7
 800692c:	bd80      	pop	{r7, pc}
 800692e:	bf00      	nop
 8006930:	20000068 	.word	0x20000068

08006934 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b086      	sub	sp, #24
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800693c:	2182      	movs	r1, #130	; 0x82
 800693e:	4818      	ldr	r0, [pc, #96]	; (80069a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006940:	f000 fd17 	bl	8007372 <USBD_GetEpDesc>
 8006944:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006946:	2101      	movs	r1, #1
 8006948:	4815      	ldr	r0, [pc, #84]	; (80069a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800694a:	f000 fd12 	bl	8007372 <USBD_GetEpDesc>
 800694e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006950:	2181      	movs	r1, #129	; 0x81
 8006952:	4813      	ldr	r0, [pc, #76]	; (80069a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006954:	f000 fd0d 	bl	8007372 <USBD_GetEpDesc>
 8006958:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d002      	beq.n	8006966 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	2210      	movs	r2, #16
 8006964:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d006      	beq.n	800697a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	2200      	movs	r2, #0
 8006970:	711a      	strb	r2, [r3, #4]
 8006972:	2200      	movs	r2, #0
 8006974:	f042 0202 	orr.w	r2, r2, #2
 8006978:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d006      	beq.n	800698e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2200      	movs	r2, #0
 8006984:	711a      	strb	r2, [r3, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f042 0202 	orr.w	r2, r2, #2
 800698c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2243      	movs	r2, #67	; 0x43
 8006992:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006994:	4b02      	ldr	r3, [pc, #8]	; (80069a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8006996:	4618      	mov	r0, r3
 8006998:	3718      	adds	r7, #24
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000068 	.word	0x20000068

080069a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b086      	sub	sp, #24
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80069ac:	2182      	movs	r1, #130	; 0x82
 80069ae:	4818      	ldr	r0, [pc, #96]	; (8006a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069b0:	f000 fcdf 	bl	8007372 <USBD_GetEpDesc>
 80069b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80069b6:	2101      	movs	r1, #1
 80069b8:	4815      	ldr	r0, [pc, #84]	; (8006a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069ba:	f000 fcda 	bl	8007372 <USBD_GetEpDesc>
 80069be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80069c0:	2181      	movs	r1, #129	; 0x81
 80069c2:	4813      	ldr	r0, [pc, #76]	; (8006a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80069c4:	f000 fcd5 	bl	8007372 <USBD_GetEpDesc>
 80069c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d002      	beq.n	80069d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	2210      	movs	r2, #16
 80069d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d006      	beq.n	80069ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	2200      	movs	r2, #0
 80069e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069e4:	711a      	strb	r2, [r3, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d006      	beq.n	80069fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f8:	711a      	strb	r2, [r3, #4]
 80069fa:	2200      	movs	r2, #0
 80069fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2243      	movs	r2, #67	; 0x43
 8006a02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006a04:	4b02      	ldr	r3, [pc, #8]	; (8006a10 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3718      	adds	r7, #24
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	20000068 	.word	0x20000068

08006a14 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b083      	sub	sp, #12
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	220a      	movs	r2, #10
 8006a20:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006a22:	4b03      	ldr	r3, [pc, #12]	; (8006a30 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	370c      	adds	r7, #12
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20000024 	.word	0x20000024

08006a34 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006a44:	2303      	movs	r3, #3
 8006a46:	e009      	b.n	8006a5c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006a4e:	687a      	ldr	r2, [r7, #4]
 8006a50:	33b0      	adds	r3, #176	; 0xb0
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4413      	add	r3, r2
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b087      	sub	sp, #28
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	60b9      	str	r1, [r7, #8]
 8006a72:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	32b0      	adds	r2, #176	; 0xb0
 8006a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a82:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d101      	bne.n	8006a8e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e008      	b.n	8006aa0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	687a      	ldr	r2, [r7, #4]
 8006a9a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8006a9e:	2300      	movs	r3, #0
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	371c      	adds	r7, #28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aaa:	4770      	bx	lr

08006aac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b085      	sub	sp, #20
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	32b0      	adds	r2, #176	; 0xb0
 8006ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ac4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d101      	bne.n	8006ad0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006acc:	2303      	movs	r3, #3
 8006ace:	e004      	b.n	8006ada <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006ad8:	2300      	movs	r3, #0
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
	...

08006ae8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	32b0      	adds	r2, #176	; 0xb0
 8006afa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8006b00:	2301      	movs	r3, #1
 8006b02:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	32b0      	adds	r2, #176	; 0xb0
 8006b0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d101      	bne.n	8006b1a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e025      	b.n	8006b66 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d11f      	bne.n	8006b64 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2201      	movs	r2, #1
 8006b28:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8006b2c:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <USBD_CDC_TransmitPacket+0x88>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	f003 020f 	and.w	r2, r3, #15
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	009b      	lsls	r3, r3, #2
 8006b40:	4413      	add	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4403      	add	r3, r0
 8006b46:	3318      	adds	r3, #24
 8006b48:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8006b4a:	4b09      	ldr	r3, [pc, #36]	; (8006b70 <USBD_CDC_TransmitPacket+0x88>)
 8006b4c:	7819      	ldrb	r1, [r3, #0]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 ffc9 	bl	8008af2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8006b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	200000ab 	.word	0x200000ab

08006b74 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006b74:	b580      	push	{r7, lr}
 8006b76:	b084      	sub	sp, #16
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	32b0      	adds	r2, #176	; 0xb0
 8006b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	32b0      	adds	r2, #176	; 0xb0
 8006b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d101      	bne.n	8006ba2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006b9e:	2303      	movs	r3, #3
 8006ba0:	e018      	b.n	8006bd4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	7c1b      	ldrb	r3, [r3, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10a      	bne.n	8006bc0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006baa:	4b0c      	ldr	r3, [pc, #48]	; (8006bdc <USBD_CDC_ReceivePacket+0x68>)
 8006bac:	7819      	ldrb	r1, [r3, #0]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f001 ffbb 	bl	8008b34 <USBD_LL_PrepareReceive>
 8006bbe:	e008      	b.n	8006bd2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006bc0:	4b06      	ldr	r3, [pc, #24]	; (8006bdc <USBD_CDC_ReceivePacket+0x68>)
 8006bc2:	7819      	ldrb	r1, [r3, #0]
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006bca:	2340      	movs	r3, #64	; 0x40
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f001 ffb1 	bl	8008b34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006bd2:	2300      	movs	r3, #0
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3710      	adds	r7, #16
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	200000ac 	.word	0x200000ac

08006be0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	4613      	mov	r3, r2
 8006bec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006bf4:	2303      	movs	r3, #3
 8006bf6:	e01f      	b.n	8006c38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2201      	movs	r2, #1
 8006c22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	79fa      	ldrb	r2, [r7, #7]
 8006c2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f001 fe2b 	bl	8008888 <USBD_LL_Init>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006c36:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d101      	bne.n	8006c58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e025      	b.n	8006ca4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	32ae      	adds	r2, #174	; 0xae
 8006c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00f      	beq.n	8006c94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	32ae      	adds	r2, #174	; 0xae
 8006c7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c84:	f107 020e 	add.w	r2, r7, #14
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006ca2:	2300      	movs	r3, #0
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006cb4:	6878      	ldr	r0, [r7, #4]
 8006cb6:	f001 fe33 	bl	8008920 <USBD_LL_Start>
 8006cba:	4603      	mov	r3, r0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3708      	adds	r7, #8
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	bd80      	pop	{r7, pc}

08006cc4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006ccc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d009      	beq.n	8006d08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	78fa      	ldrb	r2, [r7, #3]
 8006cfe:	4611      	mov	r1, r2
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	4798      	blx	r3
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	78fa      	ldrb	r2, [r7, #3]
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d001      	beq.n	8006d3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006d38:	2303      	movs	r3, #3
 8006d3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3710      	adds	r7, #16
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b084      	sub	sp, #16
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f001 f908 	bl	8007f6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006d7a:	f003 031f 	and.w	r3, r3, #31
 8006d7e:	2b02      	cmp	r3, #2
 8006d80:	d01a      	beq.n	8006db8 <USBD_LL_SetupStage+0x72>
 8006d82:	2b02      	cmp	r3, #2
 8006d84:	d822      	bhi.n	8006dcc <USBD_LL_SetupStage+0x86>
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <USBD_LL_SetupStage+0x4a>
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d00a      	beq.n	8006da4 <USBD_LL_SetupStage+0x5e>
 8006d8e:	e01d      	b.n	8006dcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006d96:	4619      	mov	r1, r3
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 fb5f 	bl	800745c <USBD_StdDevReq>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	73fb      	strb	r3, [r7, #15]
      break;
 8006da2:	e020      	b.n	8006de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006daa:	4619      	mov	r1, r3
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fbc7 	bl	8007540 <USBD_StdItfReq>
 8006db2:	4603      	mov	r3, r0
 8006db4:	73fb      	strb	r3, [r7, #15]
      break;
 8006db6:	e016      	b.n	8006de6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fc29 	bl	8007618 <USBD_StdEPReq>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006dca:	e00c      	b.n	8006de6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006dd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	4619      	mov	r1, r3
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f001 fe00 	bl	80089e0 <USBD_LL_StallEP>
 8006de0:	4603      	mov	r3, r0
 8006de2:	73fb      	strb	r3, [r7, #15]
      break;
 8006de4:	bf00      	nop
  }

  return ret;
 8006de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3710      	adds	r7, #16
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}

08006df0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b086      	sub	sp, #24
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	60f8      	str	r0, [r7, #12]
 8006df8:	460b      	mov	r3, r1
 8006dfa:	607a      	str	r2, [r7, #4]
 8006dfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006e02:	7afb      	ldrb	r3, [r7, #11]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d16e      	bne.n	8006ee6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006e0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	f040 8098 	bne.w	8006f4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	689a      	ldr	r2, [r3, #8]
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d913      	bls.n	8006e50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	68db      	ldr	r3, [r3, #12]
 8006e30:	1ad2      	subs	r2, r2, r3
 8006e32:	693b      	ldr	r3, [r7, #16]
 8006e34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	bf28      	it	cs
 8006e42:	4613      	movcs	r3, r2
 8006e44:	461a      	mov	r2, r3
 8006e46:	6879      	ldr	r1, [r7, #4]
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f001 f984 	bl	8008156 <USBD_CtlContinueRx>
 8006e4e:	e07d      	b.n	8006f4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	2b02      	cmp	r3, #2
 8006e5c:	d014      	beq.n	8006e88 <USBD_LL_DataOutStage+0x98>
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d81d      	bhi.n	8006e9e <USBD_LL_DataOutStage+0xae>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <USBD_LL_DataOutStage+0x7c>
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d003      	beq.n	8006e72 <USBD_LL_DataOutStage+0x82>
 8006e6a:	e018      	b.n	8006e9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	75bb      	strb	r3, [r7, #22]
            break;
 8006e70:	e018      	b.n	8006ea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	68f8      	ldr	r0, [r7, #12]
 8006e7e:	f000 fa5e 	bl	800733e <USBD_CoreFindIF>
 8006e82:	4603      	mov	r3, r0
 8006e84:	75bb      	strb	r3, [r7, #22]
            break;
 8006e86:	e00d      	b.n	8006ea4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	4619      	mov	r1, r3
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	f000 fa60 	bl	8007358 <USBD_CoreFindEP>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	75bb      	strb	r3, [r7, #22]
            break;
 8006e9c:	e002      	b.n	8006ea4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	75bb      	strb	r3, [r7, #22]
            break;
 8006ea2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006ea4:	7dbb      	ldrb	r3, [r7, #22]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d119      	bne.n	8006ede <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	2b03      	cmp	r3, #3
 8006eb4:	d113      	bne.n	8006ede <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006eb6:	7dba      	ldrb	r2, [r7, #22]
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	32ae      	adds	r2, #174	; 0xae
 8006ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d00b      	beq.n	8006ede <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006ec6:	7dba      	ldrb	r2, [r7, #22]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006ece:	7dba      	ldrb	r2, [r7, #22]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	32ae      	adds	r2, #174	; 0xae
 8006ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f001 f94a 	bl	8008178 <USBD_CtlSendStatus>
 8006ee4:	e032      	b.n	8006f4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006ee6:	7afb      	ldrb	r3, [r7, #11]
 8006ee8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	4619      	mov	r1, r3
 8006ef0:	68f8      	ldr	r0, [r7, #12]
 8006ef2:	f000 fa31 	bl	8007358 <USBD_CoreFindEP>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006efa:	7dbb      	ldrb	r3, [r7, #22]
 8006efc:	2bff      	cmp	r3, #255	; 0xff
 8006efe:	d025      	beq.n	8006f4c <USBD_LL_DataOutStage+0x15c>
 8006f00:	7dbb      	ldrb	r3, [r7, #22]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d122      	bne.n	8006f4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d117      	bne.n	8006f42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006f12:	7dba      	ldrb	r2, [r7, #22]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	32ae      	adds	r2, #174	; 0xae
 8006f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d00f      	beq.n	8006f42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006f22:	7dba      	ldrb	r2, [r7, #22]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006f2a:	7dba      	ldrb	r2, [r7, #22]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	32ae      	adds	r2, #174	; 0xae
 8006f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	7afa      	ldrb	r2, [r7, #11]
 8006f38:	4611      	mov	r1, r2
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	4798      	blx	r3
 8006f3e:	4603      	mov	r3, r0
 8006f40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006f48:	7dfb      	ldrb	r3, [r7, #23]
 8006f4a:	e000      	b.n	8006f4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006f4c:	2300      	movs	r3, #0
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b086      	sub	sp, #24
 8006f5a:	af00      	add	r7, sp, #0
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	460b      	mov	r3, r1
 8006f60:	607a      	str	r2, [r7, #4]
 8006f62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006f64:	7afb      	ldrb	r3, [r7, #11]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d16f      	bne.n	800704a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	3314      	adds	r3, #20
 8006f6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f76:	2b02      	cmp	r3, #2
 8006f78:	d15a      	bne.n	8007030 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	689a      	ldr	r2, [r3, #8]
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d914      	bls.n	8006fb0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	1ad2      	subs	r2, r2, r3
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f001 f8ac 	bl	80080fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	2100      	movs	r1, #0
 8006fa8:	68f8      	ldr	r0, [r7, #12]
 8006faa:	f001 fdc3 	bl	8008b34 <USBD_LL_PrepareReceive>
 8006fae:	e03f      	b.n	8007030 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d11c      	bne.n	8006ff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d316      	bcc.n	8006ff6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006fc8:	693b      	ldr	r3, [r7, #16]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d20f      	bcs.n	8006ff6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2100      	movs	r1, #0
 8006fda:	68f8      	ldr	r0, [r7, #12]
 8006fdc:	f001 f88d 	bl	80080fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fe8:	2300      	movs	r3, #0
 8006fea:	2200      	movs	r2, #0
 8006fec:	2100      	movs	r1, #0
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f001 fda0 	bl	8008b34 <USBD_LL_PrepareReceive>
 8006ff4:	e01c      	b.n	8007030 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ffc:	b2db      	uxtb	r3, r3
 8006ffe:	2b03      	cmp	r3, #3
 8007000:	d10f      	bne.n	8007022 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d009      	beq.n	8007022 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	2200      	movs	r2, #0
 8007012:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800701c:	68db      	ldr	r3, [r3, #12]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007022:	2180      	movs	r1, #128	; 0x80
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f001 fcdb 	bl	80089e0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f001 f8b7 	bl	800819e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d03a      	beq.n	80070b0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fe42 	bl	8006cc4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007048:	e032      	b.n	80070b0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800704a:	7afb      	ldrb	r3, [r7, #11]
 800704c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007050:	b2db      	uxtb	r3, r3
 8007052:	4619      	mov	r1, r3
 8007054:	68f8      	ldr	r0, [r7, #12]
 8007056:	f000 f97f 	bl	8007358 <USBD_CoreFindEP>
 800705a:	4603      	mov	r3, r0
 800705c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800705e:	7dfb      	ldrb	r3, [r7, #23]
 8007060:	2bff      	cmp	r3, #255	; 0xff
 8007062:	d025      	beq.n	80070b0 <USBD_LL_DataInStage+0x15a>
 8007064:	7dfb      	ldrb	r3, [r7, #23]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d122      	bne.n	80070b0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007070:	b2db      	uxtb	r3, r3
 8007072:	2b03      	cmp	r3, #3
 8007074:	d11c      	bne.n	80070b0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007076:	7dfa      	ldrb	r2, [r7, #23]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	32ae      	adds	r2, #174	; 0xae
 800707c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d014      	beq.n	80070b0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007086:	7dfa      	ldrb	r2, [r7, #23]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800708e:	7dfa      	ldrb	r2, [r7, #23]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	32ae      	adds	r2, #174	; 0xae
 8007094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007098:	695b      	ldr	r3, [r3, #20]
 800709a:	7afa      	ldrb	r2, [r7, #11]
 800709c:	4611      	mov	r1, r2
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	4798      	blx	r3
 80070a2:	4603      	mov	r3, r0
 80070a4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80070a6:	7dbb      	ldrb	r3, [r7, #22]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80070ac:	7dbb      	ldrb	r3, [r7, #22]
 80070ae:	e000      	b.n	80070b2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2200      	movs	r2, #0
 80070da:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d014      	beq.n	8007120 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00e      	beq.n	8007120 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6852      	ldr	r2, [r2, #4]
 800710e:	b2d2      	uxtb	r2, r2
 8007110:	4611      	mov	r1, r2
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	4798      	blx	r3
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d001      	beq.n	8007120 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800711c:	2303      	movs	r3, #3
 800711e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007120:	2340      	movs	r3, #64	; 0x40
 8007122:	2200      	movs	r2, #0
 8007124:	2100      	movs	r1, #0
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f001 fc15 	bl	8008956 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2240      	movs	r2, #64	; 0x40
 8007138:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800713c:	2340      	movs	r3, #64	; 0x40
 800713e:	2200      	movs	r2, #0
 8007140:	2180      	movs	r1, #128	; 0x80
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f001 fc07 	bl	8008956 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2240      	movs	r2, #64	; 0x40
 8007152:	621a      	str	r2, [r3, #32]

  return ret;
 8007154:	7bfb      	ldrb	r3, [r7, #15]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
 8007166:	460b      	mov	r3, r1
 8007168:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	78fa      	ldrb	r2, [r7, #3]
 800716e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007170:	2300      	movs	r3, #0
}
 8007172:	4618      	mov	r0, r3
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800717e:	b480      	push	{r7}
 8007180:	b083      	sub	sp, #12
 8007182:	af00      	add	r7, sp, #0
 8007184:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718c:	b2da      	uxtb	r2, r3
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2204      	movs	r2, #4
 8007198:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800719c:	2300      	movs	r3, #0
}
 800719e:	4618      	mov	r0, r3
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr

080071aa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80071aa:	b480      	push	{r7}
 80071ac:	b083      	sub	sp, #12
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d106      	bne.n	80071cc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	370c      	adds	r7, #12
 80071d2:	46bd      	mov	sp, r7
 80071d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d8:	4770      	bx	lr

080071da <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b082      	sub	sp, #8
 80071de:	af00      	add	r7, sp, #0
 80071e0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b03      	cmp	r3, #3
 80071ec:	d110      	bne.n	8007210 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00b      	beq.n	8007210 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d005      	beq.n	8007210 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720a:	69db      	ldr	r3, [r3, #28]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800721a:	b580      	push	{r7, lr}
 800721c:	b082      	sub	sp, #8
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
 8007222:	460b      	mov	r3, r1
 8007224:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	32ae      	adds	r2, #174	; 0xae
 8007230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007238:	2303      	movs	r3, #3
 800723a:	e01c      	b.n	8007276 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b03      	cmp	r3, #3
 8007246:	d115      	bne.n	8007274 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	32ae      	adds	r2, #174	; 0xae
 8007252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00b      	beq.n	8007274 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	32ae      	adds	r2, #174	; 0xae
 8007266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800726a:	6a1b      	ldr	r3, [r3, #32]
 800726c:	78fa      	ldrb	r2, [r7, #3]
 800726e:	4611      	mov	r1, r2
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3708      	adds	r7, #8
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}

0800727e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800727e:	b580      	push	{r7, lr}
 8007280:	b082      	sub	sp, #8
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
 8007286:	460b      	mov	r3, r1
 8007288:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	32ae      	adds	r2, #174	; 0xae
 8007294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	d101      	bne.n	80072a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	e01c      	b.n	80072da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	2b03      	cmp	r3, #3
 80072aa:	d115      	bne.n	80072d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	32ae      	adds	r2, #174	; 0xae
 80072b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d00b      	beq.n	80072d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	32ae      	adds	r2, #174	; 0xae
 80072ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d0:	78fa      	ldrb	r2, [r7, #3]
 80072d2:	4611      	mov	r1, r2
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007312:	2b00      	cmp	r3, #0
 8007314:	d00e      	beq.n	8007334 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	6852      	ldr	r2, [r2, #4]
 8007322:	b2d2      	uxtb	r2, r2
 8007324:	4611      	mov	r1, r2
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4798      	blx	r3
 800732a:	4603      	mov	r3, r0
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007330:	2303      	movs	r3, #3
 8007332:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007334:	7bfb      	ldrb	r3, [r7, #15]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3710      	adds	r7, #16
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800734a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800734c:	4618      	mov	r0, r3
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007364:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007366:	4618      	mov	r0, r3
 8007368:	370c      	adds	r7, #12
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b086      	sub	sp, #24
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
 800737a:	460b      	mov	r3, r1
 800737c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007386:	2300      	movs	r3, #0
 8007388:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	885b      	ldrh	r3, [r3, #2]
 800738e:	b29a      	uxth	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	b29b      	uxth	r3, r3
 8007396:	429a      	cmp	r2, r3
 8007398:	d920      	bls.n	80073dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80073a2:	e013      	b.n	80073cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80073a4:	f107 030a 	add.w	r3, r7, #10
 80073a8:	4619      	mov	r1, r3
 80073aa:	6978      	ldr	r0, [r7, #20]
 80073ac:	f000 f81b 	bl	80073e6 <USBD_GetNextDesc>
 80073b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	785b      	ldrb	r3, [r3, #1]
 80073b6:	2b05      	cmp	r3, #5
 80073b8:	d108      	bne.n	80073cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	789b      	ldrb	r3, [r3, #2]
 80073c2:	78fa      	ldrb	r2, [r7, #3]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d008      	beq.n	80073da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80073c8:	2300      	movs	r3, #0
 80073ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	885b      	ldrh	r3, [r3, #2]
 80073d0:	b29a      	uxth	r2, r3
 80073d2:	897b      	ldrh	r3, [r7, #10]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d8e5      	bhi.n	80073a4 <USBD_GetEpDesc+0x32>
 80073d8:	e000      	b.n	80073dc <USBD_GetEpDesc+0x6a>
          break;
 80073da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80073dc:	693b      	ldr	r3, [r7, #16]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3718      	adds	r7, #24
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	881a      	ldrh	r2, [r3, #0]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	4413      	add	r3, r2
 8007400:	b29a      	uxth	r2, r3
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	781b      	ldrb	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4413      	add	r3, r2
 8007410:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007412:	68fb      	ldr	r3, [r7, #12]
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	3301      	adds	r3, #1
 8007436:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800743e:	8a3b      	ldrh	r3, [r7, #16]
 8007440:	021b      	lsls	r3, r3, #8
 8007442:	b21a      	sxth	r2, r3
 8007444:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007448:	4313      	orrs	r3, r2
 800744a:	b21b      	sxth	r3, r3
 800744c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800744e:	89fb      	ldrh	r3, [r7, #14]
}
 8007450:	4618      	mov	r0, r3
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007466:	2300      	movs	r3, #0
 8007468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007472:	2b40      	cmp	r3, #64	; 0x40
 8007474:	d005      	beq.n	8007482 <USBD_StdDevReq+0x26>
 8007476:	2b40      	cmp	r3, #64	; 0x40
 8007478:	d857      	bhi.n	800752a <USBD_StdDevReq+0xce>
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00f      	beq.n	800749e <USBD_StdDevReq+0x42>
 800747e:	2b20      	cmp	r3, #32
 8007480:	d153      	bne.n	800752a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	32ae      	adds	r2, #174	; 0xae
 800748c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	6839      	ldr	r1, [r7, #0]
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	4798      	blx	r3
 8007498:	4603      	mov	r3, r0
 800749a:	73fb      	strb	r3, [r7, #15]
      break;
 800749c:	e04a      	b.n	8007534 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	785b      	ldrb	r3, [r3, #1]
 80074a2:	2b09      	cmp	r3, #9
 80074a4:	d83b      	bhi.n	800751e <USBD_StdDevReq+0xc2>
 80074a6:	a201      	add	r2, pc, #4	; (adr r2, 80074ac <USBD_StdDevReq+0x50>)
 80074a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ac:	08007501 	.word	0x08007501
 80074b0:	08007515 	.word	0x08007515
 80074b4:	0800751f 	.word	0x0800751f
 80074b8:	0800750b 	.word	0x0800750b
 80074bc:	0800751f 	.word	0x0800751f
 80074c0:	080074df 	.word	0x080074df
 80074c4:	080074d5 	.word	0x080074d5
 80074c8:	0800751f 	.word	0x0800751f
 80074cc:	080074f7 	.word	0x080074f7
 80074d0:	080074e9 	.word	0x080074e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80074d4:	6839      	ldr	r1, [r7, #0]
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fa3c 	bl	8007954 <USBD_GetDescriptor>
          break;
 80074dc:	e024      	b.n	8007528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80074de:	6839      	ldr	r1, [r7, #0]
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 fba1 	bl	8007c28 <USBD_SetAddress>
          break;
 80074e6:	e01f      	b.n	8007528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80074e8:	6839      	ldr	r1, [r7, #0]
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 fbe0 	bl	8007cb0 <USBD_SetConfig>
 80074f0:	4603      	mov	r3, r0
 80074f2:	73fb      	strb	r3, [r7, #15]
          break;
 80074f4:	e018      	b.n	8007528 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80074f6:	6839      	ldr	r1, [r7, #0]
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f000 fc83 	bl	8007e04 <USBD_GetConfig>
          break;
 80074fe:	e013      	b.n	8007528 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fcb4 	bl	8007e70 <USBD_GetStatus>
          break;
 8007508:	e00e      	b.n	8007528 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fce3 	bl	8007ed8 <USBD_SetFeature>
          break;
 8007512:	e009      	b.n	8007528 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007514:	6839      	ldr	r1, [r7, #0]
 8007516:	6878      	ldr	r0, [r7, #4]
 8007518:	f000 fd07 	bl	8007f2a <USBD_ClrFeature>
          break;
 800751c:	e004      	b.n	8007528 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800751e:	6839      	ldr	r1, [r7, #0]
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f000 fd5e 	bl	8007fe2 <USBD_CtlError>
          break;
 8007526:	bf00      	nop
      }
      break;
 8007528:	e004      	b.n	8007534 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fd58 	bl	8007fe2 <USBD_CtlError>
      break;
 8007532:	bf00      	nop
  }

  return ret;
 8007534:	7bfb      	ldrb	r3, [r7, #15]
}
 8007536:	4618      	mov	r0, r3
 8007538:	3710      	adds	r7, #16
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop

08007540 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b084      	sub	sp, #16
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007556:	2b40      	cmp	r3, #64	; 0x40
 8007558:	d005      	beq.n	8007566 <USBD_StdItfReq+0x26>
 800755a:	2b40      	cmp	r3, #64	; 0x40
 800755c:	d852      	bhi.n	8007604 <USBD_StdItfReq+0xc4>
 800755e:	2b00      	cmp	r3, #0
 8007560:	d001      	beq.n	8007566 <USBD_StdItfReq+0x26>
 8007562:	2b20      	cmp	r3, #32
 8007564:	d14e      	bne.n	8007604 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	2b02      	cmp	r3, #2
 8007572:	d840      	bhi.n	80075f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	889b      	ldrh	r3, [r3, #4]
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b01      	cmp	r3, #1
 800757c:	d836      	bhi.n	80075ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	889b      	ldrh	r3, [r3, #4]
 8007582:	b2db      	uxtb	r3, r3
 8007584:	4619      	mov	r1, r3
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7ff fed9 	bl	800733e <USBD_CoreFindIF>
 800758c:	4603      	mov	r3, r0
 800758e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007590:	7bbb      	ldrb	r3, [r7, #14]
 8007592:	2bff      	cmp	r3, #255	; 0xff
 8007594:	d01d      	beq.n	80075d2 <USBD_StdItfReq+0x92>
 8007596:	7bbb      	ldrb	r3, [r7, #14]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d11a      	bne.n	80075d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800759c:	7bba      	ldrb	r2, [r7, #14]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	32ae      	adds	r2, #174	; 0xae
 80075a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075a6:	689b      	ldr	r3, [r3, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00f      	beq.n	80075cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80075ac:	7bba      	ldrb	r2, [r7, #14]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80075b4:	7bba      	ldrb	r2, [r7, #14]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	32ae      	adds	r2, #174	; 0xae
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	6839      	ldr	r1, [r7, #0]
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	4798      	blx	r3
 80075c6:	4603      	mov	r3, r0
 80075c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075ca:	e004      	b.n	80075d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80075cc:	2303      	movs	r3, #3
 80075ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80075d0:	e001      	b.n	80075d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80075d2:	2303      	movs	r3, #3
 80075d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	88db      	ldrh	r3, [r3, #6]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d110      	bne.n	8007600 <USBD_StdItfReq+0xc0>
 80075de:	7bfb      	ldrb	r3, [r7, #15]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d10d      	bne.n	8007600 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fdc7 	bl	8008178 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80075ea:	e009      	b.n	8007600 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fcf7 	bl	8007fe2 <USBD_CtlError>
          break;
 80075f4:	e004      	b.n	8007600 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fcf2 	bl	8007fe2 <USBD_CtlError>
          break;
 80075fe:	e000      	b.n	8007602 <USBD_StdItfReq+0xc2>
          break;
 8007600:	bf00      	nop
      }
      break;
 8007602:	e004      	b.n	800760e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007604:	6839      	ldr	r1, [r7, #0]
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 fceb 	bl	8007fe2 <USBD_CtlError>
      break;
 800760c:	bf00      	nop
  }

  return ret;
 800760e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3710      	adds	r7, #16
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007622:	2300      	movs	r3, #0
 8007624:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	889b      	ldrh	r3, [r3, #4]
 800762a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007634:	2b40      	cmp	r3, #64	; 0x40
 8007636:	d007      	beq.n	8007648 <USBD_StdEPReq+0x30>
 8007638:	2b40      	cmp	r3, #64	; 0x40
 800763a:	f200 817f 	bhi.w	800793c <USBD_StdEPReq+0x324>
 800763e:	2b00      	cmp	r3, #0
 8007640:	d02a      	beq.n	8007698 <USBD_StdEPReq+0x80>
 8007642:	2b20      	cmp	r3, #32
 8007644:	f040 817a 	bne.w	800793c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007648:	7bbb      	ldrb	r3, [r7, #14]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7ff fe83 	bl	8007358 <USBD_CoreFindEP>
 8007652:	4603      	mov	r3, r0
 8007654:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007656:	7b7b      	ldrb	r3, [r7, #13]
 8007658:	2bff      	cmp	r3, #255	; 0xff
 800765a:	f000 8174 	beq.w	8007946 <USBD_StdEPReq+0x32e>
 800765e:	7b7b      	ldrb	r3, [r7, #13]
 8007660:	2b00      	cmp	r3, #0
 8007662:	f040 8170 	bne.w	8007946 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007666:	7b7a      	ldrb	r2, [r7, #13]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800766e:	7b7a      	ldrb	r2, [r7, #13]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	32ae      	adds	r2, #174	; 0xae
 8007674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	2b00      	cmp	r3, #0
 800767c:	f000 8163 	beq.w	8007946 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007680:	7b7a      	ldrb	r2, [r7, #13]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	32ae      	adds	r2, #174	; 0xae
 8007686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	6839      	ldr	r1, [r7, #0]
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	4798      	blx	r3
 8007692:	4603      	mov	r3, r0
 8007694:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007696:	e156      	b.n	8007946 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	785b      	ldrb	r3, [r3, #1]
 800769c:	2b03      	cmp	r3, #3
 800769e:	d008      	beq.n	80076b2 <USBD_StdEPReq+0x9a>
 80076a0:	2b03      	cmp	r3, #3
 80076a2:	f300 8145 	bgt.w	8007930 <USBD_StdEPReq+0x318>
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	f000 809b 	beq.w	80077e2 <USBD_StdEPReq+0x1ca>
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	d03c      	beq.n	800772a <USBD_StdEPReq+0x112>
 80076b0:	e13e      	b.n	8007930 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	2b02      	cmp	r3, #2
 80076bc:	d002      	beq.n	80076c4 <USBD_StdEPReq+0xac>
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d016      	beq.n	80076f0 <USBD_StdEPReq+0xd8>
 80076c2:	e02c      	b.n	800771e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80076c4:	7bbb      	ldrb	r3, [r7, #14]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d00d      	beq.n	80076e6 <USBD_StdEPReq+0xce>
 80076ca:	7bbb      	ldrb	r3, [r7, #14]
 80076cc:	2b80      	cmp	r3, #128	; 0x80
 80076ce:	d00a      	beq.n	80076e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80076d0:	7bbb      	ldrb	r3, [r7, #14]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f001 f983 	bl	80089e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80076da:	2180      	movs	r1, #128	; 0x80
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 f97f 	bl	80089e0 <USBD_LL_StallEP>
 80076e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80076e4:	e020      	b.n	8007728 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80076e6:	6839      	ldr	r1, [r7, #0]
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 fc7a 	bl	8007fe2 <USBD_CtlError>
              break;
 80076ee:	e01b      	b.n	8007728 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	885b      	ldrh	r3, [r3, #2]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d10e      	bne.n	8007716 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80076f8:	7bbb      	ldrb	r3, [r7, #14]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00b      	beq.n	8007716 <USBD_StdEPReq+0xfe>
 80076fe:	7bbb      	ldrb	r3, [r7, #14]
 8007700:	2b80      	cmp	r3, #128	; 0x80
 8007702:	d008      	beq.n	8007716 <USBD_StdEPReq+0xfe>
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	88db      	ldrh	r3, [r3, #6]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d104      	bne.n	8007716 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800770c:	7bbb      	ldrb	r3, [r7, #14]
 800770e:	4619      	mov	r1, r3
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 f965 	bl	80089e0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f000 fd2e 	bl	8008178 <USBD_CtlSendStatus>

              break;
 800771c:	e004      	b.n	8007728 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800771e:	6839      	ldr	r1, [r7, #0]
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 fc5e 	bl	8007fe2 <USBD_CtlError>
              break;
 8007726:	bf00      	nop
          }
          break;
 8007728:	e107      	b.n	800793a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007730:	b2db      	uxtb	r3, r3
 8007732:	2b02      	cmp	r3, #2
 8007734:	d002      	beq.n	800773c <USBD_StdEPReq+0x124>
 8007736:	2b03      	cmp	r3, #3
 8007738:	d016      	beq.n	8007768 <USBD_StdEPReq+0x150>
 800773a:	e04b      	b.n	80077d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800773c:	7bbb      	ldrb	r3, [r7, #14]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00d      	beq.n	800775e <USBD_StdEPReq+0x146>
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	2b80      	cmp	r3, #128	; 0x80
 8007746:	d00a      	beq.n	800775e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007748:	7bbb      	ldrb	r3, [r7, #14]
 800774a:	4619      	mov	r1, r3
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f001 f947 	bl	80089e0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007752:	2180      	movs	r1, #128	; 0x80
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f001 f943 	bl	80089e0 <USBD_LL_StallEP>
 800775a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800775c:	e040      	b.n	80077e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800775e:	6839      	ldr	r1, [r7, #0]
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f000 fc3e 	bl	8007fe2 <USBD_CtlError>
              break;
 8007766:	e03b      	b.n	80077e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	885b      	ldrh	r3, [r3, #2]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d136      	bne.n	80077de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007770:	7bbb      	ldrb	r3, [r7, #14]
 8007772:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007776:	2b00      	cmp	r3, #0
 8007778:	d004      	beq.n	8007784 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	4619      	mov	r1, r3
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f001 f94d 	bl	8008a1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fcf7 	bl	8008178 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800778a:	7bbb      	ldrb	r3, [r7, #14]
 800778c:	4619      	mov	r1, r3
 800778e:	6878      	ldr	r0, [r7, #4]
 8007790:	f7ff fde2 	bl	8007358 <USBD_CoreFindEP>
 8007794:	4603      	mov	r3, r0
 8007796:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007798:	7b7b      	ldrb	r3, [r7, #13]
 800779a:	2bff      	cmp	r3, #255	; 0xff
 800779c:	d01f      	beq.n	80077de <USBD_StdEPReq+0x1c6>
 800779e:	7b7b      	ldrb	r3, [r7, #13]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d11c      	bne.n	80077de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80077a4:	7b7a      	ldrb	r2, [r7, #13]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80077ac:	7b7a      	ldrb	r2, [r7, #13]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	32ae      	adds	r2, #174	; 0xae
 80077b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d010      	beq.n	80077de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80077bc:	7b7a      	ldrb	r2, [r7, #13]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	32ae      	adds	r2, #174	; 0xae
 80077c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	6839      	ldr	r1, [r7, #0]
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	4798      	blx	r3
 80077ce:	4603      	mov	r3, r0
 80077d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80077d2:	e004      	b.n	80077de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80077d4:	6839      	ldr	r1, [r7, #0]
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fc03 	bl	8007fe2 <USBD_CtlError>
              break;
 80077dc:	e000      	b.n	80077e0 <USBD_StdEPReq+0x1c8>
              break;
 80077de:	bf00      	nop
          }
          break;
 80077e0:	e0ab      	b.n	800793a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d002      	beq.n	80077f4 <USBD_StdEPReq+0x1dc>
 80077ee:	2b03      	cmp	r3, #3
 80077f0:	d032      	beq.n	8007858 <USBD_StdEPReq+0x240>
 80077f2:	e097      	b.n	8007924 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80077f4:	7bbb      	ldrb	r3, [r7, #14]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d007      	beq.n	800780a <USBD_StdEPReq+0x1f2>
 80077fa:	7bbb      	ldrb	r3, [r7, #14]
 80077fc:	2b80      	cmp	r3, #128	; 0x80
 80077fe:	d004      	beq.n	800780a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007800:	6839      	ldr	r1, [r7, #0]
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fbed 	bl	8007fe2 <USBD_CtlError>
                break;
 8007808:	e091      	b.n	800792e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800780a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800780e:	2b00      	cmp	r3, #0
 8007810:	da0b      	bge.n	800782a <USBD_StdEPReq+0x212>
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007818:	4613      	mov	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4413      	add	r3, r2
 800781e:	009b      	lsls	r3, r3, #2
 8007820:	3310      	adds	r3, #16
 8007822:	687a      	ldr	r2, [r7, #4]
 8007824:	4413      	add	r3, r2
 8007826:	3304      	adds	r3, #4
 8007828:	e00b      	b.n	8007842 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800782a:	7bbb      	ldrb	r3, [r7, #14]
 800782c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007830:	4613      	mov	r3, r2
 8007832:	009b      	lsls	r3, r3, #2
 8007834:	4413      	add	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800783c:	687a      	ldr	r2, [r7, #4]
 800783e:	4413      	add	r3, r2
 8007840:	3304      	adds	r3, #4
 8007842:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	2200      	movs	r2, #0
 8007848:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	2202      	movs	r2, #2
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 fc37 	bl	80080c4 <USBD_CtlSendData>
              break;
 8007856:	e06a      	b.n	800792e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007858:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800785c:	2b00      	cmp	r3, #0
 800785e:	da11      	bge.n	8007884 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007860:	7bbb      	ldrb	r3, [r7, #14]
 8007862:	f003 020f 	and.w	r2, r3, #15
 8007866:	6879      	ldr	r1, [r7, #4]
 8007868:	4613      	mov	r3, r2
 800786a:	009b      	lsls	r3, r3, #2
 800786c:	4413      	add	r3, r2
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	440b      	add	r3, r1
 8007872:	3324      	adds	r3, #36	; 0x24
 8007874:	881b      	ldrh	r3, [r3, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d117      	bne.n	80078aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800787a:	6839      	ldr	r1, [r7, #0]
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f000 fbb0 	bl	8007fe2 <USBD_CtlError>
                  break;
 8007882:	e054      	b.n	800792e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007884:	7bbb      	ldrb	r3, [r7, #14]
 8007886:	f003 020f 	and.w	r2, r3, #15
 800788a:	6879      	ldr	r1, [r7, #4]
 800788c:	4613      	mov	r3, r2
 800788e:	009b      	lsls	r3, r3, #2
 8007890:	4413      	add	r3, r2
 8007892:	009b      	lsls	r3, r3, #2
 8007894:	440b      	add	r3, r1
 8007896:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d104      	bne.n	80078aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80078a0:	6839      	ldr	r1, [r7, #0]
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	f000 fb9d 	bl	8007fe2 <USBD_CtlError>
                  break;
 80078a8:	e041      	b.n	800792e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	da0b      	bge.n	80078ca <USBD_StdEPReq+0x2b2>
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80078b8:	4613      	mov	r3, r2
 80078ba:	009b      	lsls	r3, r3, #2
 80078bc:	4413      	add	r3, r2
 80078be:	009b      	lsls	r3, r3, #2
 80078c0:	3310      	adds	r3, #16
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	4413      	add	r3, r2
 80078c6:	3304      	adds	r3, #4
 80078c8:	e00b      	b.n	80078e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80078d0:	4613      	mov	r3, r2
 80078d2:	009b      	lsls	r3, r3, #2
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	4413      	add	r3, r2
 80078e0:	3304      	adds	r3, #4
 80078e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80078e4:	7bbb      	ldrb	r3, [r7, #14]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d002      	beq.n	80078f0 <USBD_StdEPReq+0x2d8>
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b80      	cmp	r3, #128	; 0x80
 80078ee:	d103      	bne.n	80078f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2200      	movs	r2, #0
 80078f4:	601a      	str	r2, [r3, #0]
 80078f6:	e00e      	b.n	8007916 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80078f8:	7bbb      	ldrb	r3, [r7, #14]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 f8ad 	bl	8008a5c <USBD_LL_IsStallEP>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d003      	beq.n	8007910 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	2201      	movs	r2, #1
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	e002      	b.n	8007916 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	2202      	movs	r2, #2
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fbd1 	bl	80080c4 <USBD_CtlSendData>
              break;
 8007922:	e004      	b.n	800792e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007924:	6839      	ldr	r1, [r7, #0]
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fb5b 	bl	8007fe2 <USBD_CtlError>
              break;
 800792c:	bf00      	nop
          }
          break;
 800792e:	e004      	b.n	800793a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007930:	6839      	ldr	r1, [r7, #0]
 8007932:	6878      	ldr	r0, [r7, #4]
 8007934:	f000 fb55 	bl	8007fe2 <USBD_CtlError>
          break;
 8007938:	bf00      	nop
      }
      break;
 800793a:	e005      	b.n	8007948 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800793c:	6839      	ldr	r1, [r7, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fb4f 	bl	8007fe2 <USBD_CtlError>
      break;
 8007944:	e000      	b.n	8007948 <USBD_StdEPReq+0x330>
      break;
 8007946:	bf00      	nop
  }

  return ret;
 8007948:	7bfb      	ldrb	r3, [r7, #15]
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007966:	2300      	movs	r3, #0
 8007968:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	b29b      	uxth	r3, r3
 8007972:	3b01      	subs	r3, #1
 8007974:	2b06      	cmp	r3, #6
 8007976:	f200 8128 	bhi.w	8007bca <USBD_GetDescriptor+0x276>
 800797a:	a201      	add	r2, pc, #4	; (adr r2, 8007980 <USBD_GetDescriptor+0x2c>)
 800797c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007980:	0800799d 	.word	0x0800799d
 8007984:	080079b5 	.word	0x080079b5
 8007988:	080079f5 	.word	0x080079f5
 800798c:	08007bcb 	.word	0x08007bcb
 8007990:	08007bcb 	.word	0x08007bcb
 8007994:	08007b6b 	.word	0x08007b6b
 8007998:	08007b97 	.word	0x08007b97
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	7c12      	ldrb	r2, [r2, #16]
 80079a8:	f107 0108 	add.w	r1, r7, #8
 80079ac:	4610      	mov	r0, r2
 80079ae:	4798      	blx	r3
 80079b0:	60f8      	str	r0, [r7, #12]
      break;
 80079b2:	e112      	b.n	8007bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	7c1b      	ldrb	r3, [r3, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10d      	bne.n	80079d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c4:	f107 0208 	add.w	r2, r7, #8
 80079c8:	4610      	mov	r0, r2
 80079ca:	4798      	blx	r3
 80079cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3301      	adds	r3, #1
 80079d2:	2202      	movs	r2, #2
 80079d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80079d6:	e100      	b.n	8007bda <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e0:	f107 0208 	add.w	r2, r7, #8
 80079e4:	4610      	mov	r0, r2
 80079e6:	4798      	blx	r3
 80079e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	3301      	adds	r3, #1
 80079ee:	2202      	movs	r2, #2
 80079f0:	701a      	strb	r2, [r3, #0]
      break;
 80079f2:	e0f2      	b.n	8007bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	885b      	ldrh	r3, [r3, #2]
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	2b05      	cmp	r3, #5
 80079fc:	f200 80ac 	bhi.w	8007b58 <USBD_GetDescriptor+0x204>
 8007a00:	a201      	add	r2, pc, #4	; (adr r2, 8007a08 <USBD_GetDescriptor+0xb4>)
 8007a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a06:	bf00      	nop
 8007a08:	08007a21 	.word	0x08007a21
 8007a0c:	08007a55 	.word	0x08007a55
 8007a10:	08007a89 	.word	0x08007a89
 8007a14:	08007abd 	.word	0x08007abd
 8007a18:	08007af1 	.word	0x08007af1
 8007a1c:	08007b25 	.word	0x08007b25
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a26:	685b      	ldr	r3, [r3, #4]
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d00b      	beq.n	8007a44 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	7c12      	ldrb	r2, [r2, #16]
 8007a38:	f107 0108 	add.w	r1, r7, #8
 8007a3c:	4610      	mov	r0, r2
 8007a3e:	4798      	blx	r3
 8007a40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a42:	e091      	b.n	8007b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a44:	6839      	ldr	r1, [r7, #0]
 8007a46:	6878      	ldr	r0, [r7, #4]
 8007a48:	f000 facb 	bl	8007fe2 <USBD_CtlError>
            err++;
 8007a4c:	7afb      	ldrb	r3, [r7, #11]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	72fb      	strb	r3, [r7, #11]
          break;
 8007a52:	e089      	b.n	8007b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a5a:	689b      	ldr	r3, [r3, #8]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00b      	beq.n	8007a78 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	687a      	ldr	r2, [r7, #4]
 8007a6a:	7c12      	ldrb	r2, [r2, #16]
 8007a6c:	f107 0108 	add.w	r1, r7, #8
 8007a70:	4610      	mov	r0, r2
 8007a72:	4798      	blx	r3
 8007a74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007a76:	e077      	b.n	8007b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007a78:	6839      	ldr	r1, [r7, #0]
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fab1 	bl	8007fe2 <USBD_CtlError>
            err++;
 8007a80:	7afb      	ldrb	r3, [r7, #11]
 8007a82:	3301      	adds	r3, #1
 8007a84:	72fb      	strb	r3, [r7, #11]
          break;
 8007a86:	e06f      	b.n	8007b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a9a:	68db      	ldr	r3, [r3, #12]
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	7c12      	ldrb	r2, [r2, #16]
 8007aa0:	f107 0108 	add.w	r1, r7, #8
 8007aa4:	4610      	mov	r0, r2
 8007aa6:	4798      	blx	r3
 8007aa8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007aaa:	e05d      	b.n	8007b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa97 	bl	8007fe2 <USBD_CtlError>
            err++;
 8007ab4:	7afb      	ldrb	r3, [r7, #11]
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	72fb      	strb	r3, [r7, #11]
          break;
 8007aba:	e055      	b.n	8007b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac2:	691b      	ldr	r3, [r3, #16]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00b      	beq.n	8007ae0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ace:	691b      	ldr	r3, [r3, #16]
 8007ad0:	687a      	ldr	r2, [r7, #4]
 8007ad2:	7c12      	ldrb	r2, [r2, #16]
 8007ad4:	f107 0108 	add.w	r1, r7, #8
 8007ad8:	4610      	mov	r0, r2
 8007ada:	4798      	blx	r3
 8007adc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ade:	e043      	b.n	8007b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ae0:	6839      	ldr	r1, [r7, #0]
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa7d 	bl	8007fe2 <USBD_CtlError>
            err++;
 8007ae8:	7afb      	ldrb	r3, [r7, #11]
 8007aea:	3301      	adds	r3, #1
 8007aec:	72fb      	strb	r3, [r7, #11]
          break;
 8007aee:	e03b      	b.n	8007b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007af6:	695b      	ldr	r3, [r3, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d00b      	beq.n	8007b14 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b02:	695b      	ldr	r3, [r3, #20]
 8007b04:	687a      	ldr	r2, [r7, #4]
 8007b06:	7c12      	ldrb	r2, [r2, #16]
 8007b08:	f107 0108 	add.w	r1, r7, #8
 8007b0c:	4610      	mov	r0, r2
 8007b0e:	4798      	blx	r3
 8007b10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b12:	e029      	b.n	8007b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fa63 	bl	8007fe2 <USBD_CtlError>
            err++;
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	3301      	adds	r3, #1
 8007b20:	72fb      	strb	r3, [r7, #11]
          break;
 8007b22:	e021      	b.n	8007b68 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b2a:	699b      	ldr	r3, [r3, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d00b      	beq.n	8007b48 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b36:	699b      	ldr	r3, [r3, #24]
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	7c12      	ldrb	r2, [r2, #16]
 8007b3c:	f107 0108 	add.w	r1, r7, #8
 8007b40:	4610      	mov	r0, r2
 8007b42:	4798      	blx	r3
 8007b44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007b46:	e00f      	b.n	8007b68 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007b48:	6839      	ldr	r1, [r7, #0]
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fa49 	bl	8007fe2 <USBD_CtlError>
            err++;
 8007b50:	7afb      	ldrb	r3, [r7, #11]
 8007b52:	3301      	adds	r3, #1
 8007b54:	72fb      	strb	r3, [r7, #11]
          break;
 8007b56:	e007      	b.n	8007b68 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007b58:	6839      	ldr	r1, [r7, #0]
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fa41 	bl	8007fe2 <USBD_CtlError>
          err++;
 8007b60:	7afb      	ldrb	r3, [r7, #11]
 8007b62:	3301      	adds	r3, #1
 8007b64:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007b66:	bf00      	nop
      }
      break;
 8007b68:	e037      	b.n	8007bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	7c1b      	ldrb	r3, [r3, #16]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d109      	bne.n	8007b86 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7a:	f107 0208 	add.w	r2, r7, #8
 8007b7e:	4610      	mov	r0, r2
 8007b80:	4798      	blx	r3
 8007b82:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007b84:	e029      	b.n	8007bda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007b86:	6839      	ldr	r1, [r7, #0]
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 fa2a 	bl	8007fe2 <USBD_CtlError>
        err++;
 8007b8e:	7afb      	ldrb	r3, [r7, #11]
 8007b90:	3301      	adds	r3, #1
 8007b92:	72fb      	strb	r3, [r7, #11]
      break;
 8007b94:	e021      	b.n	8007bda <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	7c1b      	ldrb	r3, [r3, #16]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d10d      	bne.n	8007bba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	f107 0208 	add.w	r2, r7, #8
 8007baa:	4610      	mov	r0, r2
 8007bac:	4798      	blx	r3
 8007bae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	3301      	adds	r3, #1
 8007bb4:	2207      	movs	r2, #7
 8007bb6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bb8:	e00f      	b.n	8007bda <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007bba:	6839      	ldr	r1, [r7, #0]
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fa10 	bl	8007fe2 <USBD_CtlError>
        err++;
 8007bc2:	7afb      	ldrb	r3, [r7, #11]
 8007bc4:	3301      	adds	r3, #1
 8007bc6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bc8:	e007      	b.n	8007bda <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007bca:	6839      	ldr	r1, [r7, #0]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fa08 	bl	8007fe2 <USBD_CtlError>
      err++;
 8007bd2:	7afb      	ldrb	r3, [r7, #11]
 8007bd4:	3301      	adds	r3, #1
 8007bd6:	72fb      	strb	r3, [r7, #11]
      break;
 8007bd8:	bf00      	nop
  }

  if (err != 0U)
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d11e      	bne.n	8007c1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	88db      	ldrh	r3, [r3, #6]
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d016      	beq.n	8007c16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007be8:	893b      	ldrh	r3, [r7, #8]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00e      	beq.n	8007c0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	88da      	ldrh	r2, [r3, #6]
 8007bf2:	893b      	ldrh	r3, [r7, #8]
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	bf28      	it	cs
 8007bf8:	4613      	movcs	r3, r2
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007bfe:	893b      	ldrh	r3, [r7, #8]
 8007c00:	461a      	mov	r2, r3
 8007c02:	68f9      	ldr	r1, [r7, #12]
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fa5d 	bl	80080c4 <USBD_CtlSendData>
 8007c0a:	e009      	b.n	8007c20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007c0c:	6839      	ldr	r1, [r7, #0]
 8007c0e:	6878      	ldr	r0, [r7, #4]
 8007c10:	f000 f9e7 	bl	8007fe2 <USBD_CtlError>
 8007c14:	e004      	b.n	8007c20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 faae 	bl	8008178 <USBD_CtlSendStatus>
 8007c1c:	e000      	b.n	8007c20 <USBD_GetDescriptor+0x2cc>
    return;
 8007c1e:	bf00      	nop
  }
}
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop

08007c28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	889b      	ldrh	r3, [r3, #4]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d131      	bne.n	8007c9e <USBD_SetAddress+0x76>
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	88db      	ldrh	r3, [r3, #6]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d12d      	bne.n	8007c9e <USBD_SetAddress+0x76>
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	885b      	ldrh	r3, [r3, #2]
 8007c46:	2b7f      	cmp	r3, #127	; 0x7f
 8007c48:	d829      	bhi.n	8007c9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	885b      	ldrh	r3, [r3, #2]
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b03      	cmp	r3, #3
 8007c60:	d104      	bne.n	8007c6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007c62:	6839      	ldr	r1, [r7, #0]
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f000 f9bc 	bl	8007fe2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c6a:	e01d      	b.n	8007ca8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	7bfa      	ldrb	r2, [r7, #15]
 8007c70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007c74:	7bfb      	ldrb	r3, [r7, #15]
 8007c76:	4619      	mov	r1, r3
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f000 ff1b 	bl	8008ab4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa7a 	bl	8008178 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007c84:	7bfb      	ldrb	r3, [r7, #15]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d004      	beq.n	8007c94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2202      	movs	r2, #2
 8007c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c92:	e009      	b.n	8007ca8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c9c:	e004      	b.n	8007ca8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007c9e:	6839      	ldr	r1, [r7, #0]
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 f99e 	bl	8007fe2 <USBD_CtlError>
  }
}
 8007ca6:	bf00      	nop
 8007ca8:	bf00      	nop
 8007caa:	3710      	adds	r7, #16
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b084      	sub	sp, #16
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
 8007cb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007cbe:	683b      	ldr	r3, [r7, #0]
 8007cc0:	885b      	ldrh	r3, [r3, #2]
 8007cc2:	b2da      	uxtb	r2, r3
 8007cc4:	4b4e      	ldr	r3, [pc, #312]	; (8007e00 <USBD_SetConfig+0x150>)
 8007cc6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007cc8:	4b4d      	ldr	r3, [pc, #308]	; (8007e00 <USBD_SetConfig+0x150>)
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d905      	bls.n	8007cdc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007cd0:	6839      	ldr	r1, [r7, #0]
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f985 	bl	8007fe2 <USBD_CtlError>
    return USBD_FAIL;
 8007cd8:	2303      	movs	r3, #3
 8007cda:	e08c      	b.n	8007df6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	2b02      	cmp	r3, #2
 8007ce6:	d002      	beq.n	8007cee <USBD_SetConfig+0x3e>
 8007ce8:	2b03      	cmp	r3, #3
 8007cea:	d029      	beq.n	8007d40 <USBD_SetConfig+0x90>
 8007cec:	e075      	b.n	8007dda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007cee:	4b44      	ldr	r3, [pc, #272]	; (8007e00 <USBD_SetConfig+0x150>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d020      	beq.n	8007d38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007cf6:	4b42      	ldr	r3, [pc, #264]	; (8007e00 <USBD_SetConfig+0x150>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d00:	4b3f      	ldr	r3, [pc, #252]	; (8007e00 <USBD_SetConfig+0x150>)
 8007d02:	781b      	ldrb	r3, [r3, #0]
 8007d04:	4619      	mov	r1, r3
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7fe ffe7 	bl	8006cda <USBD_SetClassConfig>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007d10:	7bfb      	ldrb	r3, [r7, #15]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d008      	beq.n	8007d28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007d16:	6839      	ldr	r1, [r7, #0]
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f000 f962 	bl	8007fe2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2202      	movs	r2, #2
 8007d22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d26:	e065      	b.n	8007df4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fa25 	bl	8008178 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2203      	movs	r2, #3
 8007d32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007d36:	e05d      	b.n	8007df4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f000 fa1d 	bl	8008178 <USBD_CtlSendStatus>
      break;
 8007d3e:	e059      	b.n	8007df4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007d40:	4b2f      	ldr	r3, [pc, #188]	; (8007e00 <USBD_SetConfig+0x150>)
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d112      	bne.n	8007d6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007d50:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <USBD_SetConfig+0x150>)
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007d5a:	4b29      	ldr	r3, [pc, #164]	; (8007e00 <USBD_SetConfig+0x150>)
 8007d5c:	781b      	ldrb	r3, [r3, #0]
 8007d5e:	4619      	mov	r1, r3
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7fe ffd6 	bl	8006d12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 fa06 	bl	8008178 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007d6c:	e042      	b.n	8007df4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007d6e:	4b24      	ldr	r3, [pc, #144]	; (8007e00 <USBD_SetConfig+0x150>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	461a      	mov	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d02a      	beq.n	8007dd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	b2db      	uxtb	r3, r3
 8007d82:	4619      	mov	r1, r3
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f7fe ffc4 	bl	8006d12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007d8a:	4b1d      	ldr	r3, [pc, #116]	; (8007e00 <USBD_SetConfig+0x150>)
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	461a      	mov	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007d94:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <USBD_SetConfig+0x150>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7fe ff9d 	bl	8006cda <USBD_SetClassConfig>
 8007da0:	4603      	mov	r3, r0
 8007da2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007da4:	7bfb      	ldrb	r3, [r7, #15]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d00f      	beq.n	8007dca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007daa:	6839      	ldr	r1, [r7, #0]
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 f918 	bl	8007fe2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	4619      	mov	r1, r3
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f7fe ffa9 	bl	8006d12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2202      	movs	r2, #2
 8007dc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007dc8:	e014      	b.n	8007df4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9d4 	bl	8008178 <USBD_CtlSendStatus>
      break;
 8007dd0:	e010      	b.n	8007df4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9d0 	bl	8008178 <USBD_CtlSendStatus>
      break;
 8007dd8:	e00c      	b.n	8007df4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8007dda:	6839      	ldr	r1, [r7, #0]
 8007ddc:	6878      	ldr	r0, [r7, #4]
 8007dde:	f000 f900 	bl	8007fe2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007de2:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <USBD_SetConfig+0x150>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	4619      	mov	r1, r3
 8007de8:	6878      	ldr	r0, [r7, #4]
 8007dea:	f7fe ff92 	bl	8006d12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007dee:	2303      	movs	r3, #3
 8007df0:	73fb      	strb	r3, [r7, #15]
      break;
 8007df2:	bf00      	nop
  }

  return ret;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	20000b30 	.word	0x20000b30

08007e04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b082      	sub	sp, #8
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
 8007e0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	88db      	ldrh	r3, [r3, #6]
 8007e12:	2b01      	cmp	r3, #1
 8007e14:	d004      	beq.n	8007e20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007e16:	6839      	ldr	r1, [r7, #0]
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8e2 	bl	8007fe2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007e1e:	e023      	b.n	8007e68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e26:	b2db      	uxtb	r3, r3
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	dc02      	bgt.n	8007e32 <USBD_GetConfig+0x2e>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	dc03      	bgt.n	8007e38 <USBD_GetConfig+0x34>
 8007e30:	e015      	b.n	8007e5e <USBD_GetConfig+0x5a>
 8007e32:	2b03      	cmp	r3, #3
 8007e34:	d00b      	beq.n	8007e4e <USBD_GetConfig+0x4a>
 8007e36:	e012      	b.n	8007e5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3308      	adds	r3, #8
 8007e42:	2201      	movs	r2, #1
 8007e44:	4619      	mov	r1, r3
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f93c 	bl	80080c4 <USBD_CtlSendData>
        break;
 8007e4c:	e00c      	b.n	8007e68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3304      	adds	r3, #4
 8007e52:	2201      	movs	r2, #1
 8007e54:	4619      	mov	r1, r3
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f000 f934 	bl	80080c4 <USBD_CtlSendData>
        break;
 8007e5c:	e004      	b.n	8007e68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007e5e:	6839      	ldr	r1, [r7, #0]
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 f8be 	bl	8007fe2 <USBD_CtlError>
        break;
 8007e66:	bf00      	nop
}
 8007e68:	bf00      	nop
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d81e      	bhi.n	8007ec6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	88db      	ldrh	r3, [r3, #6]
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	d004      	beq.n	8007e9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007e90:	6839      	ldr	r1, [r7, #0]
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f000 f8a5 	bl	8007fe2 <USBD_CtlError>
        break;
 8007e98:	e01a      	b.n	8007ed0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	f043 0202 	orr.w	r2, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	330c      	adds	r3, #12
 8007eba:	2202      	movs	r2, #2
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f900 	bl	80080c4 <USBD_CtlSendData>
      break;
 8007ec4:	e004      	b.n	8007ed0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007ec6:	6839      	ldr	r1, [r7, #0]
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f000 f88a 	bl	8007fe2 <USBD_CtlError>
      break;
 8007ece:	bf00      	nop
  }
}
 8007ed0:	bf00      	nop
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	885b      	ldrh	r3, [r3, #2]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d107      	bne.n	8007efa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f000 f940 	bl	8008178 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007ef8:	e013      	b.n	8007f22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	885b      	ldrh	r3, [r3, #2]
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d10b      	bne.n	8007f1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	889b      	ldrh	r3, [r3, #4]
 8007f06:	0a1b      	lsrs	r3, r3, #8
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f930 	bl	8008178 <USBD_CtlSendStatus>
}
 8007f18:	e003      	b.n	8007f22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007f1a:	6839      	ldr	r1, [r7, #0]
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f000 f860 	bl	8007fe2 <USBD_CtlError>
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}

08007f2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f2a:	b580      	push	{r7, lr}
 8007f2c:	b082      	sub	sp, #8
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d80b      	bhi.n	8007f5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007f42:	683b      	ldr	r3, [r7, #0]
 8007f44:	885b      	ldrh	r3, [r3, #2]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10c      	bne.n	8007f64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f910 	bl	8008178 <USBD_CtlSendStatus>
      }
      break;
 8007f58:	e004      	b.n	8007f64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 f840 	bl	8007fe2 <USBD_CtlError>
      break;
 8007f62:	e000      	b.n	8007f66 <USBD_ClrFeature+0x3c>
      break;
 8007f64:	bf00      	nop
  }
}
 8007f66:	bf00      	nop
 8007f68:	3708      	adds	r7, #8
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	781a      	ldrb	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	3301      	adds	r3, #1
 8007f88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	781a      	ldrb	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	3301      	adds	r3, #1
 8007f96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007f98:	68f8      	ldr	r0, [r7, #12]
 8007f9a:	f7ff fa41 	bl	8007420 <SWAPBYTE>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	3301      	adds	r3, #1
 8007faa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007fb2:	68f8      	ldr	r0, [r7, #12]
 8007fb4:	f7ff fa34 	bl	8007420 <SWAPBYTE>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	3301      	adds	r3, #1
 8007fc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3301      	adds	r3, #1
 8007fca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007fcc:	68f8      	ldr	r0, [r7, #12]
 8007fce:	f7ff fa27 	bl	8007420 <SWAPBYTE>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	80da      	strh	r2, [r3, #6]
}
 8007fda:	bf00      	nop
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}

08007fe2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe2:	b580      	push	{r7, lr}
 8007fe4:	b082      	sub	sp, #8
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fec:	2180      	movs	r1, #128	; 0x80
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 fcf6 	bl	80089e0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 fcf2 	bl	80089e0 <USBD_LL_StallEP>
}
 8007ffc:	bf00      	nop
 8007ffe:	3708      	adds	r7, #8
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}

08008004 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	60f8      	str	r0, [r7, #12]
 800800c:	60b9      	str	r1, [r7, #8]
 800800e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008010:	2300      	movs	r3, #0
 8008012:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d036      	beq.n	8008088 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800801e:	6938      	ldr	r0, [r7, #16]
 8008020:	f000 f836 	bl	8008090 <USBD_GetLen>
 8008024:	4603      	mov	r3, r0
 8008026:	3301      	adds	r3, #1
 8008028:	b29b      	uxth	r3, r3
 800802a:	005b      	lsls	r3, r3, #1
 800802c:	b29a      	uxth	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008032:	7dfb      	ldrb	r3, [r7, #23]
 8008034:	68ba      	ldr	r2, [r7, #8]
 8008036:	4413      	add	r3, r2
 8008038:	687a      	ldr	r2, [r7, #4]
 800803a:	7812      	ldrb	r2, [r2, #0]
 800803c:	701a      	strb	r2, [r3, #0]
  idx++;
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	3301      	adds	r3, #1
 8008042:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008044:	7dfb      	ldrb	r3, [r7, #23]
 8008046:	68ba      	ldr	r2, [r7, #8]
 8008048:	4413      	add	r3, r2
 800804a:	2203      	movs	r2, #3
 800804c:	701a      	strb	r2, [r3, #0]
  idx++;
 800804e:	7dfb      	ldrb	r3, [r7, #23]
 8008050:	3301      	adds	r3, #1
 8008052:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008054:	e013      	b.n	800807e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008056:	7dfb      	ldrb	r3, [r7, #23]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	4413      	add	r3, r2
 800805c:	693a      	ldr	r2, [r7, #16]
 800805e:	7812      	ldrb	r2, [r2, #0]
 8008060:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	3301      	adds	r3, #1
 8008066:	613b      	str	r3, [r7, #16]
    idx++;
 8008068:	7dfb      	ldrb	r3, [r7, #23]
 800806a:	3301      	adds	r3, #1
 800806c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800806e:	7dfb      	ldrb	r3, [r7, #23]
 8008070:	68ba      	ldr	r2, [r7, #8]
 8008072:	4413      	add	r3, r2
 8008074:	2200      	movs	r2, #0
 8008076:	701a      	strb	r2, [r3, #0]
    idx++;
 8008078:	7dfb      	ldrb	r3, [r7, #23]
 800807a:	3301      	adds	r3, #1
 800807c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	2b00      	cmp	r3, #0
 8008084:	d1e7      	bne.n	8008056 <USBD_GetString+0x52>
 8008086:	e000      	b.n	800808a <USBD_GetString+0x86>
    return;
 8008088:	bf00      	nop
  }
}
 800808a:	3718      	adds	r7, #24
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008098:	2300      	movs	r3, #0
 800809a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80080a0:	e005      	b.n	80080ae <USBD_GetLen+0x1e>
  {
    len++;
 80080a2:	7bfb      	ldrb	r3, [r7, #15]
 80080a4:	3301      	adds	r3, #1
 80080a6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	3301      	adds	r3, #1
 80080ac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	781b      	ldrb	r3, [r3, #0]
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1f5      	bne.n	80080a2 <USBD_GetLen+0x12>
  }

  return len;
 80080b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	3714      	adds	r7, #20
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	60f8      	str	r0, [r7, #12]
 80080cc:	60b9      	str	r1, [r7, #8]
 80080ce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	687a      	ldr	r2, [r7, #4]
 80080dc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	2100      	movs	r1, #0
 80080ea:	68f8      	ldr	r0, [r7, #12]
 80080ec:	f000 fd01 	bl	8008af2 <USBD_LL_Transmit>

  return USBD_OK;
 80080f0:	2300      	movs	r3, #0
}
 80080f2:	4618      	mov	r0, r3
 80080f4:	3710      	adds	r7, #16
 80080f6:	46bd      	mov	sp, r7
 80080f8:	bd80      	pop	{r7, pc}

080080fa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	60f8      	str	r0, [r7, #12]
 8008102:	60b9      	str	r1, [r7, #8]
 8008104:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	68ba      	ldr	r2, [r7, #8]
 800810a:	2100      	movs	r1, #0
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f000 fcf0 	bl	8008af2 <USBD_LL_Transmit>

  return USBD_OK;
 8008112:	2300      	movs	r3, #0
}
 8008114:	4618      	mov	r0, r3
 8008116:	3710      	adds	r7, #16
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2203      	movs	r2, #3
 800812c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	687a      	ldr	r2, [r7, #4]
 800813c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	68ba      	ldr	r2, [r7, #8]
 8008144:	2100      	movs	r1, #0
 8008146:	68f8      	ldr	r0, [r7, #12]
 8008148:	f000 fcf4 	bl	8008b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008156:	b580      	push	{r7, lr}
 8008158:	b084      	sub	sp, #16
 800815a:	af00      	add	r7, sp, #0
 800815c:	60f8      	str	r0, [r7, #12]
 800815e:	60b9      	str	r1, [r7, #8]
 8008160:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	68ba      	ldr	r2, [r7, #8]
 8008166:	2100      	movs	r1, #0
 8008168:	68f8      	ldr	r0, [r7, #12]
 800816a:	f000 fce3 	bl	8008b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3710      	adds	r7, #16
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2204      	movs	r2, #4
 8008184:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008188:	2300      	movs	r3, #0
 800818a:	2200      	movs	r2, #0
 800818c:	2100      	movs	r1, #0
 800818e:	6878      	ldr	r0, [r7, #4]
 8008190:	f000 fcaf 	bl	8008af2 <USBD_LL_Transmit>

  return USBD_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	2205      	movs	r2, #5
 80081aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80081ae:	2300      	movs	r3, #0
 80081b0:	2200      	movs	r2, #0
 80081b2:	2100      	movs	r1, #0
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 fcbd 	bl	8008b34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80081c8:	2200      	movs	r2, #0
 80081ca:	4912      	ldr	r1, [pc, #72]	; (8008214 <MX_USB_DEVICE_Init+0x50>)
 80081cc:	4812      	ldr	r0, [pc, #72]	; (8008218 <MX_USB_DEVICE_Init+0x54>)
 80081ce:	f7fe fd07 	bl	8006be0 <USBD_Init>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80081d8:	f7f9 fa40 	bl	800165c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80081dc:	490f      	ldr	r1, [pc, #60]	; (800821c <MX_USB_DEVICE_Init+0x58>)
 80081de:	480e      	ldr	r0, [pc, #56]	; (8008218 <MX_USB_DEVICE_Init+0x54>)
 80081e0:	f7fe fd2e 	bl	8006c40 <USBD_RegisterClass>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80081ea:	f7f9 fa37 	bl	800165c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80081ee:	490c      	ldr	r1, [pc, #48]	; (8008220 <MX_USB_DEVICE_Init+0x5c>)
 80081f0:	4809      	ldr	r0, [pc, #36]	; (8008218 <MX_USB_DEVICE_Init+0x54>)
 80081f2:	f7fe fc1f 	bl	8006a34 <USBD_CDC_RegisterInterface>
 80081f6:	4603      	mov	r3, r0
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d001      	beq.n	8008200 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80081fc:	f7f9 fa2e 	bl	800165c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008200:	4805      	ldr	r0, [pc, #20]	; (8008218 <MX_USB_DEVICE_Init+0x54>)
 8008202:	f7fe fd53 	bl	8006cac <USBD_Start>
 8008206:	4603      	mov	r3, r0
 8008208:	2b00      	cmp	r3, #0
 800820a:	d001      	beq.n	8008210 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800820c:	f7f9 fa26 	bl	800165c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008210:	bf00      	nop
 8008212:	bd80      	pop	{r7, pc}
 8008214:	200000c4 	.word	0x200000c4
 8008218:	20000b34 	.word	0x20000b34
 800821c:	20000030 	.word	0x20000030
 8008220:	200000b0 	.word	0x200000b0

08008224 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008228:	2200      	movs	r2, #0
 800822a:	4905      	ldr	r1, [pc, #20]	; (8008240 <CDC_Init_FS+0x1c>)
 800822c:	4805      	ldr	r0, [pc, #20]	; (8008244 <CDC_Init_FS+0x20>)
 800822e:	f7fe fc1b 	bl	8006a68 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008232:	4905      	ldr	r1, [pc, #20]	; (8008248 <CDC_Init_FS+0x24>)
 8008234:	4803      	ldr	r0, [pc, #12]	; (8008244 <CDC_Init_FS+0x20>)
 8008236:	f7fe fc39 	bl	8006aac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800823a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800823c:	4618      	mov	r0, r3
 800823e:	bd80      	pop	{r7, pc}
 8008240:	20001610 	.word	0x20001610
 8008244:	20000b34 	.word	0x20000b34
 8008248:	20000e10 	.word	0x20000e10

0800824c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800824c:	b480      	push	{r7}
 800824e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008250:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008252:	4618      	mov	r0, r3
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr

0800825c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800825c:	b480      	push	{r7}
 800825e:	b083      	sub	sp, #12
 8008260:	af00      	add	r7, sp, #0
 8008262:	4603      	mov	r3, r0
 8008264:	6039      	str	r1, [r7, #0]
 8008266:	71fb      	strb	r3, [r7, #7]
 8008268:	4613      	mov	r3, r2
 800826a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2b23      	cmp	r3, #35	; 0x23
 8008270:	d84a      	bhi.n	8008308 <CDC_Control_FS+0xac>
 8008272:	a201      	add	r2, pc, #4	; (adr r2, 8008278 <CDC_Control_FS+0x1c>)
 8008274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008278:	08008309 	.word	0x08008309
 800827c:	08008309 	.word	0x08008309
 8008280:	08008309 	.word	0x08008309
 8008284:	08008309 	.word	0x08008309
 8008288:	08008309 	.word	0x08008309
 800828c:	08008309 	.word	0x08008309
 8008290:	08008309 	.word	0x08008309
 8008294:	08008309 	.word	0x08008309
 8008298:	08008309 	.word	0x08008309
 800829c:	08008309 	.word	0x08008309
 80082a0:	08008309 	.word	0x08008309
 80082a4:	08008309 	.word	0x08008309
 80082a8:	08008309 	.word	0x08008309
 80082ac:	08008309 	.word	0x08008309
 80082b0:	08008309 	.word	0x08008309
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008309 	.word	0x08008309
 80082bc:	08008309 	.word	0x08008309
 80082c0:	08008309 	.word	0x08008309
 80082c4:	08008309 	.word	0x08008309
 80082c8:	08008309 	.word	0x08008309
 80082cc:	08008309 	.word	0x08008309
 80082d0:	08008309 	.word	0x08008309
 80082d4:	08008309 	.word	0x08008309
 80082d8:	08008309 	.word	0x08008309
 80082dc:	08008309 	.word	0x08008309
 80082e0:	08008309 	.word	0x08008309
 80082e4:	08008309 	.word	0x08008309
 80082e8:	08008309 	.word	0x08008309
 80082ec:	08008309 	.word	0x08008309
 80082f0:	08008309 	.word	0x08008309
 80082f4:	08008309 	.word	0x08008309
 80082f8:	08008309 	.word	0x08008309
 80082fc:	08008309 	.word	0x08008309
 8008300:	08008309 	.word	0x08008309
 8008304:	08008309 	.word	0x08008309
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008308:	bf00      	nop
  }

  return (USBD_OK);
 800830a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800830c:	4618      	mov	r0, r3
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008322:	6879      	ldr	r1, [r7, #4]
 8008324:	480f      	ldr	r0, [pc, #60]	; (8008364 <CDC_Receive_FS+0x4c>)
 8008326:	f7fe fbc1 	bl	8006aac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800832a:	480e      	ldr	r0, [pc, #56]	; (8008364 <CDC_Receive_FS+0x4c>)
 800832c:	f7fe fc22 	bl	8006b74 <USBD_CDC_ReceivePacket>
  memset (recivebuffer, '\0', 64);  // clear the buffer
 8008330:	2240      	movs	r2, #64	; 0x40
 8008332:	2100      	movs	r1, #0
 8008334:	480c      	ldr	r0, [pc, #48]	; (8008368 <CDC_Receive_FS+0x50>)
 8008336:	f000 fcd1 	bl	8008cdc <memset>
    uint8_t len = (uint8_t)*Len;
 800833a:	683b      	ldr	r3, [r7, #0]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	73fb      	strb	r3, [r7, #15]
    memcpy(recivebuffer, Buf, len);  // copy the data to the buffer
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	461a      	mov	r2, r3
 8008344:	6879      	ldr	r1, [r7, #4]
 8008346:	4808      	ldr	r0, [pc, #32]	; (8008368 <CDC_Receive_FS+0x50>)
 8008348:	f000 fcba 	bl	8008cc0 <memcpy>
    memset(Buf, '\0', len);   // clear the Buf also
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	461a      	mov	r2, r3
 8008350:	2100      	movs	r1, #0
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fcc2 	bl	8008cdc <memset>
  return (USBD_OK);
 8008358:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop
 8008364:	20000b34 	.word	0x20000b34
 8008368:	20000a28 	.word	0x20000a28

0800836c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b084      	sub	sp, #16
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	460b      	mov	r3, r1
 8008376:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008378:	2300      	movs	r3, #0
 800837a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800837c:	4b0d      	ldr	r3, [pc, #52]	; (80083b4 <CDC_Transmit_FS+0x48>)
 800837e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008382:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008384:	68bb      	ldr	r3, [r7, #8]
 8008386:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800838a:	2b00      	cmp	r3, #0
 800838c:	d001      	beq.n	8008392 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800838e:	2301      	movs	r3, #1
 8008390:	e00b      	b.n	80083aa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8008392:	887b      	ldrh	r3, [r7, #2]
 8008394:	461a      	mov	r2, r3
 8008396:	6879      	ldr	r1, [r7, #4]
 8008398:	4806      	ldr	r0, [pc, #24]	; (80083b4 <CDC_Transmit_FS+0x48>)
 800839a:	f7fe fb65 	bl	8006a68 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800839e:	4805      	ldr	r0, [pc, #20]	; (80083b4 <CDC_Transmit_FS+0x48>)
 80083a0:	f7fe fba2 	bl	8006ae8 <USBD_CDC_TransmitPacket>
 80083a4:	4603      	mov	r3, r0
 80083a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80083a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80083aa:	4618      	mov	r0, r3
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}
 80083b2:	bf00      	nop
 80083b4:	20000b34 	.word	0x20000b34

080083b8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	4613      	mov	r3, r2
 80083c4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80083c6:	2300      	movs	r3, #0
 80083c8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80083ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	371c      	adds	r7, #28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
	...

080083dc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	4603      	mov	r3, r0
 80083e4:	6039      	str	r1, [r7, #0]
 80083e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2212      	movs	r2, #18
 80083ec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80083ee:	4b03      	ldr	r3, [pc, #12]	; (80083fc <USBD_FS_DeviceDescriptor+0x20>)
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	370c      	adds	r7, #12
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr
 80083fc:	200000e0 	.word	0x200000e0

08008400 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	4603      	mov	r3, r0
 8008408:	6039      	str	r1, [r7, #0]
 800840a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	2204      	movs	r2, #4
 8008410:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008412:	4b03      	ldr	r3, [pc, #12]	; (8008420 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008414:	4618      	mov	r0, r3
 8008416:	370c      	adds	r7, #12
 8008418:	46bd      	mov	sp, r7
 800841a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841e:	4770      	bx	lr
 8008420:	200000f4 	.word	0x200000f4

08008424 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	6039      	str	r1, [r7, #0]
 800842e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008430:	79fb      	ldrb	r3, [r7, #7]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d105      	bne.n	8008442 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008436:	683a      	ldr	r2, [r7, #0]
 8008438:	4907      	ldr	r1, [pc, #28]	; (8008458 <USBD_FS_ProductStrDescriptor+0x34>)
 800843a:	4808      	ldr	r0, [pc, #32]	; (800845c <USBD_FS_ProductStrDescriptor+0x38>)
 800843c:	f7ff fde2 	bl	8008004 <USBD_GetString>
 8008440:	e004      	b.n	800844c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008442:	683a      	ldr	r2, [r7, #0]
 8008444:	4904      	ldr	r1, [pc, #16]	; (8008458 <USBD_FS_ProductStrDescriptor+0x34>)
 8008446:	4805      	ldr	r0, [pc, #20]	; (800845c <USBD_FS_ProductStrDescriptor+0x38>)
 8008448:	f7ff fddc 	bl	8008004 <USBD_GetString>
  }
  return USBD_StrDesc;
 800844c:	4b02      	ldr	r3, [pc, #8]	; (8008458 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20001e10 	.word	0x20001e10
 800845c:	0800b438 	.word	0x0800b438

08008460 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	6039      	str	r1, [r7, #0]
 800846a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800846c:	683a      	ldr	r2, [r7, #0]
 800846e:	4904      	ldr	r1, [pc, #16]	; (8008480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008470:	4804      	ldr	r0, [pc, #16]	; (8008484 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008472:	f7ff fdc7 	bl	8008004 <USBD_GetString>
  return USBD_StrDesc;
 8008476:	4b02      	ldr	r3, [pc, #8]	; (8008480 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008478:	4618      	mov	r0, r3
 800847a:	3708      	adds	r7, #8
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}
 8008480:	20001e10 	.word	0x20001e10
 8008484:	0800b450 	.word	0x0800b450

08008488 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b082      	sub	sp, #8
 800848c:	af00      	add	r7, sp, #0
 800848e:	4603      	mov	r3, r0
 8008490:	6039      	str	r1, [r7, #0]
 8008492:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	221a      	movs	r2, #26
 8008498:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800849a:	f000 f843 	bl	8008524 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800849e:	4b02      	ldr	r3, [pc, #8]	; (80084a8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3708      	adds	r7, #8
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	200000f8 	.word	0x200000f8

080084ac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b082      	sub	sp, #8
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	4603      	mov	r3, r0
 80084b4:	6039      	str	r1, [r7, #0]
 80084b6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80084b8:	79fb      	ldrb	r3, [r7, #7]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d105      	bne.n	80084ca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084be:	683a      	ldr	r2, [r7, #0]
 80084c0:	4907      	ldr	r1, [pc, #28]	; (80084e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084c2:	4808      	ldr	r0, [pc, #32]	; (80084e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084c4:	f7ff fd9e 	bl	8008004 <USBD_GetString>
 80084c8:	e004      	b.n	80084d4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80084ca:	683a      	ldr	r2, [r7, #0]
 80084cc:	4904      	ldr	r1, [pc, #16]	; (80084e0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80084ce:	4805      	ldr	r0, [pc, #20]	; (80084e4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80084d0:	f7ff fd98 	bl	8008004 <USBD_GetString>
  }
  return USBD_StrDesc;
 80084d4:	4b02      	ldr	r3, [pc, #8]	; (80084e0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}
 80084de:	bf00      	nop
 80084e0:	20001e10 	.word	0x20001e10
 80084e4:	0800b464 	.word	0x0800b464

080084e8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	4603      	mov	r3, r0
 80084f0:	6039      	str	r1, [r7, #0]
 80084f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80084f4:	79fb      	ldrb	r3, [r7, #7]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d105      	bne.n	8008506 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	4907      	ldr	r1, [pc, #28]	; (800851c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80084fe:	4808      	ldr	r0, [pc, #32]	; (8008520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008500:	f7ff fd80 	bl	8008004 <USBD_GetString>
 8008504:	e004      	b.n	8008510 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008506:	683a      	ldr	r2, [r7, #0]
 8008508:	4904      	ldr	r1, [pc, #16]	; (800851c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800850a:	4805      	ldr	r0, [pc, #20]	; (8008520 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800850c:	f7ff fd7a 	bl	8008004 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008512:	4618      	mov	r0, r3
 8008514:	3708      	adds	r7, #8
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	20001e10 	.word	0x20001e10
 8008520:	0800b470 	.word	0x0800b470

08008524 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800852a:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <Get_SerialNum+0x44>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008530:	4b0e      	ldr	r3, [pc, #56]	; (800856c <Get_SerialNum+0x48>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008536:	4b0e      	ldr	r3, [pc, #56]	; (8008570 <Get_SerialNum+0x4c>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	4413      	add	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d009      	beq.n	800855e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800854a:	2208      	movs	r2, #8
 800854c:	4909      	ldr	r1, [pc, #36]	; (8008574 <Get_SerialNum+0x50>)
 800854e:	68f8      	ldr	r0, [r7, #12]
 8008550:	f000 f814 	bl	800857c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008554:	2204      	movs	r2, #4
 8008556:	4908      	ldr	r1, [pc, #32]	; (8008578 <Get_SerialNum+0x54>)
 8008558:	68b8      	ldr	r0, [r7, #8]
 800855a:	f000 f80f 	bl	800857c <IntToUnicode>
  }
}
 800855e:	bf00      	nop
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
 8008566:	bf00      	nop
 8008568:	1fff7a10 	.word	0x1fff7a10
 800856c:	1fff7a14 	.word	0x1fff7a14
 8008570:	1fff7a18 	.word	0x1fff7a18
 8008574:	200000fa 	.word	0x200000fa
 8008578:	2000010a 	.word	0x2000010a

0800857c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	4613      	mov	r3, r2
 8008588:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800858a:	2300      	movs	r3, #0
 800858c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800858e:	2300      	movs	r3, #0
 8008590:	75fb      	strb	r3, [r7, #23]
 8008592:	e027      	b.n	80085e4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	0f1b      	lsrs	r3, r3, #28
 8008598:	2b09      	cmp	r3, #9
 800859a:	d80b      	bhi.n	80085b4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	0f1b      	lsrs	r3, r3, #28
 80085a0:	b2da      	uxtb	r2, r3
 80085a2:	7dfb      	ldrb	r3, [r7, #23]
 80085a4:	005b      	lsls	r3, r3, #1
 80085a6:	4619      	mov	r1, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	440b      	add	r3, r1
 80085ac:	3230      	adds	r2, #48	; 0x30
 80085ae:	b2d2      	uxtb	r2, r2
 80085b0:	701a      	strb	r2, [r3, #0]
 80085b2:	e00a      	b.n	80085ca <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	0f1b      	lsrs	r3, r3, #28
 80085b8:	b2da      	uxtb	r2, r3
 80085ba:	7dfb      	ldrb	r3, [r7, #23]
 80085bc:	005b      	lsls	r3, r3, #1
 80085be:	4619      	mov	r1, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	440b      	add	r3, r1
 80085c4:	3237      	adds	r2, #55	; 0x37
 80085c6:	b2d2      	uxtb	r2, r2
 80085c8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	011b      	lsls	r3, r3, #4
 80085ce:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	005b      	lsls	r3, r3, #1
 80085d4:	3301      	adds	r3, #1
 80085d6:	68ba      	ldr	r2, [r7, #8]
 80085d8:	4413      	add	r3, r2
 80085da:	2200      	movs	r2, #0
 80085dc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	3301      	adds	r3, #1
 80085e2:	75fb      	strb	r3, [r7, #23]
 80085e4:	7dfa      	ldrb	r2, [r7, #23]
 80085e6:	79fb      	ldrb	r3, [r7, #7]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d3d3      	bcc.n	8008594 <IntToUnicode+0x18>
  }
}
 80085ec:	bf00      	nop
 80085ee:	bf00      	nop
 80085f0:	371c      	adds	r7, #28
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b08a      	sub	sp, #40	; 0x28
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008604:	f107 0314 	add.w	r3, r7, #20
 8008608:	2200      	movs	r2, #0
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	605a      	str	r2, [r3, #4]
 800860e:	609a      	str	r2, [r3, #8]
 8008610:	60da      	str	r2, [r3, #12]
 8008612:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800861c:	d13a      	bne.n	8008694 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800861e:	2300      	movs	r3, #0
 8008620:	613b      	str	r3, [r7, #16]
 8008622:	4b1e      	ldr	r3, [pc, #120]	; (800869c <HAL_PCD_MspInit+0xa0>)
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	4a1d      	ldr	r2, [pc, #116]	; (800869c <HAL_PCD_MspInit+0xa0>)
 8008628:	f043 0301 	orr.w	r3, r3, #1
 800862c:	6313      	str	r3, [r2, #48]	; 0x30
 800862e:	4b1b      	ldr	r3, [pc, #108]	; (800869c <HAL_PCD_MspInit+0xa0>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	613b      	str	r3, [r7, #16]
 8008638:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800863a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800863e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008640:	2302      	movs	r3, #2
 8008642:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008644:	2300      	movs	r3, #0
 8008646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008648:	2303      	movs	r3, #3
 800864a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800864c:	230a      	movs	r3, #10
 800864e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008650:	f107 0314 	add.w	r3, r7, #20
 8008654:	4619      	mov	r1, r3
 8008656:	4812      	ldr	r0, [pc, #72]	; (80086a0 <HAL_PCD_MspInit+0xa4>)
 8008658:	f7f9 fb54 	bl	8001d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800865c:	4b0f      	ldr	r3, [pc, #60]	; (800869c <HAL_PCD_MspInit+0xa0>)
 800865e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008660:	4a0e      	ldr	r2, [pc, #56]	; (800869c <HAL_PCD_MspInit+0xa0>)
 8008662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008666:	6353      	str	r3, [r2, #52]	; 0x34
 8008668:	2300      	movs	r3, #0
 800866a:	60fb      	str	r3, [r7, #12]
 800866c:	4b0b      	ldr	r3, [pc, #44]	; (800869c <HAL_PCD_MspInit+0xa0>)
 800866e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008670:	4a0a      	ldr	r2, [pc, #40]	; (800869c <HAL_PCD_MspInit+0xa0>)
 8008672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008676:	6453      	str	r3, [r2, #68]	; 0x44
 8008678:	4b08      	ldr	r3, [pc, #32]	; (800869c <HAL_PCD_MspInit+0xa0>)
 800867a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008680:	60fb      	str	r3, [r7, #12]
 8008682:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008684:	2200      	movs	r2, #0
 8008686:	2100      	movs	r1, #0
 8008688:	2043      	movs	r0, #67	; 0x43
 800868a:	f7f9 fb04 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800868e:	2043      	movs	r0, #67	; 0x43
 8008690:	f7f9 fb1d 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008694:	bf00      	nop
 8008696:	3728      	adds	r7, #40	; 0x28
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	40023800 	.word	0x40023800
 80086a0:	40020000 	.word	0x40020000

080086a4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fe fb43 	bl	8006d46 <USBD_LL_SetupStage>
}
 80086c0:	bf00      	nop
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	460b      	mov	r3, r1
 80086d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80086da:	78fa      	ldrb	r2, [r7, #3]
 80086dc:	6879      	ldr	r1, [r7, #4]
 80086de:	4613      	mov	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	4413      	add	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	440b      	add	r3, r1
 80086e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	78fb      	ldrb	r3, [r7, #3]
 80086f0:	4619      	mov	r1, r3
 80086f2:	f7fe fb7d 	bl	8006df0 <USBD_LL_DataOutStage>
}
 80086f6:	bf00      	nop
 80086f8:	3708      	adds	r7, #8
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80086fe:	b580      	push	{r7, lr}
 8008700:	b082      	sub	sp, #8
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
 8008706:	460b      	mov	r3, r1
 8008708:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008710:	78fa      	ldrb	r2, [r7, #3]
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	4613      	mov	r3, r2
 8008716:	00db      	lsls	r3, r3, #3
 8008718:	4413      	add	r3, r2
 800871a:	009b      	lsls	r3, r3, #2
 800871c:	440b      	add	r3, r1
 800871e:	334c      	adds	r3, #76	; 0x4c
 8008720:	681a      	ldr	r2, [r3, #0]
 8008722:	78fb      	ldrb	r3, [r7, #3]
 8008724:	4619      	mov	r1, r3
 8008726:	f7fe fc16 	bl	8006f56 <USBD_LL_DataInStage>
}
 800872a:	bf00      	nop
 800872c:	3708      	adds	r7, #8
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b082      	sub	sp, #8
 8008736:	af00      	add	r7, sp, #0
 8008738:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008740:	4618      	mov	r0, r3
 8008742:	f7fe fd4a 	bl	80071da <USBD_LL_SOF>
}
 8008746:	bf00      	nop
 8008748:	3708      	adds	r7, #8
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}

0800874e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800874e:	b580      	push	{r7, lr}
 8008750:	b084      	sub	sp, #16
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008756:	2301      	movs	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
 8008766:	e008      	b.n	800877a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	2b02      	cmp	r3, #2
 800876e:	d102      	bne.n	8008776 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]
 8008774:	e001      	b.n	800877a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008776:	f7f8 ff71 	bl	800165c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008780:	7bfa      	ldrb	r2, [r7, #15]
 8008782:	4611      	mov	r1, r2
 8008784:	4618      	mov	r0, r3
 8008786:	f7fe fcea 	bl	800715e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008790:	4618      	mov	r0, r3
 8008792:	f7fe fc92 	bl	80070ba <USBD_LL_Reset>
}
 8008796:	bf00      	nop
 8008798:	3710      	adds	r7, #16
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
	...

080087a0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b082      	sub	sp, #8
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087ae:	4618      	mov	r0, r3
 80087b0:	f7fe fce5 	bl	800717e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	687a      	ldr	r2, [r7, #4]
 80087c0:	6812      	ldr	r2, [r2, #0]
 80087c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80087c6:	f043 0301 	orr.w	r3, r3, #1
 80087ca:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6a1b      	ldr	r3, [r3, #32]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80087d4:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <HAL_PCD_SuspendCallback+0x48>)
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	4a03      	ldr	r2, [pc, #12]	; (80087e8 <HAL_PCD_SuspendCallback+0x48>)
 80087da:	f043 0306 	orr.w	r3, r3, #6
 80087de:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80087e0:	bf00      	nop
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	e000ed00 	.word	0xe000ed00

080087ec <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7fe fcd5 	bl	80071aa <USBD_LL_Resume>
}
 8008800:	bf00      	nop
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}

08008808 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b082      	sub	sp, #8
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	460b      	mov	r3, r1
 8008812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800881a:	78fa      	ldrb	r2, [r7, #3]
 800881c:	4611      	mov	r1, r2
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fd2d 	bl	800727e <USBD_LL_IsoOUTIncomplete>
}
 8008824:	bf00      	nop
 8008826:	3708      	adds	r7, #8
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b082      	sub	sp, #8
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	460b      	mov	r3, r1
 8008836:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800883e:	78fa      	ldrb	r2, [r7, #3]
 8008840:	4611      	mov	r1, r2
 8008842:	4618      	mov	r0, r3
 8008844:	f7fe fce9 	bl	800721a <USBD_LL_IsoINIncomplete>
}
 8008848:	bf00      	nop
 800884a:	3708      	adds	r7, #8
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}

08008850 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b082      	sub	sp, #8
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800885e:	4618      	mov	r0, r3
 8008860:	f7fe fd3f 	bl	80072e2 <USBD_LL_DevConnected>
}
 8008864:	bf00      	nop
 8008866:	3708      	adds	r7, #8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800887a:	4618      	mov	r0, r3
 800887c:	f7fe fd3c 	bl	80072f8 <USBD_LL_DevDisconnected>
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	781b      	ldrb	r3, [r3, #0]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d13c      	bne.n	8008912 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008898:	4a20      	ldr	r2, [pc, #128]	; (800891c <USBD_LL_Init+0x94>)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a1e      	ldr	r2, [pc, #120]	; (800891c <USBD_LL_Init+0x94>)
 80088a4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80088a8:	4b1c      	ldr	r3, [pc, #112]	; (800891c <USBD_LL_Init+0x94>)
 80088aa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80088ae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80088b0:	4b1a      	ldr	r3, [pc, #104]	; (800891c <USBD_LL_Init+0x94>)
 80088b2:	2204      	movs	r2, #4
 80088b4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80088b6:	4b19      	ldr	r3, [pc, #100]	; (800891c <USBD_LL_Init+0x94>)
 80088b8:	2202      	movs	r2, #2
 80088ba:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80088bc:	4b17      	ldr	r3, [pc, #92]	; (800891c <USBD_LL_Init+0x94>)
 80088be:	2200      	movs	r2, #0
 80088c0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80088c2:	4b16      	ldr	r3, [pc, #88]	; (800891c <USBD_LL_Init+0x94>)
 80088c4:	2202      	movs	r2, #2
 80088c6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80088c8:	4b14      	ldr	r3, [pc, #80]	; (800891c <USBD_LL_Init+0x94>)
 80088ca:	2200      	movs	r2, #0
 80088cc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80088ce:	4b13      	ldr	r3, [pc, #76]	; (800891c <USBD_LL_Init+0x94>)
 80088d0:	2200      	movs	r2, #0
 80088d2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80088d4:	4b11      	ldr	r3, [pc, #68]	; (800891c <USBD_LL_Init+0x94>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80088da:	4b10      	ldr	r3, [pc, #64]	; (800891c <USBD_LL_Init+0x94>)
 80088dc:	2200      	movs	r2, #0
 80088de:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80088e0:	4b0e      	ldr	r3, [pc, #56]	; (800891c <USBD_LL_Init+0x94>)
 80088e2:	2200      	movs	r2, #0
 80088e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80088e6:	480d      	ldr	r0, [pc, #52]	; (800891c <USBD_LL_Init+0x94>)
 80088e8:	f7f9 fbc1 	bl	800206e <HAL_PCD_Init>
 80088ec:	4603      	mov	r3, r0
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d001      	beq.n	80088f6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80088f2:	f7f8 feb3 	bl	800165c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80088f6:	2180      	movs	r1, #128	; 0x80
 80088f8:	4808      	ldr	r0, [pc, #32]	; (800891c <USBD_LL_Init+0x94>)
 80088fa:	f7fa fe18 	bl	800352e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80088fe:	2240      	movs	r2, #64	; 0x40
 8008900:	2100      	movs	r1, #0
 8008902:	4806      	ldr	r0, [pc, #24]	; (800891c <USBD_LL_Init+0x94>)
 8008904:	f7fa fdcc 	bl	80034a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008908:	2280      	movs	r2, #128	; 0x80
 800890a:	2101      	movs	r1, #1
 800890c:	4803      	ldr	r0, [pc, #12]	; (800891c <USBD_LL_Init+0x94>)
 800890e:	f7fa fdc7 	bl	80034a0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3708      	adds	r7, #8
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	20002010 	.word	0x20002010

08008920 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008928:	2300      	movs	r3, #0
 800892a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800892c:	2300      	movs	r3, #0
 800892e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008936:	4618      	mov	r0, r3
 8008938:	f7f9 fcb6 	bl	80022a8 <HAL_PCD_Start>
 800893c:	4603      	mov	r3, r0
 800893e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008940:	7bfb      	ldrb	r3, [r7, #15]
 8008942:	4618      	mov	r0, r3
 8008944:	f000 f942 	bl	8008bcc <USBD_Get_USB_Status>
 8008948:	4603      	mov	r3, r0
 800894a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800894c:	7bbb      	ldrb	r3, [r7, #14]
}
 800894e:	4618      	mov	r0, r3
 8008950:	3710      	adds	r7, #16
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}

08008956 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
 800895e:	4608      	mov	r0, r1
 8008960:	4611      	mov	r1, r2
 8008962:	461a      	mov	r2, r3
 8008964:	4603      	mov	r3, r0
 8008966:	70fb      	strb	r3, [r7, #3]
 8008968:	460b      	mov	r3, r1
 800896a:	70bb      	strb	r3, [r7, #2]
 800896c:	4613      	mov	r3, r2
 800896e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008974:	2300      	movs	r3, #0
 8008976:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800897e:	78bb      	ldrb	r3, [r7, #2]
 8008980:	883a      	ldrh	r2, [r7, #0]
 8008982:	78f9      	ldrb	r1, [r7, #3]
 8008984:	f7fa f987 	bl	8002c96 <HAL_PCD_EP_Open>
 8008988:	4603      	mov	r3, r0
 800898a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800898c:	7bfb      	ldrb	r3, [r7, #15]
 800898e:	4618      	mov	r0, r3
 8008990:	f000 f91c 	bl	8008bcc <USBD_Get_USB_Status>
 8008994:	4603      	mov	r3, r0
 8008996:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008998:	7bbb      	ldrb	r3, [r7, #14]
}
 800899a:	4618      	mov	r0, r3
 800899c:	3710      	adds	r7, #16
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}

080089a2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089a2:	b580      	push	{r7, lr}
 80089a4:	b084      	sub	sp, #16
 80089a6:	af00      	add	r7, sp, #0
 80089a8:	6078      	str	r0, [r7, #4]
 80089aa:	460b      	mov	r3, r1
 80089ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089b2:	2300      	movs	r3, #0
 80089b4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089bc:	78fa      	ldrb	r2, [r7, #3]
 80089be:	4611      	mov	r1, r2
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7fa f9d0 	bl	8002d66 <HAL_PCD_EP_Close>
 80089c6:	4603      	mov	r3, r0
 80089c8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089ca:	7bfb      	ldrb	r3, [r7, #15]
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 f8fd 	bl	8008bcc <USBD_Get_USB_Status>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089d6:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3710      	adds	r7, #16
 80089dc:	46bd      	mov	sp, r7
 80089de:	bd80      	pop	{r7, pc}

080089e0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	460b      	mov	r3, r1
 80089ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80089fa:	78fa      	ldrb	r2, [r7, #3]
 80089fc:	4611      	mov	r1, r2
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fa faa8 	bl	8002f54 <HAL_PCD_EP_SetStall>
 8008a04:	4603      	mov	r3, r0
 8008a06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a08:	7bfb      	ldrb	r3, [r7, #15]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 f8de 	bl	8008bcc <USBD_Get_USB_Status>
 8008a10:	4603      	mov	r3, r0
 8008a12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a14:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a16:	4618      	mov	r0, r3
 8008a18:	3710      	adds	r7, #16
 8008a1a:	46bd      	mov	sp, r7
 8008a1c:	bd80      	pop	{r7, pc}

08008a1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a1e:	b580      	push	{r7, lr}
 8008a20:	b084      	sub	sp, #16
 8008a22:	af00      	add	r7, sp, #0
 8008a24:	6078      	str	r0, [r7, #4]
 8008a26:	460b      	mov	r3, r1
 8008a28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a38:	78fa      	ldrb	r2, [r7, #3]
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	f7fa faed 	bl	800301c <HAL_PCD_EP_ClrStall>
 8008a42:	4603      	mov	r3, r0
 8008a44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a46:	7bfb      	ldrb	r3, [r7, #15]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 f8bf 	bl	8008bcc <USBD_Get_USB_Status>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a52:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b085      	sub	sp, #20
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008a6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	da0b      	bge.n	8008a90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008a78:	78fb      	ldrb	r3, [r7, #3]
 8008a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a7e:	68f9      	ldr	r1, [r7, #12]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	4413      	add	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	333e      	adds	r3, #62	; 0x3e
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	e00b      	b.n	8008aa8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008a90:	78fb      	ldrb	r3, [r7, #3]
 8008a92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a96:	68f9      	ldr	r1, [r7, #12]
 8008a98:	4613      	mov	r3, r2
 8008a9a:	00db      	lsls	r3, r3, #3
 8008a9c:	4413      	add	r3, r2
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	440b      	add	r3, r1
 8008aa2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008aa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3714      	adds	r7, #20
 8008aac:	46bd      	mov	sp, r7
 8008aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab2:	4770      	bx	lr

08008ab4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
 8008abc:	460b      	mov	r3, r1
 8008abe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008ace:	78fa      	ldrb	r2, [r7, #3]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7fa f8ba 	bl	8002c4c <HAL_PCD_SetAddress>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008adc:	7bfb      	ldrb	r3, [r7, #15]
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f000 f874 	bl	8008bcc <USBD_Get_USB_Status>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ae8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b086      	sub	sp, #24
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	60f8      	str	r0, [r7, #12]
 8008afa:	607a      	str	r2, [r7, #4]
 8008afc:	603b      	str	r3, [r7, #0]
 8008afe:	460b      	mov	r3, r1
 8008b00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b02:	2300      	movs	r3, #0
 8008b04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b10:	7af9      	ldrb	r1, [r7, #11]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	f7fa f9d3 	bl	8002ec0 <HAL_PCD_EP_Transmit>
 8008b1a:	4603      	mov	r3, r0
 8008b1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b1e:	7dfb      	ldrb	r3, [r7, #23]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f000 f853 	bl	8008bcc <USBD_Get_USB_Status>
 8008b26:	4603      	mov	r3, r0
 8008b28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3718      	adds	r7, #24
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	60f8      	str	r0, [r7, #12]
 8008b3c:	607a      	str	r2, [r7, #4]
 8008b3e:	603b      	str	r3, [r7, #0]
 8008b40:	460b      	mov	r3, r1
 8008b42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008b52:	7af9      	ldrb	r1, [r7, #11]
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	687a      	ldr	r2, [r7, #4]
 8008b58:	f7fa f94f 	bl	8002dfa <HAL_PCD_EP_Receive>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 f832 	bl	8008bcc <USBD_Get_USB_Status>
 8008b68:	4603      	mov	r3, r0
 8008b6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008b6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3718      	adds	r7, #24
 8008b72:	46bd      	mov	sp, r7
 8008b74:	bd80      	pop	{r7, pc}

08008b76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b76:	b580      	push	{r7, lr}
 8008b78:	b082      	sub	sp, #8
 8008b7a:	af00      	add	r7, sp, #0
 8008b7c:	6078      	str	r0, [r7, #4]
 8008b7e:	460b      	mov	r3, r1
 8008b80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008b88:	78fa      	ldrb	r2, [r7, #3]
 8008b8a:	4611      	mov	r1, r2
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f7fa f97f 	bl	8002e90 <HAL_PCD_EP_GetRxCount>
 8008b92:	4603      	mov	r3, r0
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008ba4:	4b03      	ldr	r3, [pc, #12]	; (8008bb4 <USBD_static_malloc+0x18>)
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	370c      	adds	r7, #12
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	2000251c 	.word	0x2000251c

08008bb8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	6078      	str	r0, [r7, #4]

}
 8008bc0:	bf00      	nop
 8008bc2:	370c      	adds	r7, #12
 8008bc4:	46bd      	mov	sp, r7
 8008bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bca:	4770      	bx	lr

08008bcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b085      	sub	sp, #20
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	2b03      	cmp	r3, #3
 8008bde:	d817      	bhi.n	8008c10 <USBD_Get_USB_Status+0x44>
 8008be0:	a201      	add	r2, pc, #4	; (adr r2, 8008be8 <USBD_Get_USB_Status+0x1c>)
 8008be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be6:	bf00      	nop
 8008be8:	08008bf9 	.word	0x08008bf9
 8008bec:	08008bff 	.word	0x08008bff
 8008bf0:	08008c05 	.word	0x08008c05
 8008bf4:	08008c0b 	.word	0x08008c0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	73fb      	strb	r3, [r7, #15]
    break;
 8008bfc:	e00b      	b.n	8008c16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008bfe:	2303      	movs	r3, #3
 8008c00:	73fb      	strb	r3, [r7, #15]
    break;
 8008c02:	e008      	b.n	8008c16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]
    break;
 8008c08:	e005      	b.n	8008c16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c0a:	2303      	movs	r3, #3
 8008c0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c0e:	e002      	b.n	8008c16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c10:	2303      	movs	r3, #3
 8008c12:	73fb      	strb	r3, [r7, #15]
    break;
 8008c14:	bf00      	nop
  }
  return usb_status;
 8008c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <gcvt>:
 8008c24:	b530      	push	{r4, r5, lr}
 8008c26:	2200      	movs	r2, #0
 8008c28:	b085      	sub	sp, #20
 8008c2a:	460c      	mov	r4, r1
 8008c2c:	4605      	mov	r5, r0
 8008c2e:	2300      	movs	r3, #0
 8008c30:	ec51 0b10 	vmov	r0, r1, d0
 8008c34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008c38:	f7f7 ff50 	bl	8000adc <__aeabi_dcmplt>
 8008c3c:	ed9d 0b02 	vldr	d0, [sp, #8]
 8008c40:	4622      	mov	r2, r4
 8008c42:	b118      	cbz	r0, 8008c4c <gcvt+0x28>
 8008c44:	232d      	movs	r3, #45	; 0x2d
 8008c46:	f802 3b01 	strb.w	r3, [r2], #1
 8008c4a:	3d01      	subs	r5, #1
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4806      	ldr	r0, [pc, #24]	; (8008c68 <gcvt+0x44>)
 8008c50:	9300      	str	r3, [sp, #0]
 8008c52:	4629      	mov	r1, r5
 8008c54:	2367      	movs	r3, #103	; 0x67
 8008c56:	6800      	ldr	r0, [r0, #0]
 8008c58:	f000 f8de 	bl	8008e18 <_gcvt>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	bf14      	ite	ne
 8008c60:	4620      	movne	r0, r4
 8008c62:	2000      	moveq	r0, #0
 8008c64:	b005      	add	sp, #20
 8008c66:	bd30      	pop	{r4, r5, pc}
 8008c68:	20000114 	.word	0x20000114

08008c6c <__errno>:
 8008c6c:	4b01      	ldr	r3, [pc, #4]	; (8008c74 <__errno+0x8>)
 8008c6e:	6818      	ldr	r0, [r3, #0]
 8008c70:	4770      	bx	lr
 8008c72:	bf00      	nop
 8008c74:	20000114 	.word	0x20000114

08008c78 <__libc_init_array>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	4d0d      	ldr	r5, [pc, #52]	; (8008cb0 <__libc_init_array+0x38>)
 8008c7c:	4c0d      	ldr	r4, [pc, #52]	; (8008cb4 <__libc_init_array+0x3c>)
 8008c7e:	1b64      	subs	r4, r4, r5
 8008c80:	10a4      	asrs	r4, r4, #2
 8008c82:	2600      	movs	r6, #0
 8008c84:	42a6      	cmp	r6, r4
 8008c86:	d109      	bne.n	8008c9c <__libc_init_array+0x24>
 8008c88:	4d0b      	ldr	r5, [pc, #44]	; (8008cb8 <__libc_init_array+0x40>)
 8008c8a:	4c0c      	ldr	r4, [pc, #48]	; (8008cbc <__libc_init_array+0x44>)
 8008c8c:	f002 fbba 	bl	800b404 <_init>
 8008c90:	1b64      	subs	r4, r4, r5
 8008c92:	10a4      	asrs	r4, r4, #2
 8008c94:	2600      	movs	r6, #0
 8008c96:	42a6      	cmp	r6, r4
 8008c98:	d105      	bne.n	8008ca6 <__libc_init_array+0x2e>
 8008c9a:	bd70      	pop	{r4, r5, r6, pc}
 8008c9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ca0:	4798      	blx	r3
 8008ca2:	3601      	adds	r6, #1
 8008ca4:	e7ee      	b.n	8008c84 <__libc_init_array+0xc>
 8008ca6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008caa:	4798      	blx	r3
 8008cac:	3601      	adds	r6, #1
 8008cae:	e7f2      	b.n	8008c96 <__libc_init_array+0x1e>
 8008cb0:	0800b758 	.word	0x0800b758
 8008cb4:	0800b758 	.word	0x0800b758
 8008cb8:	0800b758 	.word	0x0800b758
 8008cbc:	0800b75c 	.word	0x0800b75c

08008cc0 <memcpy>:
 8008cc0:	440a      	add	r2, r1
 8008cc2:	4291      	cmp	r1, r2
 8008cc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008cc8:	d100      	bne.n	8008ccc <memcpy+0xc>
 8008cca:	4770      	bx	lr
 8008ccc:	b510      	push	{r4, lr}
 8008cce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008cd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008cd6:	4291      	cmp	r1, r2
 8008cd8:	d1f9      	bne.n	8008cce <memcpy+0xe>
 8008cda:	bd10      	pop	{r4, pc}

08008cdc <memset>:
 8008cdc:	4402      	add	r2, r0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d100      	bne.n	8008ce6 <memset+0xa>
 8008ce4:	4770      	bx	lr
 8008ce6:	f803 1b01 	strb.w	r1, [r3], #1
 8008cea:	e7f9      	b.n	8008ce0 <memset+0x4>

08008cec <strcat>:
 8008cec:	b510      	push	{r4, lr}
 8008cee:	4602      	mov	r2, r0
 8008cf0:	7814      	ldrb	r4, [r2, #0]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	3201      	adds	r2, #1
 8008cf6:	2c00      	cmp	r4, #0
 8008cf8:	d1fa      	bne.n	8008cf0 <strcat+0x4>
 8008cfa:	3b01      	subs	r3, #1
 8008cfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d00:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	d1f9      	bne.n	8008cfc <strcat+0x10>
 8008d08:	bd10      	pop	{r4, pc}

08008d0a <strchr>:
 8008d0a:	b2c9      	uxtb	r1, r1
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d12:	b11a      	cbz	r2, 8008d1c <strchr+0x12>
 8008d14:	428a      	cmp	r2, r1
 8008d16:	d1f9      	bne.n	8008d0c <strchr+0x2>
 8008d18:	4618      	mov	r0, r3
 8008d1a:	4770      	bx	lr
 8008d1c:	2900      	cmp	r1, #0
 8008d1e:	bf18      	it	ne
 8008d20:	2300      	movne	r3, #0
 8008d22:	e7f9      	b.n	8008d18 <strchr+0xe>

08008d24 <print_e>:
 8008d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d26:	b087      	sub	sp, #28
 8008d28:	ec43 2b10 	vmov	d0, r2, r3
 8008d2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8008d2e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8008d32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8008d34:	ab04      	add	r3, sp, #16
 8008d36:	9301      	str	r3, [sp, #4]
 8008d38:	ab03      	add	r3, sp, #12
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	1c62      	adds	r2, r4, #1
 8008d3e:	ab05      	add	r3, sp, #20
 8008d40:	460f      	mov	r7, r1
 8008d42:	2102      	movs	r1, #2
 8008d44:	f000 fe38 	bl	80099b8 <_dtoa_r>
 8008d48:	9a05      	ldr	r2, [sp, #20]
 8008d4a:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d4e:	429a      	cmp	r2, r3
 8008d50:	d105      	bne.n	8008d5e <print_e+0x3a>
 8008d52:	4601      	mov	r1, r0
 8008d54:	4638      	mov	r0, r7
 8008d56:	f000 fd7b 	bl	8009850 <strcpy>
 8008d5a:	b007      	add	sp, #28
 8008d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d5e:	463b      	mov	r3, r7
 8008d60:	7801      	ldrb	r1, [r0, #0]
 8008d62:	f803 1b01 	strb.w	r1, [r3], #1
 8008d66:	2c00      	cmp	r4, #0
 8008d68:	bfc8      	it	gt
 8008d6a:	2501      	movgt	r5, #1
 8008d6c:	212e      	movs	r1, #46	; 0x2e
 8008d6e:	f810 7f01 	ldrb.w	r7, [r0, #1]!
 8008d72:	b10f      	cbz	r7, 8008d78 <print_e+0x54>
 8008d74:	2c00      	cmp	r4, #0
 8008d76:	dc37      	bgt.n	8008de8 <print_e+0xc4>
 8008d78:	2e67      	cmp	r6, #103	; 0x67
 8008d7a:	d046      	beq.n	8008e0a <print_e+0xe6>
 8008d7c:	2e47      	cmp	r6, #71	; 0x47
 8008d7e:	d046      	beq.n	8008e0e <print_e+0xea>
 8008d80:	212e      	movs	r1, #46	; 0x2e
 8008d82:	2030      	movs	r0, #48	; 0x30
 8008d84:	2c00      	cmp	r4, #0
 8008d86:	dc38      	bgt.n	8008dfa <print_e+0xd6>
 8008d88:	1e51      	subs	r1, r2, #1
 8008d8a:	2900      	cmp	r1, #0
 8008d8c:	bfb8      	it	lt
 8008d8e:	f1c2 0201 	rsblt	r2, r2, #1
 8008d92:	4618      	mov	r0, r3
 8008d94:	9105      	str	r1, [sp, #20]
 8008d96:	bfac      	ite	ge
 8008d98:	222b      	movge	r2, #43	; 0x2b
 8008d9a:	9205      	strlt	r2, [sp, #20]
 8008d9c:	f800 6b02 	strb.w	r6, [r0], #2
 8008da0:	bfa8      	it	ge
 8008da2:	705a      	strbge	r2, [r3, #1]
 8008da4:	9a05      	ldr	r2, [sp, #20]
 8008da6:	bfbc      	itt	lt
 8008da8:	212d      	movlt	r1, #45	; 0x2d
 8008daa:	7059      	strblt	r1, [r3, #1]
 8008dac:	2a63      	cmp	r2, #99	; 0x63
 8008dae:	dd0b      	ble.n	8008dc8 <print_e+0xa4>
 8008db0:	2164      	movs	r1, #100	; 0x64
 8008db2:	fb92 f1f1 	sdiv	r1, r2, r1
 8008db6:	f101 0430 	add.w	r4, r1, #48	; 0x30
 8008dba:	1cd8      	adds	r0, r3, #3
 8008dbc:	709c      	strb	r4, [r3, #2]
 8008dbe:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8008dc2:	fb03 2201 	mla	r2, r3, r1, r2
 8008dc6:	9205      	str	r2, [sp, #20]
 8008dc8:	9b05      	ldr	r3, [sp, #20]
 8008dca:	220a      	movs	r2, #10
 8008dcc:	fb93 f2f2 	sdiv	r2, r3, r2
 8008dd0:	f102 0130 	add.w	r1, r2, #48	; 0x30
 8008dd4:	7001      	strb	r1, [r0, #0]
 8008dd6:	f06f 0109 	mvn.w	r1, #9
 8008dda:	fb01 3302 	mla	r3, r1, r2, r3
 8008dde:	3330      	adds	r3, #48	; 0x30
 8008de0:	7043      	strb	r3, [r0, #1]
 8008de2:	2300      	movs	r3, #0
 8008de4:	7083      	strb	r3, [r0, #2]
 8008de6:	e7b8      	b.n	8008d5a <print_e+0x36>
 8008de8:	b10d      	cbz	r5, 8008dee <print_e+0xca>
 8008dea:	f803 1b01 	strb.w	r1, [r3], #1
 8008dee:	7805      	ldrb	r5, [r0, #0]
 8008df0:	f803 5b01 	strb.w	r5, [r3], #1
 8008df4:	3c01      	subs	r4, #1
 8008df6:	2500      	movs	r5, #0
 8008df8:	e7b9      	b.n	8008d6e <print_e+0x4a>
 8008dfa:	b10d      	cbz	r5, 8008e00 <print_e+0xdc>
 8008dfc:	f803 1b01 	strb.w	r1, [r3], #1
 8008e00:	f803 0b01 	strb.w	r0, [r3], #1
 8008e04:	3c01      	subs	r4, #1
 8008e06:	2500      	movs	r5, #0
 8008e08:	e7bc      	b.n	8008d84 <print_e+0x60>
 8008e0a:	2665      	movs	r6, #101	; 0x65
 8008e0c:	e7bc      	b.n	8008d88 <print_e+0x64>
 8008e0e:	2645      	movs	r6, #69	; 0x45
 8008e10:	e7ba      	b.n	8008d88 <print_e+0x64>
 8008e12:	0000      	movs	r0, r0
 8008e14:	0000      	movs	r0, r0
	...

08008e18 <_gcvt>:
 8008e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e1c:	ec55 4b10 	vmov	r4, r5, d0
 8008e20:	b088      	sub	sp, #32
 8008e22:	4681      	mov	r9, r0
 8008e24:	4688      	mov	r8, r1
 8008e26:	4616      	mov	r6, r2
 8008e28:	469a      	mov	sl, r3
 8008e2a:	ee10 0a10 	vmov	r0, s0
 8008e2e:	2200      	movs	r2, #0
 8008e30:	2300      	movs	r3, #0
 8008e32:	4629      	mov	r1, r5
 8008e34:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8008e36:	f7f7 fe51 	bl	8000adc <__aeabi_dcmplt>
 8008e3a:	b110      	cbz	r0, 8008e42 <_gcvt+0x2a>
 8008e3c:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8008e40:	461d      	mov	r5, r3
 8008e42:	2200      	movs	r2, #0
 8008e44:	2300      	movs	r3, #0
 8008e46:	4620      	mov	r0, r4
 8008e48:	4629      	mov	r1, r5
 8008e4a:	f7f7 fe3d 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e4e:	b138      	cbz	r0, 8008e60 <_gcvt+0x48>
 8008e50:	2330      	movs	r3, #48	; 0x30
 8008e52:	7033      	strb	r3, [r6, #0]
 8008e54:	2300      	movs	r3, #0
 8008e56:	7073      	strb	r3, [r6, #1]
 8008e58:	4630      	mov	r0, r6
 8008e5a:	b008      	add	sp, #32
 8008e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e60:	a34b      	add	r3, pc, #300	; (adr r3, 8008f90 <_gcvt+0x178>)
 8008e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e66:	4620      	mov	r0, r4
 8008e68:	4629      	mov	r1, r5
 8008e6a:	f7f7 fe41 	bl	8000af0 <__aeabi_dcmple>
 8008e6e:	b158      	cbz	r0, 8008e88 <_gcvt+0x70>
 8008e70:	f108 31ff 	add.w	r1, r8, #4294967295
 8008e74:	9100      	str	r1, [sp, #0]
 8008e76:	e9cd a701 	strd	sl, r7, [sp, #4]
 8008e7a:	4622      	mov	r2, r4
 8008e7c:	462b      	mov	r3, r5
 8008e7e:	4631      	mov	r1, r6
 8008e80:	4648      	mov	r0, r9
 8008e82:	f7ff ff4f 	bl	8008d24 <print_e>
 8008e86:	e7e7      	b.n	8008e58 <_gcvt+0x40>
 8008e88:	4640      	mov	r0, r8
 8008e8a:	f000 fc09 	bl	80096a0 <_mprec_log10>
 8008e8e:	4622      	mov	r2, r4
 8008e90:	ec51 0b10 	vmov	r0, r1, d0
 8008e94:	462b      	mov	r3, r5
 8008e96:	f7f7 fe2b 	bl	8000af0 <__aeabi_dcmple>
 8008e9a:	2800      	cmp	r0, #0
 8008e9c:	d1e8      	bne.n	8008e70 <_gcvt+0x58>
 8008e9e:	ab07      	add	r3, sp, #28
 8008ea0:	9301      	str	r3, [sp, #4]
 8008ea2:	ab06      	add	r3, sp, #24
 8008ea4:	9300      	str	r3, [sp, #0]
 8008ea6:	4642      	mov	r2, r8
 8008ea8:	ab05      	add	r3, sp, #20
 8008eaa:	ec45 4b10 	vmov	d0, r4, r5
 8008eae:	2102      	movs	r1, #2
 8008eb0:	4648      	mov	r0, r9
 8008eb2:	f000 fd81 	bl	80099b8 <_dtoa_r>
 8008eb6:	9a05      	ldr	r2, [sp, #20]
 8008eb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	d00e      	beq.n	8008ede <_gcvt+0xc6>
 8008ec0:	4633      	mov	r3, r6
 8008ec2:	44b0      	add	r8, r6
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008eca:	9c05      	ldr	r4, [sp, #20]
 8008ecc:	eba8 0203 	sub.w	r2, r8, r3
 8008ed0:	b109      	cbz	r1, 8008ed6 <_gcvt+0xbe>
 8008ed2:	2c00      	cmp	r4, #0
 8008ed4:	dc08      	bgt.n	8008ee8 <_gcvt+0xd0>
 8008ed6:	2100      	movs	r1, #0
 8008ed8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8008edc:	e00d      	b.n	8008efa <_gcvt+0xe2>
 8008ede:	4601      	mov	r1, r0
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f000 fcb5 	bl	8009850 <strcpy>
 8008ee6:	e7b7      	b.n	8008e58 <_gcvt+0x40>
 8008ee8:	3c01      	subs	r4, #1
 8008eea:	f803 1b01 	strb.w	r1, [r3], #1
 8008eee:	9405      	str	r4, [sp, #20]
 8008ef0:	e7e8      	b.n	8008ec4 <_gcvt+0xac>
 8008ef2:	f803 cb01 	strb.w	ip, [r3], #1
 8008ef6:	3a01      	subs	r2, #1
 8008ef8:	2101      	movs	r1, #1
 8008efa:	2c00      	cmp	r4, #0
 8008efc:	4620      	mov	r0, r4
 8008efe:	dc2a      	bgt.n	8008f56 <_gcvt+0x13e>
 8008f00:	b101      	cbz	r1, 8008f04 <_gcvt+0xec>
 8008f02:	9405      	str	r4, [sp, #20]
 8008f04:	b90f      	cbnz	r7, 8008f0a <_gcvt+0xf2>
 8008f06:	7829      	ldrb	r1, [r5, #0]
 8008f08:	b311      	cbz	r1, 8008f50 <_gcvt+0x138>
 8008f0a:	42b3      	cmp	r3, r6
 8008f0c:	bf04      	itt	eq
 8008f0e:	2130      	moveq	r1, #48	; 0x30
 8008f10:	f803 1b01 	strbeq.w	r1, [r3], #1
 8008f14:	212e      	movs	r1, #46	; 0x2e
 8008f16:	7019      	strb	r1, [r3, #0]
 8008f18:	9905      	ldr	r1, [sp, #20]
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	2400      	movs	r4, #0
 8008f1e:	eba1 0c03 	sub.w	ip, r1, r3
 8008f22:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8008f26:	eb1c 0f00 	cmn.w	ip, r0
 8008f2a:	d41c      	bmi.n	8008f66 <_gcvt+0x14e>
 8008f2c:	2900      	cmp	r1, #0
 8008f2e:	f1c1 0000 	rsb	r0, r1, #0
 8008f32:	bfc8      	it	gt
 8008f34:	2000      	movgt	r0, #0
 8008f36:	f100 0c01 	add.w	ip, r0, #1
 8008f3a:	4463      	add	r3, ip
 8008f3c:	4401      	add	r1, r0
 8008f3e:	b104      	cbz	r4, 8008f42 <_gcvt+0x12a>
 8008f40:	9105      	str	r1, [sp, #20]
 8008f42:	1e69      	subs	r1, r5, #1
 8008f44:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008f48:	b108      	cbz	r0, 8008f4e <_gcvt+0x136>
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	dc0f      	bgt.n	8008f6e <_gcvt+0x156>
 8008f4e:	b9df      	cbnz	r7, 8008f88 <_gcvt+0x170>
 8008f50:	2200      	movs	r2, #0
 8008f52:	701a      	strb	r2, [r3, #0]
 8008f54:	e780      	b.n	8008e58 <_gcvt+0x40>
 8008f56:	2a00      	cmp	r2, #0
 8008f58:	f104 34ff 	add.w	r4, r4, #4294967295
 8008f5c:	dcc9      	bgt.n	8008ef2 <_gcvt+0xda>
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	d0d0      	beq.n	8008f04 <_gcvt+0xec>
 8008f62:	9005      	str	r0, [sp, #20]
 8008f64:	e7ce      	b.n	8008f04 <_gcvt+0xec>
 8008f66:	f800 ef01 	strb.w	lr, [r0, #1]!
 8008f6a:	2401      	movs	r4, #1
 8008f6c:	e7db      	b.n	8008f26 <_gcvt+0x10e>
 8008f6e:	f803 0b01 	strb.w	r0, [r3], #1
 8008f72:	3a01      	subs	r2, #1
 8008f74:	e7e6      	b.n	8008f44 <_gcvt+0x12c>
 8008f76:	f801 5b01 	strb.w	r5, [r1], #1
 8008f7a:	1a60      	subs	r0, r4, r1
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	dcfa      	bgt.n	8008f76 <_gcvt+0x15e>
 8008f80:	2a00      	cmp	r2, #0
 8008f82:	bfa8      	it	ge
 8008f84:	189b      	addge	r3, r3, r2
 8008f86:	e7e3      	b.n	8008f50 <_gcvt+0x138>
 8008f88:	4619      	mov	r1, r3
 8008f8a:	189c      	adds	r4, r3, r2
 8008f8c:	2530      	movs	r5, #48	; 0x30
 8008f8e:	e7f4      	b.n	8008f7a <_gcvt+0x162>
 8008f90:	eb1c432d 	.word	0xeb1c432d
 8008f94:	3f1a36e2 	.word	0x3f1a36e2

08008f98 <_Balloc>:
 8008f98:	b570      	push	{r4, r5, r6, lr}
 8008f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008f9c:	4604      	mov	r4, r0
 8008f9e:	460d      	mov	r5, r1
 8008fa0:	b976      	cbnz	r6, 8008fc0 <_Balloc+0x28>
 8008fa2:	2010      	movs	r0, #16
 8008fa4:	f001 fb08 	bl	800a5b8 <malloc>
 8008fa8:	4602      	mov	r2, r0
 8008faa:	6260      	str	r0, [r4, #36]	; 0x24
 8008fac:	b920      	cbnz	r0, 8008fb8 <_Balloc+0x20>
 8008fae:	4b18      	ldr	r3, [pc, #96]	; (8009010 <_Balloc+0x78>)
 8008fb0:	4818      	ldr	r0, [pc, #96]	; (8009014 <_Balloc+0x7c>)
 8008fb2:	2166      	movs	r1, #102	; 0x66
 8008fb4:	f000 fc54 	bl	8009860 <__assert_func>
 8008fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fbc:	6006      	str	r6, [r0, #0]
 8008fbe:	60c6      	str	r6, [r0, #12]
 8008fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fc2:	68f3      	ldr	r3, [r6, #12]
 8008fc4:	b183      	cbz	r3, 8008fe8 <_Balloc+0x50>
 8008fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fce:	b9b8      	cbnz	r0, 8009000 <_Balloc+0x68>
 8008fd0:	2101      	movs	r1, #1
 8008fd2:	fa01 f605 	lsl.w	r6, r1, r5
 8008fd6:	1d72      	adds	r2, r6, #5
 8008fd8:	0092      	lsls	r2, r2, #2
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f000 fb7e 	bl	80096dc <_calloc_r>
 8008fe0:	b160      	cbz	r0, 8008ffc <_Balloc+0x64>
 8008fe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008fe6:	e00e      	b.n	8009006 <_Balloc+0x6e>
 8008fe8:	2221      	movs	r2, #33	; 0x21
 8008fea:	2104      	movs	r1, #4
 8008fec:	4620      	mov	r0, r4
 8008fee:	f000 fb75 	bl	80096dc <_calloc_r>
 8008ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff4:	60f0      	str	r0, [r6, #12]
 8008ff6:	68db      	ldr	r3, [r3, #12]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d1e4      	bne.n	8008fc6 <_Balloc+0x2e>
 8008ffc:	2000      	movs	r0, #0
 8008ffe:	bd70      	pop	{r4, r5, r6, pc}
 8009000:	6802      	ldr	r2, [r0, #0]
 8009002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009006:	2300      	movs	r3, #0
 8009008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800900c:	e7f7      	b.n	8008ffe <_Balloc+0x66>
 800900e:	bf00      	nop
 8009010:	0800b494 	.word	0x0800b494
 8009014:	0800b4ab 	.word	0x0800b4ab

08009018 <_Bfree>:
 8009018:	b570      	push	{r4, r5, r6, lr}
 800901a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800901c:	4605      	mov	r5, r0
 800901e:	460c      	mov	r4, r1
 8009020:	b976      	cbnz	r6, 8009040 <_Bfree+0x28>
 8009022:	2010      	movs	r0, #16
 8009024:	f001 fac8 	bl	800a5b8 <malloc>
 8009028:	4602      	mov	r2, r0
 800902a:	6268      	str	r0, [r5, #36]	; 0x24
 800902c:	b920      	cbnz	r0, 8009038 <_Bfree+0x20>
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <_Bfree+0x3c>)
 8009030:	4809      	ldr	r0, [pc, #36]	; (8009058 <_Bfree+0x40>)
 8009032:	218a      	movs	r1, #138	; 0x8a
 8009034:	f000 fc14 	bl	8009860 <__assert_func>
 8009038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800903c:	6006      	str	r6, [r0, #0]
 800903e:	60c6      	str	r6, [r0, #12]
 8009040:	b13c      	cbz	r4, 8009052 <_Bfree+0x3a>
 8009042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009044:	6862      	ldr	r2, [r4, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800904c:	6021      	str	r1, [r4, #0]
 800904e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009052:	bd70      	pop	{r4, r5, r6, pc}
 8009054:	0800b494 	.word	0x0800b494
 8009058:	0800b4ab 	.word	0x0800b4ab

0800905c <__multadd>:
 800905c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009060:	690d      	ldr	r5, [r1, #16]
 8009062:	4607      	mov	r7, r0
 8009064:	460c      	mov	r4, r1
 8009066:	461e      	mov	r6, r3
 8009068:	f101 0c14 	add.w	ip, r1, #20
 800906c:	2000      	movs	r0, #0
 800906e:	f8dc 3000 	ldr.w	r3, [ip]
 8009072:	b299      	uxth	r1, r3
 8009074:	fb02 6101 	mla	r1, r2, r1, r6
 8009078:	0c1e      	lsrs	r6, r3, #16
 800907a:	0c0b      	lsrs	r3, r1, #16
 800907c:	fb02 3306 	mla	r3, r2, r6, r3
 8009080:	b289      	uxth	r1, r1
 8009082:	3001      	adds	r0, #1
 8009084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009088:	4285      	cmp	r5, r0
 800908a:	f84c 1b04 	str.w	r1, [ip], #4
 800908e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009092:	dcec      	bgt.n	800906e <__multadd+0x12>
 8009094:	b30e      	cbz	r6, 80090da <__multadd+0x7e>
 8009096:	68a3      	ldr	r3, [r4, #8]
 8009098:	42ab      	cmp	r3, r5
 800909a:	dc19      	bgt.n	80090d0 <__multadd+0x74>
 800909c:	6861      	ldr	r1, [r4, #4]
 800909e:	4638      	mov	r0, r7
 80090a0:	3101      	adds	r1, #1
 80090a2:	f7ff ff79 	bl	8008f98 <_Balloc>
 80090a6:	4680      	mov	r8, r0
 80090a8:	b928      	cbnz	r0, 80090b6 <__multadd+0x5a>
 80090aa:	4602      	mov	r2, r0
 80090ac:	4b0c      	ldr	r3, [pc, #48]	; (80090e0 <__multadd+0x84>)
 80090ae:	480d      	ldr	r0, [pc, #52]	; (80090e4 <__multadd+0x88>)
 80090b0:	21b5      	movs	r1, #181	; 0xb5
 80090b2:	f000 fbd5 	bl	8009860 <__assert_func>
 80090b6:	6922      	ldr	r2, [r4, #16]
 80090b8:	3202      	adds	r2, #2
 80090ba:	f104 010c 	add.w	r1, r4, #12
 80090be:	0092      	lsls	r2, r2, #2
 80090c0:	300c      	adds	r0, #12
 80090c2:	f7ff fdfd 	bl	8008cc0 <memcpy>
 80090c6:	4621      	mov	r1, r4
 80090c8:	4638      	mov	r0, r7
 80090ca:	f7ff ffa5 	bl	8009018 <_Bfree>
 80090ce:	4644      	mov	r4, r8
 80090d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80090d4:	3501      	adds	r5, #1
 80090d6:	615e      	str	r6, [r3, #20]
 80090d8:	6125      	str	r5, [r4, #16]
 80090da:	4620      	mov	r0, r4
 80090dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090e0:	0800b507 	.word	0x0800b507
 80090e4:	0800b4ab 	.word	0x0800b4ab

080090e8 <__hi0bits>:
 80090e8:	0c03      	lsrs	r3, r0, #16
 80090ea:	041b      	lsls	r3, r3, #16
 80090ec:	b9d3      	cbnz	r3, 8009124 <__hi0bits+0x3c>
 80090ee:	0400      	lsls	r0, r0, #16
 80090f0:	2310      	movs	r3, #16
 80090f2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80090f6:	bf04      	itt	eq
 80090f8:	0200      	lsleq	r0, r0, #8
 80090fa:	3308      	addeq	r3, #8
 80090fc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009100:	bf04      	itt	eq
 8009102:	0100      	lsleq	r0, r0, #4
 8009104:	3304      	addeq	r3, #4
 8009106:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800910a:	bf04      	itt	eq
 800910c:	0080      	lsleq	r0, r0, #2
 800910e:	3302      	addeq	r3, #2
 8009110:	2800      	cmp	r0, #0
 8009112:	db05      	blt.n	8009120 <__hi0bits+0x38>
 8009114:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009118:	f103 0301 	add.w	r3, r3, #1
 800911c:	bf08      	it	eq
 800911e:	2320      	moveq	r3, #32
 8009120:	4618      	mov	r0, r3
 8009122:	4770      	bx	lr
 8009124:	2300      	movs	r3, #0
 8009126:	e7e4      	b.n	80090f2 <__hi0bits+0xa>

08009128 <__lo0bits>:
 8009128:	6803      	ldr	r3, [r0, #0]
 800912a:	f013 0207 	ands.w	r2, r3, #7
 800912e:	4601      	mov	r1, r0
 8009130:	d00b      	beq.n	800914a <__lo0bits+0x22>
 8009132:	07da      	lsls	r2, r3, #31
 8009134:	d423      	bmi.n	800917e <__lo0bits+0x56>
 8009136:	0798      	lsls	r0, r3, #30
 8009138:	bf49      	itett	mi
 800913a:	085b      	lsrmi	r3, r3, #1
 800913c:	089b      	lsrpl	r3, r3, #2
 800913e:	2001      	movmi	r0, #1
 8009140:	600b      	strmi	r3, [r1, #0]
 8009142:	bf5c      	itt	pl
 8009144:	600b      	strpl	r3, [r1, #0]
 8009146:	2002      	movpl	r0, #2
 8009148:	4770      	bx	lr
 800914a:	b298      	uxth	r0, r3
 800914c:	b9a8      	cbnz	r0, 800917a <__lo0bits+0x52>
 800914e:	0c1b      	lsrs	r3, r3, #16
 8009150:	2010      	movs	r0, #16
 8009152:	b2da      	uxtb	r2, r3
 8009154:	b90a      	cbnz	r2, 800915a <__lo0bits+0x32>
 8009156:	3008      	adds	r0, #8
 8009158:	0a1b      	lsrs	r3, r3, #8
 800915a:	071a      	lsls	r2, r3, #28
 800915c:	bf04      	itt	eq
 800915e:	091b      	lsreq	r3, r3, #4
 8009160:	3004      	addeq	r0, #4
 8009162:	079a      	lsls	r2, r3, #30
 8009164:	bf04      	itt	eq
 8009166:	089b      	lsreq	r3, r3, #2
 8009168:	3002      	addeq	r0, #2
 800916a:	07da      	lsls	r2, r3, #31
 800916c:	d403      	bmi.n	8009176 <__lo0bits+0x4e>
 800916e:	085b      	lsrs	r3, r3, #1
 8009170:	f100 0001 	add.w	r0, r0, #1
 8009174:	d005      	beq.n	8009182 <__lo0bits+0x5a>
 8009176:	600b      	str	r3, [r1, #0]
 8009178:	4770      	bx	lr
 800917a:	4610      	mov	r0, r2
 800917c:	e7e9      	b.n	8009152 <__lo0bits+0x2a>
 800917e:	2000      	movs	r0, #0
 8009180:	4770      	bx	lr
 8009182:	2020      	movs	r0, #32
 8009184:	4770      	bx	lr
	...

08009188 <__i2b>:
 8009188:	b510      	push	{r4, lr}
 800918a:	460c      	mov	r4, r1
 800918c:	2101      	movs	r1, #1
 800918e:	f7ff ff03 	bl	8008f98 <_Balloc>
 8009192:	4602      	mov	r2, r0
 8009194:	b928      	cbnz	r0, 80091a2 <__i2b+0x1a>
 8009196:	4b05      	ldr	r3, [pc, #20]	; (80091ac <__i2b+0x24>)
 8009198:	4805      	ldr	r0, [pc, #20]	; (80091b0 <__i2b+0x28>)
 800919a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800919e:	f000 fb5f 	bl	8009860 <__assert_func>
 80091a2:	2301      	movs	r3, #1
 80091a4:	6144      	str	r4, [r0, #20]
 80091a6:	6103      	str	r3, [r0, #16]
 80091a8:	bd10      	pop	{r4, pc}
 80091aa:	bf00      	nop
 80091ac:	0800b507 	.word	0x0800b507
 80091b0:	0800b4ab 	.word	0x0800b4ab

080091b4 <__multiply>:
 80091b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091b8:	4691      	mov	r9, r2
 80091ba:	690a      	ldr	r2, [r1, #16]
 80091bc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80091c0:	429a      	cmp	r2, r3
 80091c2:	bfb8      	it	lt
 80091c4:	460b      	movlt	r3, r1
 80091c6:	460c      	mov	r4, r1
 80091c8:	bfbc      	itt	lt
 80091ca:	464c      	movlt	r4, r9
 80091cc:	4699      	movlt	r9, r3
 80091ce:	6927      	ldr	r7, [r4, #16]
 80091d0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80091d4:	68a3      	ldr	r3, [r4, #8]
 80091d6:	6861      	ldr	r1, [r4, #4]
 80091d8:	eb07 060a 	add.w	r6, r7, sl
 80091dc:	42b3      	cmp	r3, r6
 80091de:	b085      	sub	sp, #20
 80091e0:	bfb8      	it	lt
 80091e2:	3101      	addlt	r1, #1
 80091e4:	f7ff fed8 	bl	8008f98 <_Balloc>
 80091e8:	b930      	cbnz	r0, 80091f8 <__multiply+0x44>
 80091ea:	4602      	mov	r2, r0
 80091ec:	4b44      	ldr	r3, [pc, #272]	; (8009300 <__multiply+0x14c>)
 80091ee:	4845      	ldr	r0, [pc, #276]	; (8009304 <__multiply+0x150>)
 80091f0:	f240 115d 	movw	r1, #349	; 0x15d
 80091f4:	f000 fb34 	bl	8009860 <__assert_func>
 80091f8:	f100 0514 	add.w	r5, r0, #20
 80091fc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009200:	462b      	mov	r3, r5
 8009202:	2200      	movs	r2, #0
 8009204:	4543      	cmp	r3, r8
 8009206:	d321      	bcc.n	800924c <__multiply+0x98>
 8009208:	f104 0314 	add.w	r3, r4, #20
 800920c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009210:	f109 0314 	add.w	r3, r9, #20
 8009214:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009218:	9202      	str	r2, [sp, #8]
 800921a:	1b3a      	subs	r2, r7, r4
 800921c:	3a15      	subs	r2, #21
 800921e:	f022 0203 	bic.w	r2, r2, #3
 8009222:	3204      	adds	r2, #4
 8009224:	f104 0115 	add.w	r1, r4, #21
 8009228:	428f      	cmp	r7, r1
 800922a:	bf38      	it	cc
 800922c:	2204      	movcc	r2, #4
 800922e:	9201      	str	r2, [sp, #4]
 8009230:	9a02      	ldr	r2, [sp, #8]
 8009232:	9303      	str	r3, [sp, #12]
 8009234:	429a      	cmp	r2, r3
 8009236:	d80c      	bhi.n	8009252 <__multiply+0x9e>
 8009238:	2e00      	cmp	r6, #0
 800923a:	dd03      	ble.n	8009244 <__multiply+0x90>
 800923c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009240:	2b00      	cmp	r3, #0
 8009242:	d05a      	beq.n	80092fa <__multiply+0x146>
 8009244:	6106      	str	r6, [r0, #16]
 8009246:	b005      	add	sp, #20
 8009248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800924c:	f843 2b04 	str.w	r2, [r3], #4
 8009250:	e7d8      	b.n	8009204 <__multiply+0x50>
 8009252:	f8b3 a000 	ldrh.w	sl, [r3]
 8009256:	f1ba 0f00 	cmp.w	sl, #0
 800925a:	d024      	beq.n	80092a6 <__multiply+0xf2>
 800925c:	f104 0e14 	add.w	lr, r4, #20
 8009260:	46a9      	mov	r9, r5
 8009262:	f04f 0c00 	mov.w	ip, #0
 8009266:	f85e 2b04 	ldr.w	r2, [lr], #4
 800926a:	f8d9 1000 	ldr.w	r1, [r9]
 800926e:	fa1f fb82 	uxth.w	fp, r2
 8009272:	b289      	uxth	r1, r1
 8009274:	fb0a 110b 	mla	r1, sl, fp, r1
 8009278:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800927c:	f8d9 2000 	ldr.w	r2, [r9]
 8009280:	4461      	add	r1, ip
 8009282:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009286:	fb0a c20b 	mla	r2, sl, fp, ip
 800928a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800928e:	b289      	uxth	r1, r1
 8009290:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009294:	4577      	cmp	r7, lr
 8009296:	f849 1b04 	str.w	r1, [r9], #4
 800929a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800929e:	d8e2      	bhi.n	8009266 <__multiply+0xb2>
 80092a0:	9a01      	ldr	r2, [sp, #4]
 80092a2:	f845 c002 	str.w	ip, [r5, r2]
 80092a6:	9a03      	ldr	r2, [sp, #12]
 80092a8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092ac:	3304      	adds	r3, #4
 80092ae:	f1b9 0f00 	cmp.w	r9, #0
 80092b2:	d020      	beq.n	80092f6 <__multiply+0x142>
 80092b4:	6829      	ldr	r1, [r5, #0]
 80092b6:	f104 0c14 	add.w	ip, r4, #20
 80092ba:	46ae      	mov	lr, r5
 80092bc:	f04f 0a00 	mov.w	sl, #0
 80092c0:	f8bc b000 	ldrh.w	fp, [ip]
 80092c4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80092c8:	fb09 220b 	mla	r2, r9, fp, r2
 80092cc:	4492      	add	sl, r2
 80092ce:	b289      	uxth	r1, r1
 80092d0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80092d4:	f84e 1b04 	str.w	r1, [lr], #4
 80092d8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80092dc:	f8be 1000 	ldrh.w	r1, [lr]
 80092e0:	0c12      	lsrs	r2, r2, #16
 80092e2:	fb09 1102 	mla	r1, r9, r2, r1
 80092e6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80092ea:	4567      	cmp	r7, ip
 80092ec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80092f0:	d8e6      	bhi.n	80092c0 <__multiply+0x10c>
 80092f2:	9a01      	ldr	r2, [sp, #4]
 80092f4:	50a9      	str	r1, [r5, r2]
 80092f6:	3504      	adds	r5, #4
 80092f8:	e79a      	b.n	8009230 <__multiply+0x7c>
 80092fa:	3e01      	subs	r6, #1
 80092fc:	e79c      	b.n	8009238 <__multiply+0x84>
 80092fe:	bf00      	nop
 8009300:	0800b507 	.word	0x0800b507
 8009304:	0800b4ab 	.word	0x0800b4ab

08009308 <__pow5mult>:
 8009308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930c:	4615      	mov	r5, r2
 800930e:	f012 0203 	ands.w	r2, r2, #3
 8009312:	4606      	mov	r6, r0
 8009314:	460f      	mov	r7, r1
 8009316:	d007      	beq.n	8009328 <__pow5mult+0x20>
 8009318:	4c25      	ldr	r4, [pc, #148]	; (80093b0 <__pow5mult+0xa8>)
 800931a:	3a01      	subs	r2, #1
 800931c:	2300      	movs	r3, #0
 800931e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009322:	f7ff fe9b 	bl	800905c <__multadd>
 8009326:	4607      	mov	r7, r0
 8009328:	10ad      	asrs	r5, r5, #2
 800932a:	d03d      	beq.n	80093a8 <__pow5mult+0xa0>
 800932c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800932e:	b97c      	cbnz	r4, 8009350 <__pow5mult+0x48>
 8009330:	2010      	movs	r0, #16
 8009332:	f001 f941 	bl	800a5b8 <malloc>
 8009336:	4602      	mov	r2, r0
 8009338:	6270      	str	r0, [r6, #36]	; 0x24
 800933a:	b928      	cbnz	r0, 8009348 <__pow5mult+0x40>
 800933c:	4b1d      	ldr	r3, [pc, #116]	; (80093b4 <__pow5mult+0xac>)
 800933e:	481e      	ldr	r0, [pc, #120]	; (80093b8 <__pow5mult+0xb0>)
 8009340:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009344:	f000 fa8c 	bl	8009860 <__assert_func>
 8009348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800934c:	6004      	str	r4, [r0, #0]
 800934e:	60c4      	str	r4, [r0, #12]
 8009350:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009358:	b94c      	cbnz	r4, 800936e <__pow5mult+0x66>
 800935a:	f240 2171 	movw	r1, #625	; 0x271
 800935e:	4630      	mov	r0, r6
 8009360:	f7ff ff12 	bl	8009188 <__i2b>
 8009364:	2300      	movs	r3, #0
 8009366:	f8c8 0008 	str.w	r0, [r8, #8]
 800936a:	4604      	mov	r4, r0
 800936c:	6003      	str	r3, [r0, #0]
 800936e:	f04f 0900 	mov.w	r9, #0
 8009372:	07eb      	lsls	r3, r5, #31
 8009374:	d50a      	bpl.n	800938c <__pow5mult+0x84>
 8009376:	4639      	mov	r1, r7
 8009378:	4622      	mov	r2, r4
 800937a:	4630      	mov	r0, r6
 800937c:	f7ff ff1a 	bl	80091b4 <__multiply>
 8009380:	4639      	mov	r1, r7
 8009382:	4680      	mov	r8, r0
 8009384:	4630      	mov	r0, r6
 8009386:	f7ff fe47 	bl	8009018 <_Bfree>
 800938a:	4647      	mov	r7, r8
 800938c:	106d      	asrs	r5, r5, #1
 800938e:	d00b      	beq.n	80093a8 <__pow5mult+0xa0>
 8009390:	6820      	ldr	r0, [r4, #0]
 8009392:	b938      	cbnz	r0, 80093a4 <__pow5mult+0x9c>
 8009394:	4622      	mov	r2, r4
 8009396:	4621      	mov	r1, r4
 8009398:	4630      	mov	r0, r6
 800939a:	f7ff ff0b 	bl	80091b4 <__multiply>
 800939e:	6020      	str	r0, [r4, #0]
 80093a0:	f8c0 9000 	str.w	r9, [r0]
 80093a4:	4604      	mov	r4, r0
 80093a6:	e7e4      	b.n	8009372 <__pow5mult+0x6a>
 80093a8:	4638      	mov	r0, r7
 80093aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ae:	bf00      	nop
 80093b0:	0800b608 	.word	0x0800b608
 80093b4:	0800b494 	.word	0x0800b494
 80093b8:	0800b4ab 	.word	0x0800b4ab

080093bc <__lshift>:
 80093bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093c0:	460c      	mov	r4, r1
 80093c2:	6849      	ldr	r1, [r1, #4]
 80093c4:	6923      	ldr	r3, [r4, #16]
 80093c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093ca:	68a3      	ldr	r3, [r4, #8]
 80093cc:	4607      	mov	r7, r0
 80093ce:	4691      	mov	r9, r2
 80093d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093d4:	f108 0601 	add.w	r6, r8, #1
 80093d8:	42b3      	cmp	r3, r6
 80093da:	db0b      	blt.n	80093f4 <__lshift+0x38>
 80093dc:	4638      	mov	r0, r7
 80093de:	f7ff fddb 	bl	8008f98 <_Balloc>
 80093e2:	4605      	mov	r5, r0
 80093e4:	b948      	cbnz	r0, 80093fa <__lshift+0x3e>
 80093e6:	4602      	mov	r2, r0
 80093e8:	4b2a      	ldr	r3, [pc, #168]	; (8009494 <__lshift+0xd8>)
 80093ea:	482b      	ldr	r0, [pc, #172]	; (8009498 <__lshift+0xdc>)
 80093ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093f0:	f000 fa36 	bl	8009860 <__assert_func>
 80093f4:	3101      	adds	r1, #1
 80093f6:	005b      	lsls	r3, r3, #1
 80093f8:	e7ee      	b.n	80093d8 <__lshift+0x1c>
 80093fa:	2300      	movs	r3, #0
 80093fc:	f100 0114 	add.w	r1, r0, #20
 8009400:	f100 0210 	add.w	r2, r0, #16
 8009404:	4618      	mov	r0, r3
 8009406:	4553      	cmp	r3, sl
 8009408:	db37      	blt.n	800947a <__lshift+0xbe>
 800940a:	6920      	ldr	r0, [r4, #16]
 800940c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009410:	f104 0314 	add.w	r3, r4, #20
 8009414:	f019 091f 	ands.w	r9, r9, #31
 8009418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800941c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009420:	d02f      	beq.n	8009482 <__lshift+0xc6>
 8009422:	f1c9 0e20 	rsb	lr, r9, #32
 8009426:	468a      	mov	sl, r1
 8009428:	f04f 0c00 	mov.w	ip, #0
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	fa02 f209 	lsl.w	r2, r2, r9
 8009432:	ea42 020c 	orr.w	r2, r2, ip
 8009436:	f84a 2b04 	str.w	r2, [sl], #4
 800943a:	f853 2b04 	ldr.w	r2, [r3], #4
 800943e:	4298      	cmp	r0, r3
 8009440:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009444:	d8f2      	bhi.n	800942c <__lshift+0x70>
 8009446:	1b03      	subs	r3, r0, r4
 8009448:	3b15      	subs	r3, #21
 800944a:	f023 0303 	bic.w	r3, r3, #3
 800944e:	3304      	adds	r3, #4
 8009450:	f104 0215 	add.w	r2, r4, #21
 8009454:	4290      	cmp	r0, r2
 8009456:	bf38      	it	cc
 8009458:	2304      	movcc	r3, #4
 800945a:	f841 c003 	str.w	ip, [r1, r3]
 800945e:	f1bc 0f00 	cmp.w	ip, #0
 8009462:	d001      	beq.n	8009468 <__lshift+0xac>
 8009464:	f108 0602 	add.w	r6, r8, #2
 8009468:	3e01      	subs	r6, #1
 800946a:	4638      	mov	r0, r7
 800946c:	612e      	str	r6, [r5, #16]
 800946e:	4621      	mov	r1, r4
 8009470:	f7ff fdd2 	bl	8009018 <_Bfree>
 8009474:	4628      	mov	r0, r5
 8009476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947a:	f842 0f04 	str.w	r0, [r2, #4]!
 800947e:	3301      	adds	r3, #1
 8009480:	e7c1      	b.n	8009406 <__lshift+0x4a>
 8009482:	3904      	subs	r1, #4
 8009484:	f853 2b04 	ldr.w	r2, [r3], #4
 8009488:	f841 2f04 	str.w	r2, [r1, #4]!
 800948c:	4298      	cmp	r0, r3
 800948e:	d8f9      	bhi.n	8009484 <__lshift+0xc8>
 8009490:	e7ea      	b.n	8009468 <__lshift+0xac>
 8009492:	bf00      	nop
 8009494:	0800b507 	.word	0x0800b507
 8009498:	0800b4ab 	.word	0x0800b4ab

0800949c <__mcmp>:
 800949c:	b530      	push	{r4, r5, lr}
 800949e:	6902      	ldr	r2, [r0, #16]
 80094a0:	690c      	ldr	r4, [r1, #16]
 80094a2:	1b12      	subs	r2, r2, r4
 80094a4:	d10e      	bne.n	80094c4 <__mcmp+0x28>
 80094a6:	f100 0314 	add.w	r3, r0, #20
 80094aa:	3114      	adds	r1, #20
 80094ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094bc:	42a5      	cmp	r5, r4
 80094be:	d003      	beq.n	80094c8 <__mcmp+0x2c>
 80094c0:	d305      	bcc.n	80094ce <__mcmp+0x32>
 80094c2:	2201      	movs	r2, #1
 80094c4:	4610      	mov	r0, r2
 80094c6:	bd30      	pop	{r4, r5, pc}
 80094c8:	4283      	cmp	r3, r0
 80094ca:	d3f3      	bcc.n	80094b4 <__mcmp+0x18>
 80094cc:	e7fa      	b.n	80094c4 <__mcmp+0x28>
 80094ce:	f04f 32ff 	mov.w	r2, #4294967295
 80094d2:	e7f7      	b.n	80094c4 <__mcmp+0x28>

080094d4 <__mdiff>:
 80094d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d8:	460c      	mov	r4, r1
 80094da:	4606      	mov	r6, r0
 80094dc:	4611      	mov	r1, r2
 80094de:	4620      	mov	r0, r4
 80094e0:	4690      	mov	r8, r2
 80094e2:	f7ff ffdb 	bl	800949c <__mcmp>
 80094e6:	1e05      	subs	r5, r0, #0
 80094e8:	d110      	bne.n	800950c <__mdiff+0x38>
 80094ea:	4629      	mov	r1, r5
 80094ec:	4630      	mov	r0, r6
 80094ee:	f7ff fd53 	bl	8008f98 <_Balloc>
 80094f2:	b930      	cbnz	r0, 8009502 <__mdiff+0x2e>
 80094f4:	4b3a      	ldr	r3, [pc, #232]	; (80095e0 <__mdiff+0x10c>)
 80094f6:	4602      	mov	r2, r0
 80094f8:	f240 2132 	movw	r1, #562	; 0x232
 80094fc:	4839      	ldr	r0, [pc, #228]	; (80095e4 <__mdiff+0x110>)
 80094fe:	f000 f9af 	bl	8009860 <__assert_func>
 8009502:	2301      	movs	r3, #1
 8009504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950c:	bfa4      	itt	ge
 800950e:	4643      	movge	r3, r8
 8009510:	46a0      	movge	r8, r4
 8009512:	4630      	mov	r0, r6
 8009514:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009518:	bfa6      	itte	ge
 800951a:	461c      	movge	r4, r3
 800951c:	2500      	movge	r5, #0
 800951e:	2501      	movlt	r5, #1
 8009520:	f7ff fd3a 	bl	8008f98 <_Balloc>
 8009524:	b920      	cbnz	r0, 8009530 <__mdiff+0x5c>
 8009526:	4b2e      	ldr	r3, [pc, #184]	; (80095e0 <__mdiff+0x10c>)
 8009528:	4602      	mov	r2, r0
 800952a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800952e:	e7e5      	b.n	80094fc <__mdiff+0x28>
 8009530:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009534:	6926      	ldr	r6, [r4, #16]
 8009536:	60c5      	str	r5, [r0, #12]
 8009538:	f104 0914 	add.w	r9, r4, #20
 800953c:	f108 0514 	add.w	r5, r8, #20
 8009540:	f100 0e14 	add.w	lr, r0, #20
 8009544:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009548:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800954c:	f108 0210 	add.w	r2, r8, #16
 8009550:	46f2      	mov	sl, lr
 8009552:	2100      	movs	r1, #0
 8009554:	f859 3b04 	ldr.w	r3, [r9], #4
 8009558:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800955c:	fa1f f883 	uxth.w	r8, r3
 8009560:	fa11 f18b 	uxtah	r1, r1, fp
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	eba1 0808 	sub.w	r8, r1, r8
 800956a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800956e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009572:	fa1f f888 	uxth.w	r8, r8
 8009576:	1419      	asrs	r1, r3, #16
 8009578:	454e      	cmp	r6, r9
 800957a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800957e:	f84a 3b04 	str.w	r3, [sl], #4
 8009582:	d8e7      	bhi.n	8009554 <__mdiff+0x80>
 8009584:	1b33      	subs	r3, r6, r4
 8009586:	3b15      	subs	r3, #21
 8009588:	f023 0303 	bic.w	r3, r3, #3
 800958c:	3304      	adds	r3, #4
 800958e:	3415      	adds	r4, #21
 8009590:	42a6      	cmp	r6, r4
 8009592:	bf38      	it	cc
 8009594:	2304      	movcc	r3, #4
 8009596:	441d      	add	r5, r3
 8009598:	4473      	add	r3, lr
 800959a:	469e      	mov	lr, r3
 800959c:	462e      	mov	r6, r5
 800959e:	4566      	cmp	r6, ip
 80095a0:	d30e      	bcc.n	80095c0 <__mdiff+0xec>
 80095a2:	f10c 0203 	add.w	r2, ip, #3
 80095a6:	1b52      	subs	r2, r2, r5
 80095a8:	f022 0203 	bic.w	r2, r2, #3
 80095ac:	3d03      	subs	r5, #3
 80095ae:	45ac      	cmp	ip, r5
 80095b0:	bf38      	it	cc
 80095b2:	2200      	movcc	r2, #0
 80095b4:	441a      	add	r2, r3
 80095b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095ba:	b17b      	cbz	r3, 80095dc <__mdiff+0x108>
 80095bc:	6107      	str	r7, [r0, #16]
 80095be:	e7a3      	b.n	8009508 <__mdiff+0x34>
 80095c0:	f856 8b04 	ldr.w	r8, [r6], #4
 80095c4:	fa11 f288 	uxtah	r2, r1, r8
 80095c8:	1414      	asrs	r4, r2, #16
 80095ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80095ce:	b292      	uxth	r2, r2
 80095d0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80095d4:	f84e 2b04 	str.w	r2, [lr], #4
 80095d8:	1421      	asrs	r1, r4, #16
 80095da:	e7e0      	b.n	800959e <__mdiff+0xca>
 80095dc:	3f01      	subs	r7, #1
 80095de:	e7ea      	b.n	80095b6 <__mdiff+0xe2>
 80095e0:	0800b507 	.word	0x0800b507
 80095e4:	0800b4ab 	.word	0x0800b4ab

080095e8 <__d2b>:
 80095e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	4689      	mov	r9, r1
 80095ee:	2101      	movs	r1, #1
 80095f0:	ec57 6b10 	vmov	r6, r7, d0
 80095f4:	4690      	mov	r8, r2
 80095f6:	f7ff fccf 	bl	8008f98 <_Balloc>
 80095fa:	4604      	mov	r4, r0
 80095fc:	b930      	cbnz	r0, 800960c <__d2b+0x24>
 80095fe:	4602      	mov	r2, r0
 8009600:	4b25      	ldr	r3, [pc, #148]	; (8009698 <__d2b+0xb0>)
 8009602:	4826      	ldr	r0, [pc, #152]	; (800969c <__d2b+0xb4>)
 8009604:	f240 310a 	movw	r1, #778	; 0x30a
 8009608:	f000 f92a 	bl	8009860 <__assert_func>
 800960c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009614:	bb35      	cbnz	r5, 8009664 <__d2b+0x7c>
 8009616:	2e00      	cmp	r6, #0
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	d028      	beq.n	800966e <__d2b+0x86>
 800961c:	4668      	mov	r0, sp
 800961e:	9600      	str	r6, [sp, #0]
 8009620:	f7ff fd82 	bl	8009128 <__lo0bits>
 8009624:	9900      	ldr	r1, [sp, #0]
 8009626:	b300      	cbz	r0, 800966a <__d2b+0x82>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	f1c0 0320 	rsb	r3, r0, #32
 800962e:	fa02 f303 	lsl.w	r3, r2, r3
 8009632:	430b      	orrs	r3, r1
 8009634:	40c2      	lsrs	r2, r0
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	9201      	str	r2, [sp, #4]
 800963a:	9b01      	ldr	r3, [sp, #4]
 800963c:	61a3      	str	r3, [r4, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	bf14      	ite	ne
 8009642:	2202      	movne	r2, #2
 8009644:	2201      	moveq	r2, #1
 8009646:	6122      	str	r2, [r4, #16]
 8009648:	b1d5      	cbz	r5, 8009680 <__d2b+0x98>
 800964a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800964e:	4405      	add	r5, r0
 8009650:	f8c9 5000 	str.w	r5, [r9]
 8009654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009658:	f8c8 0000 	str.w	r0, [r8]
 800965c:	4620      	mov	r0, r4
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009668:	e7d5      	b.n	8009616 <__d2b+0x2e>
 800966a:	6161      	str	r1, [r4, #20]
 800966c:	e7e5      	b.n	800963a <__d2b+0x52>
 800966e:	a801      	add	r0, sp, #4
 8009670:	f7ff fd5a 	bl	8009128 <__lo0bits>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	2201      	movs	r2, #1
 800967a:	6122      	str	r2, [r4, #16]
 800967c:	3020      	adds	r0, #32
 800967e:	e7e3      	b.n	8009648 <__d2b+0x60>
 8009680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009688:	f8c9 0000 	str.w	r0, [r9]
 800968c:	6918      	ldr	r0, [r3, #16]
 800968e:	f7ff fd2b 	bl	80090e8 <__hi0bits>
 8009692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009696:	e7df      	b.n	8009658 <__d2b+0x70>
 8009698:	0800b507 	.word	0x0800b507
 800969c:	0800b4ab 	.word	0x0800b4ab

080096a0 <_mprec_log10>:
 80096a0:	2817      	cmp	r0, #23
 80096a2:	b5d0      	push	{r4, r6, r7, lr}
 80096a4:	4604      	mov	r4, r0
 80096a6:	dc07      	bgt.n	80096b8 <_mprec_log10+0x18>
 80096a8:	4809      	ldr	r0, [pc, #36]	; (80096d0 <_mprec_log10+0x30>)
 80096aa:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 80096ae:	e9d4 0100 	ldrd	r0, r1, [r4]
 80096b2:	ec41 0b10 	vmov	d0, r0, r1
 80096b6:	bdd0      	pop	{r4, r6, r7, pc}
 80096b8:	4906      	ldr	r1, [pc, #24]	; (80096d4 <_mprec_log10+0x34>)
 80096ba:	4f07      	ldr	r7, [pc, #28]	; (80096d8 <_mprec_log10+0x38>)
 80096bc:	2000      	movs	r0, #0
 80096be:	2600      	movs	r6, #0
 80096c0:	4632      	mov	r2, r6
 80096c2:	463b      	mov	r3, r7
 80096c4:	f7f6 ff98 	bl	80005f8 <__aeabi_dmul>
 80096c8:	3c01      	subs	r4, #1
 80096ca:	d1f9      	bne.n	80096c0 <_mprec_log10+0x20>
 80096cc:	e7f1      	b.n	80096b2 <_mprec_log10+0x12>
 80096ce:	bf00      	nop
 80096d0:	0800b540 	.word	0x0800b540
 80096d4:	3ff00000 	.word	0x3ff00000
 80096d8:	40240000 	.word	0x40240000

080096dc <_calloc_r>:
 80096dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096de:	fba1 2402 	umull	r2, r4, r1, r2
 80096e2:	b94c      	cbnz	r4, 80096f8 <_calloc_r+0x1c>
 80096e4:	4611      	mov	r1, r2
 80096e6:	9201      	str	r2, [sp, #4]
 80096e8:	f000 f82e 	bl	8009748 <_malloc_r>
 80096ec:	9a01      	ldr	r2, [sp, #4]
 80096ee:	4605      	mov	r5, r0
 80096f0:	b930      	cbnz	r0, 8009700 <_calloc_r+0x24>
 80096f2:	4628      	mov	r0, r5
 80096f4:	b003      	add	sp, #12
 80096f6:	bd30      	pop	{r4, r5, pc}
 80096f8:	220c      	movs	r2, #12
 80096fa:	6002      	str	r2, [r0, #0]
 80096fc:	2500      	movs	r5, #0
 80096fe:	e7f8      	b.n	80096f2 <_calloc_r+0x16>
 8009700:	4621      	mov	r1, r4
 8009702:	f7ff faeb 	bl	8008cdc <memset>
 8009706:	e7f4      	b.n	80096f2 <_calloc_r+0x16>

08009708 <sbrk_aligned>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	4e0e      	ldr	r6, [pc, #56]	; (8009744 <sbrk_aligned+0x3c>)
 800970c:	460c      	mov	r4, r1
 800970e:	6831      	ldr	r1, [r6, #0]
 8009710:	4605      	mov	r5, r0
 8009712:	b911      	cbnz	r1, 800971a <sbrk_aligned+0x12>
 8009714:	f000 f88c 	bl	8009830 <_sbrk_r>
 8009718:	6030      	str	r0, [r6, #0]
 800971a:	4621      	mov	r1, r4
 800971c:	4628      	mov	r0, r5
 800971e:	f000 f887 	bl	8009830 <_sbrk_r>
 8009722:	1c43      	adds	r3, r0, #1
 8009724:	d00a      	beq.n	800973c <sbrk_aligned+0x34>
 8009726:	1cc4      	adds	r4, r0, #3
 8009728:	f024 0403 	bic.w	r4, r4, #3
 800972c:	42a0      	cmp	r0, r4
 800972e:	d007      	beq.n	8009740 <sbrk_aligned+0x38>
 8009730:	1a21      	subs	r1, r4, r0
 8009732:	4628      	mov	r0, r5
 8009734:	f000 f87c 	bl	8009830 <_sbrk_r>
 8009738:	3001      	adds	r0, #1
 800973a:	d101      	bne.n	8009740 <sbrk_aligned+0x38>
 800973c:	f04f 34ff 	mov.w	r4, #4294967295
 8009740:	4620      	mov	r0, r4
 8009742:	bd70      	pop	{r4, r5, r6, pc}
 8009744:	20002740 	.word	0x20002740

08009748 <_malloc_r>:
 8009748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800974c:	1ccd      	adds	r5, r1, #3
 800974e:	f025 0503 	bic.w	r5, r5, #3
 8009752:	3508      	adds	r5, #8
 8009754:	2d0c      	cmp	r5, #12
 8009756:	bf38      	it	cc
 8009758:	250c      	movcc	r5, #12
 800975a:	2d00      	cmp	r5, #0
 800975c:	4607      	mov	r7, r0
 800975e:	db01      	blt.n	8009764 <_malloc_r+0x1c>
 8009760:	42a9      	cmp	r1, r5
 8009762:	d905      	bls.n	8009770 <_malloc_r+0x28>
 8009764:	230c      	movs	r3, #12
 8009766:	603b      	str	r3, [r7, #0]
 8009768:	2600      	movs	r6, #0
 800976a:	4630      	mov	r0, r6
 800976c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009770:	4e2e      	ldr	r6, [pc, #184]	; (800982c <_malloc_r+0xe4>)
 8009772:	f000 ff29 	bl	800a5c8 <__malloc_lock>
 8009776:	6833      	ldr	r3, [r6, #0]
 8009778:	461c      	mov	r4, r3
 800977a:	bb34      	cbnz	r4, 80097ca <_malloc_r+0x82>
 800977c:	4629      	mov	r1, r5
 800977e:	4638      	mov	r0, r7
 8009780:	f7ff ffc2 	bl	8009708 <sbrk_aligned>
 8009784:	1c43      	adds	r3, r0, #1
 8009786:	4604      	mov	r4, r0
 8009788:	d14d      	bne.n	8009826 <_malloc_r+0xde>
 800978a:	6834      	ldr	r4, [r6, #0]
 800978c:	4626      	mov	r6, r4
 800978e:	2e00      	cmp	r6, #0
 8009790:	d140      	bne.n	8009814 <_malloc_r+0xcc>
 8009792:	6823      	ldr	r3, [r4, #0]
 8009794:	4631      	mov	r1, r6
 8009796:	4638      	mov	r0, r7
 8009798:	eb04 0803 	add.w	r8, r4, r3
 800979c:	f000 f848 	bl	8009830 <_sbrk_r>
 80097a0:	4580      	cmp	r8, r0
 80097a2:	d13a      	bne.n	800981a <_malloc_r+0xd2>
 80097a4:	6821      	ldr	r1, [r4, #0]
 80097a6:	3503      	adds	r5, #3
 80097a8:	1a6d      	subs	r5, r5, r1
 80097aa:	f025 0503 	bic.w	r5, r5, #3
 80097ae:	3508      	adds	r5, #8
 80097b0:	2d0c      	cmp	r5, #12
 80097b2:	bf38      	it	cc
 80097b4:	250c      	movcc	r5, #12
 80097b6:	4629      	mov	r1, r5
 80097b8:	4638      	mov	r0, r7
 80097ba:	f7ff ffa5 	bl	8009708 <sbrk_aligned>
 80097be:	3001      	adds	r0, #1
 80097c0:	d02b      	beq.n	800981a <_malloc_r+0xd2>
 80097c2:	6823      	ldr	r3, [r4, #0]
 80097c4:	442b      	add	r3, r5
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	e00e      	b.n	80097e8 <_malloc_r+0xa0>
 80097ca:	6822      	ldr	r2, [r4, #0]
 80097cc:	1b52      	subs	r2, r2, r5
 80097ce:	d41e      	bmi.n	800980e <_malloc_r+0xc6>
 80097d0:	2a0b      	cmp	r2, #11
 80097d2:	d916      	bls.n	8009802 <_malloc_r+0xba>
 80097d4:	1961      	adds	r1, r4, r5
 80097d6:	42a3      	cmp	r3, r4
 80097d8:	6025      	str	r5, [r4, #0]
 80097da:	bf18      	it	ne
 80097dc:	6059      	strne	r1, [r3, #4]
 80097de:	6863      	ldr	r3, [r4, #4]
 80097e0:	bf08      	it	eq
 80097e2:	6031      	streq	r1, [r6, #0]
 80097e4:	5162      	str	r2, [r4, r5]
 80097e6:	604b      	str	r3, [r1, #4]
 80097e8:	4638      	mov	r0, r7
 80097ea:	f104 060b 	add.w	r6, r4, #11
 80097ee:	f000 fef1 	bl	800a5d4 <__malloc_unlock>
 80097f2:	f026 0607 	bic.w	r6, r6, #7
 80097f6:	1d23      	adds	r3, r4, #4
 80097f8:	1af2      	subs	r2, r6, r3
 80097fa:	d0b6      	beq.n	800976a <_malloc_r+0x22>
 80097fc:	1b9b      	subs	r3, r3, r6
 80097fe:	50a3      	str	r3, [r4, r2]
 8009800:	e7b3      	b.n	800976a <_malloc_r+0x22>
 8009802:	6862      	ldr	r2, [r4, #4]
 8009804:	42a3      	cmp	r3, r4
 8009806:	bf0c      	ite	eq
 8009808:	6032      	streq	r2, [r6, #0]
 800980a:	605a      	strne	r2, [r3, #4]
 800980c:	e7ec      	b.n	80097e8 <_malloc_r+0xa0>
 800980e:	4623      	mov	r3, r4
 8009810:	6864      	ldr	r4, [r4, #4]
 8009812:	e7b2      	b.n	800977a <_malloc_r+0x32>
 8009814:	4634      	mov	r4, r6
 8009816:	6876      	ldr	r6, [r6, #4]
 8009818:	e7b9      	b.n	800978e <_malloc_r+0x46>
 800981a:	230c      	movs	r3, #12
 800981c:	603b      	str	r3, [r7, #0]
 800981e:	4638      	mov	r0, r7
 8009820:	f000 fed8 	bl	800a5d4 <__malloc_unlock>
 8009824:	e7a1      	b.n	800976a <_malloc_r+0x22>
 8009826:	6025      	str	r5, [r4, #0]
 8009828:	e7de      	b.n	80097e8 <_malloc_r+0xa0>
 800982a:	bf00      	nop
 800982c:	2000273c 	.word	0x2000273c

08009830 <_sbrk_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d06      	ldr	r5, [pc, #24]	; (800984c <_sbrk_r+0x1c>)
 8009834:	2300      	movs	r3, #0
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	602b      	str	r3, [r5, #0]
 800983c:	f7f8 f848 	bl	80018d0 <_sbrk>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_sbrk_r+0x1a>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_sbrk_r+0x1a>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	20002744 	.word	0x20002744

08009850 <strcpy>:
 8009850:	4603      	mov	r3, r0
 8009852:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009856:	f803 2b01 	strb.w	r2, [r3], #1
 800985a:	2a00      	cmp	r2, #0
 800985c:	d1f9      	bne.n	8009852 <strcpy+0x2>
 800985e:	4770      	bx	lr

08009860 <__assert_func>:
 8009860:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009862:	4614      	mov	r4, r2
 8009864:	461a      	mov	r2, r3
 8009866:	4b09      	ldr	r3, [pc, #36]	; (800988c <__assert_func+0x2c>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	4605      	mov	r5, r0
 800986c:	68d8      	ldr	r0, [r3, #12]
 800986e:	b14c      	cbz	r4, 8009884 <__assert_func+0x24>
 8009870:	4b07      	ldr	r3, [pc, #28]	; (8009890 <__assert_func+0x30>)
 8009872:	9100      	str	r1, [sp, #0]
 8009874:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009878:	4906      	ldr	r1, [pc, #24]	; (8009894 <__assert_func+0x34>)
 800987a:	462b      	mov	r3, r5
 800987c:	f000 fe8a 	bl	800a594 <fiprintf>
 8009880:	f001 faa8 	bl	800add4 <abort>
 8009884:	4b04      	ldr	r3, [pc, #16]	; (8009898 <__assert_func+0x38>)
 8009886:	461c      	mov	r4, r3
 8009888:	e7f3      	b.n	8009872 <__assert_func+0x12>
 800988a:	bf00      	nop
 800988c:	20000114 	.word	0x20000114
 8009890:	0800b614 	.word	0x0800b614
 8009894:	0800b621 	.word	0x0800b621
 8009898:	0800b64f 	.word	0x0800b64f

0800989c <quorem>:
 800989c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098a0:	6903      	ldr	r3, [r0, #16]
 80098a2:	690c      	ldr	r4, [r1, #16]
 80098a4:	42a3      	cmp	r3, r4
 80098a6:	4607      	mov	r7, r0
 80098a8:	f2c0 8081 	blt.w	80099ae <quorem+0x112>
 80098ac:	3c01      	subs	r4, #1
 80098ae:	f101 0814 	add.w	r8, r1, #20
 80098b2:	f100 0514 	add.w	r5, r0, #20
 80098b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098ba:	9301      	str	r3, [sp, #4]
 80098bc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80098c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098c4:	3301      	adds	r3, #1
 80098c6:	429a      	cmp	r2, r3
 80098c8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80098cc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80098d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80098d4:	d331      	bcc.n	800993a <quorem+0x9e>
 80098d6:	f04f 0e00 	mov.w	lr, #0
 80098da:	4640      	mov	r0, r8
 80098dc:	46ac      	mov	ip, r5
 80098de:	46f2      	mov	sl, lr
 80098e0:	f850 2b04 	ldr.w	r2, [r0], #4
 80098e4:	b293      	uxth	r3, r2
 80098e6:	fb06 e303 	mla	r3, r6, r3, lr
 80098ea:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	ebaa 0303 	sub.w	r3, sl, r3
 80098f4:	f8dc a000 	ldr.w	sl, [ip]
 80098f8:	0c12      	lsrs	r2, r2, #16
 80098fa:	fa13 f38a 	uxtah	r3, r3, sl
 80098fe:	fb06 e202 	mla	r2, r6, r2, lr
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	9b00      	ldr	r3, [sp, #0]
 8009906:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800990a:	b292      	uxth	r2, r2
 800990c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009910:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009914:	f8bd 3000 	ldrh.w	r3, [sp]
 8009918:	4581      	cmp	r9, r0
 800991a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800991e:	f84c 3b04 	str.w	r3, [ip], #4
 8009922:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009926:	d2db      	bcs.n	80098e0 <quorem+0x44>
 8009928:	f855 300b 	ldr.w	r3, [r5, fp]
 800992c:	b92b      	cbnz	r3, 800993a <quorem+0x9e>
 800992e:	9b01      	ldr	r3, [sp, #4]
 8009930:	3b04      	subs	r3, #4
 8009932:	429d      	cmp	r5, r3
 8009934:	461a      	mov	r2, r3
 8009936:	d32e      	bcc.n	8009996 <quorem+0xfa>
 8009938:	613c      	str	r4, [r7, #16]
 800993a:	4638      	mov	r0, r7
 800993c:	f7ff fdae 	bl	800949c <__mcmp>
 8009940:	2800      	cmp	r0, #0
 8009942:	db24      	blt.n	800998e <quorem+0xf2>
 8009944:	3601      	adds	r6, #1
 8009946:	4628      	mov	r0, r5
 8009948:	f04f 0c00 	mov.w	ip, #0
 800994c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009950:	f8d0 e000 	ldr.w	lr, [r0]
 8009954:	b293      	uxth	r3, r2
 8009956:	ebac 0303 	sub.w	r3, ip, r3
 800995a:	0c12      	lsrs	r2, r2, #16
 800995c:	fa13 f38e 	uxtah	r3, r3, lr
 8009960:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009964:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009968:	b29b      	uxth	r3, r3
 800996a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800996e:	45c1      	cmp	r9, r8
 8009970:	f840 3b04 	str.w	r3, [r0], #4
 8009974:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009978:	d2e8      	bcs.n	800994c <quorem+0xb0>
 800997a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800997e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009982:	b922      	cbnz	r2, 800998e <quorem+0xf2>
 8009984:	3b04      	subs	r3, #4
 8009986:	429d      	cmp	r5, r3
 8009988:	461a      	mov	r2, r3
 800998a:	d30a      	bcc.n	80099a2 <quorem+0x106>
 800998c:	613c      	str	r4, [r7, #16]
 800998e:	4630      	mov	r0, r6
 8009990:	b003      	add	sp, #12
 8009992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009996:	6812      	ldr	r2, [r2, #0]
 8009998:	3b04      	subs	r3, #4
 800999a:	2a00      	cmp	r2, #0
 800999c:	d1cc      	bne.n	8009938 <quorem+0x9c>
 800999e:	3c01      	subs	r4, #1
 80099a0:	e7c7      	b.n	8009932 <quorem+0x96>
 80099a2:	6812      	ldr	r2, [r2, #0]
 80099a4:	3b04      	subs	r3, #4
 80099a6:	2a00      	cmp	r2, #0
 80099a8:	d1f0      	bne.n	800998c <quorem+0xf0>
 80099aa:	3c01      	subs	r4, #1
 80099ac:	e7eb      	b.n	8009986 <quorem+0xea>
 80099ae:	2000      	movs	r0, #0
 80099b0:	e7ee      	b.n	8009990 <quorem+0xf4>
 80099b2:	0000      	movs	r0, r0
 80099b4:	0000      	movs	r0, r0
	...

080099b8 <_dtoa_r>:
 80099b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099bc:	ed2d 8b04 	vpush	{d8-d9}
 80099c0:	ec57 6b10 	vmov	r6, r7, d0
 80099c4:	b093      	sub	sp, #76	; 0x4c
 80099c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80099c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80099cc:	9106      	str	r1, [sp, #24]
 80099ce:	ee10 aa10 	vmov	sl, s0
 80099d2:	4604      	mov	r4, r0
 80099d4:	9209      	str	r2, [sp, #36]	; 0x24
 80099d6:	930c      	str	r3, [sp, #48]	; 0x30
 80099d8:	46bb      	mov	fp, r7
 80099da:	b975      	cbnz	r5, 80099fa <_dtoa_r+0x42>
 80099dc:	2010      	movs	r0, #16
 80099de:	f000 fdeb 	bl	800a5b8 <malloc>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6260      	str	r0, [r4, #36]	; 0x24
 80099e6:	b920      	cbnz	r0, 80099f2 <_dtoa_r+0x3a>
 80099e8:	4ba7      	ldr	r3, [pc, #668]	; (8009c88 <_dtoa_r+0x2d0>)
 80099ea:	21ea      	movs	r1, #234	; 0xea
 80099ec:	48a7      	ldr	r0, [pc, #668]	; (8009c8c <_dtoa_r+0x2d4>)
 80099ee:	f7ff ff37 	bl	8009860 <__assert_func>
 80099f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80099f6:	6005      	str	r5, [r0, #0]
 80099f8:	60c5      	str	r5, [r0, #12]
 80099fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80099fc:	6819      	ldr	r1, [r3, #0]
 80099fe:	b151      	cbz	r1, 8009a16 <_dtoa_r+0x5e>
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	604a      	str	r2, [r1, #4]
 8009a04:	2301      	movs	r3, #1
 8009a06:	4093      	lsls	r3, r2
 8009a08:	608b      	str	r3, [r1, #8]
 8009a0a:	4620      	mov	r0, r4
 8009a0c:	f7ff fb04 	bl	8009018 <_Bfree>
 8009a10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
 8009a16:	1e3b      	subs	r3, r7, #0
 8009a18:	bfaa      	itet	ge
 8009a1a:	2300      	movge	r3, #0
 8009a1c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a20:	f8c8 3000 	strge.w	r3, [r8]
 8009a24:	4b9a      	ldr	r3, [pc, #616]	; (8009c90 <_dtoa_r+0x2d8>)
 8009a26:	bfbc      	itt	lt
 8009a28:	2201      	movlt	r2, #1
 8009a2a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a2e:	ea33 030b 	bics.w	r3, r3, fp
 8009a32:	d11b      	bne.n	8009a6c <_dtoa_r+0xb4>
 8009a34:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a36:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a3a:	6013      	str	r3, [r2, #0]
 8009a3c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009a40:	4333      	orrs	r3, r6
 8009a42:	f000 8592 	beq.w	800a56a <_dtoa_r+0xbb2>
 8009a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a48:	b963      	cbnz	r3, 8009a64 <_dtoa_r+0xac>
 8009a4a:	4b92      	ldr	r3, [pc, #584]	; (8009c94 <_dtoa_r+0x2dc>)
 8009a4c:	e022      	b.n	8009a94 <_dtoa_r+0xdc>
 8009a4e:	4b92      	ldr	r3, [pc, #584]	; (8009c98 <_dtoa_r+0x2e0>)
 8009a50:	9301      	str	r3, [sp, #4]
 8009a52:	3308      	adds	r3, #8
 8009a54:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	9801      	ldr	r0, [sp, #4]
 8009a5a:	b013      	add	sp, #76	; 0x4c
 8009a5c:	ecbd 8b04 	vpop	{d8-d9}
 8009a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a64:	4b8b      	ldr	r3, [pc, #556]	; (8009c94 <_dtoa_r+0x2dc>)
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	3303      	adds	r3, #3
 8009a6a:	e7f3      	b.n	8009a54 <_dtoa_r+0x9c>
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	2300      	movs	r3, #0
 8009a70:	4650      	mov	r0, sl
 8009a72:	4659      	mov	r1, fp
 8009a74:	f7f7 f828 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a78:	ec4b ab19 	vmov	d9, sl, fp
 8009a7c:	4680      	mov	r8, r0
 8009a7e:	b158      	cbz	r0, 8009a98 <_dtoa_r+0xe0>
 8009a80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a82:	2301      	movs	r3, #1
 8009a84:	6013      	str	r3, [r2, #0]
 8009a86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f000 856b 	beq.w	800a564 <_dtoa_r+0xbac>
 8009a8e:	4883      	ldr	r0, [pc, #524]	; (8009c9c <_dtoa_r+0x2e4>)
 8009a90:	6018      	str	r0, [r3, #0]
 8009a92:	1e43      	subs	r3, r0, #1
 8009a94:	9301      	str	r3, [sp, #4]
 8009a96:	e7df      	b.n	8009a58 <_dtoa_r+0xa0>
 8009a98:	ec4b ab10 	vmov	d0, sl, fp
 8009a9c:	aa10      	add	r2, sp, #64	; 0x40
 8009a9e:	a911      	add	r1, sp, #68	; 0x44
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	f7ff fda1 	bl	80095e8 <__d2b>
 8009aa6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009aaa:	ee08 0a10 	vmov	s16, r0
 8009aae:	2d00      	cmp	r5, #0
 8009ab0:	f000 8084 	beq.w	8009bbc <_dtoa_r+0x204>
 8009ab4:	ee19 3a90 	vmov	r3, s19
 8009ab8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009abc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009ac0:	4656      	mov	r6, sl
 8009ac2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009ac6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009aca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009ace:	4b74      	ldr	r3, [pc, #464]	; (8009ca0 <_dtoa_r+0x2e8>)
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	4630      	mov	r0, r6
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	f7f6 fbd7 	bl	8000288 <__aeabi_dsub>
 8009ada:	a365      	add	r3, pc, #404	; (adr r3, 8009c70 <_dtoa_r+0x2b8>)
 8009adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ae0:	f7f6 fd8a 	bl	80005f8 <__aeabi_dmul>
 8009ae4:	a364      	add	r3, pc, #400	; (adr r3, 8009c78 <_dtoa_r+0x2c0>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fbcf 	bl	800028c <__adddf3>
 8009aee:	4606      	mov	r6, r0
 8009af0:	4628      	mov	r0, r5
 8009af2:	460f      	mov	r7, r1
 8009af4:	f7f6 fd16 	bl	8000524 <__aeabi_i2d>
 8009af8:	a361      	add	r3, pc, #388	; (adr r3, 8009c80 <_dtoa_r+0x2c8>)
 8009afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afe:	f7f6 fd7b 	bl	80005f8 <__aeabi_dmul>
 8009b02:	4602      	mov	r2, r0
 8009b04:	460b      	mov	r3, r1
 8009b06:	4630      	mov	r0, r6
 8009b08:	4639      	mov	r1, r7
 8009b0a:	f7f6 fbbf 	bl	800028c <__adddf3>
 8009b0e:	4606      	mov	r6, r0
 8009b10:	460f      	mov	r7, r1
 8009b12:	f7f7 f80b 	bl	8000b2c <__aeabi_d2iz>
 8009b16:	2200      	movs	r2, #0
 8009b18:	9000      	str	r0, [sp, #0]
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	4639      	mov	r1, r7
 8009b20:	f7f6 ffdc 	bl	8000adc <__aeabi_dcmplt>
 8009b24:	b150      	cbz	r0, 8009b3c <_dtoa_r+0x184>
 8009b26:	9800      	ldr	r0, [sp, #0]
 8009b28:	f7f6 fcfc 	bl	8000524 <__aeabi_i2d>
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	463b      	mov	r3, r7
 8009b30:	f7f6 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b34:	b910      	cbnz	r0, 8009b3c <_dtoa_r+0x184>
 8009b36:	9b00      	ldr	r3, [sp, #0]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	9300      	str	r3, [sp, #0]
 8009b3c:	9b00      	ldr	r3, [sp, #0]
 8009b3e:	2b16      	cmp	r3, #22
 8009b40:	d85a      	bhi.n	8009bf8 <_dtoa_r+0x240>
 8009b42:	9a00      	ldr	r2, [sp, #0]
 8009b44:	4b57      	ldr	r3, [pc, #348]	; (8009ca4 <_dtoa_r+0x2ec>)
 8009b46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4e:	ec51 0b19 	vmov	r0, r1, d9
 8009b52:	f7f6 ffc3 	bl	8000adc <__aeabi_dcmplt>
 8009b56:	2800      	cmp	r0, #0
 8009b58:	d050      	beq.n	8009bfc <_dtoa_r+0x244>
 8009b5a:	9b00      	ldr	r3, [sp, #0]
 8009b5c:	3b01      	subs	r3, #1
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	2300      	movs	r3, #0
 8009b62:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b66:	1b5d      	subs	r5, r3, r5
 8009b68:	1e6b      	subs	r3, r5, #1
 8009b6a:	9305      	str	r3, [sp, #20]
 8009b6c:	bf45      	ittet	mi
 8009b6e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009b72:	9304      	strmi	r3, [sp, #16]
 8009b74:	2300      	movpl	r3, #0
 8009b76:	2300      	movmi	r3, #0
 8009b78:	bf4c      	ite	mi
 8009b7a:	9305      	strmi	r3, [sp, #20]
 8009b7c:	9304      	strpl	r3, [sp, #16]
 8009b7e:	9b00      	ldr	r3, [sp, #0]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	db3d      	blt.n	8009c00 <_dtoa_r+0x248>
 8009b84:	9b05      	ldr	r3, [sp, #20]
 8009b86:	9a00      	ldr	r2, [sp, #0]
 8009b88:	920a      	str	r2, [sp, #40]	; 0x28
 8009b8a:	4413      	add	r3, r2
 8009b8c:	9305      	str	r3, [sp, #20]
 8009b8e:	2300      	movs	r3, #0
 8009b90:	9307      	str	r3, [sp, #28]
 8009b92:	9b06      	ldr	r3, [sp, #24]
 8009b94:	2b09      	cmp	r3, #9
 8009b96:	f200 8089 	bhi.w	8009cac <_dtoa_r+0x2f4>
 8009b9a:	2b05      	cmp	r3, #5
 8009b9c:	bfc4      	itt	gt
 8009b9e:	3b04      	subgt	r3, #4
 8009ba0:	9306      	strgt	r3, [sp, #24]
 8009ba2:	9b06      	ldr	r3, [sp, #24]
 8009ba4:	f1a3 0302 	sub.w	r3, r3, #2
 8009ba8:	bfcc      	ite	gt
 8009baa:	2500      	movgt	r5, #0
 8009bac:	2501      	movle	r5, #1
 8009bae:	2b03      	cmp	r3, #3
 8009bb0:	f200 8087 	bhi.w	8009cc2 <_dtoa_r+0x30a>
 8009bb4:	e8df f003 	tbb	[pc, r3]
 8009bb8:	59383a2d 	.word	0x59383a2d
 8009bbc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009bc0:	441d      	add	r5, r3
 8009bc2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009bc6:	2b20      	cmp	r3, #32
 8009bc8:	bfc1      	itttt	gt
 8009bca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009bce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009bd2:	fa0b f303 	lslgt.w	r3, fp, r3
 8009bd6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009bda:	bfda      	itte	le
 8009bdc:	f1c3 0320 	rsble	r3, r3, #32
 8009be0:	fa06 f003 	lslle.w	r0, r6, r3
 8009be4:	4318      	orrgt	r0, r3
 8009be6:	f7f6 fc8d 	bl	8000504 <__aeabi_ui2d>
 8009bea:	2301      	movs	r3, #1
 8009bec:	4606      	mov	r6, r0
 8009bee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009bf2:	3d01      	subs	r5, #1
 8009bf4:	930e      	str	r3, [sp, #56]	; 0x38
 8009bf6:	e76a      	b.n	8009ace <_dtoa_r+0x116>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	e7b2      	b.n	8009b62 <_dtoa_r+0x1aa>
 8009bfc:	900b      	str	r0, [sp, #44]	; 0x2c
 8009bfe:	e7b1      	b.n	8009b64 <_dtoa_r+0x1ac>
 8009c00:	9b04      	ldr	r3, [sp, #16]
 8009c02:	9a00      	ldr	r2, [sp, #0]
 8009c04:	1a9b      	subs	r3, r3, r2
 8009c06:	9304      	str	r3, [sp, #16]
 8009c08:	4253      	negs	r3, r2
 8009c0a:	9307      	str	r3, [sp, #28]
 8009c0c:	2300      	movs	r3, #0
 8009c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c10:	e7bf      	b.n	8009b92 <_dtoa_r+0x1da>
 8009c12:	2300      	movs	r3, #0
 8009c14:	9308      	str	r3, [sp, #32]
 8009c16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	dc55      	bgt.n	8009cc8 <_dtoa_r+0x310>
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c22:	461a      	mov	r2, r3
 8009c24:	9209      	str	r2, [sp, #36]	; 0x24
 8009c26:	e00c      	b.n	8009c42 <_dtoa_r+0x28a>
 8009c28:	2301      	movs	r3, #1
 8009c2a:	e7f3      	b.n	8009c14 <_dtoa_r+0x25c>
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c30:	9308      	str	r3, [sp, #32]
 8009c32:	9b00      	ldr	r3, [sp, #0]
 8009c34:	4413      	add	r3, r2
 8009c36:	9302      	str	r3, [sp, #8]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	9303      	str	r3, [sp, #12]
 8009c3e:	bfb8      	it	lt
 8009c40:	2301      	movlt	r3, #1
 8009c42:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009c44:	2200      	movs	r2, #0
 8009c46:	6042      	str	r2, [r0, #4]
 8009c48:	2204      	movs	r2, #4
 8009c4a:	f102 0614 	add.w	r6, r2, #20
 8009c4e:	429e      	cmp	r6, r3
 8009c50:	6841      	ldr	r1, [r0, #4]
 8009c52:	d93d      	bls.n	8009cd0 <_dtoa_r+0x318>
 8009c54:	4620      	mov	r0, r4
 8009c56:	f7ff f99f 	bl	8008f98 <_Balloc>
 8009c5a:	9001      	str	r0, [sp, #4]
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	d13b      	bne.n	8009cd8 <_dtoa_r+0x320>
 8009c60:	4b11      	ldr	r3, [pc, #68]	; (8009ca8 <_dtoa_r+0x2f0>)
 8009c62:	4602      	mov	r2, r0
 8009c64:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009c68:	e6c0      	b.n	80099ec <_dtoa_r+0x34>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e7df      	b.n	8009c2e <_dtoa_r+0x276>
 8009c6e:	bf00      	nop
 8009c70:	636f4361 	.word	0x636f4361
 8009c74:	3fd287a7 	.word	0x3fd287a7
 8009c78:	8b60c8b3 	.word	0x8b60c8b3
 8009c7c:	3fc68a28 	.word	0x3fc68a28
 8009c80:	509f79fb 	.word	0x509f79fb
 8009c84:	3fd34413 	.word	0x3fd34413
 8009c88:	0800b494 	.word	0x0800b494
 8009c8c:	0800b65f 	.word	0x0800b65f
 8009c90:	7ff00000 	.word	0x7ff00000
 8009c94:	0800b659 	.word	0x0800b659
 8009c98:	0800b650 	.word	0x0800b650
 8009c9c:	0800b65e 	.word	0x0800b65e
 8009ca0:	3ff80000 	.word	0x3ff80000
 8009ca4:	0800b540 	.word	0x0800b540
 8009ca8:	0800b507 	.word	0x0800b507
 8009cac:	2501      	movs	r5, #1
 8009cae:	2300      	movs	r3, #0
 8009cb0:	9306      	str	r3, [sp, #24]
 8009cb2:	9508      	str	r5, [sp, #32]
 8009cb4:	f04f 33ff 	mov.w	r3, #4294967295
 8009cb8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2312      	movs	r3, #18
 8009cc0:	e7b0      	b.n	8009c24 <_dtoa_r+0x26c>
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	9308      	str	r3, [sp, #32]
 8009cc6:	e7f5      	b.n	8009cb4 <_dtoa_r+0x2fc>
 8009cc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009cce:	e7b8      	b.n	8009c42 <_dtoa_r+0x28a>
 8009cd0:	3101      	adds	r1, #1
 8009cd2:	6041      	str	r1, [r0, #4]
 8009cd4:	0052      	lsls	r2, r2, #1
 8009cd6:	e7b8      	b.n	8009c4a <_dtoa_r+0x292>
 8009cd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cda:	9a01      	ldr	r2, [sp, #4]
 8009cdc:	601a      	str	r2, [r3, #0]
 8009cde:	9b03      	ldr	r3, [sp, #12]
 8009ce0:	2b0e      	cmp	r3, #14
 8009ce2:	f200 809d 	bhi.w	8009e20 <_dtoa_r+0x468>
 8009ce6:	2d00      	cmp	r5, #0
 8009ce8:	f000 809a 	beq.w	8009e20 <_dtoa_r+0x468>
 8009cec:	9b00      	ldr	r3, [sp, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	dd32      	ble.n	8009d58 <_dtoa_r+0x3a0>
 8009cf2:	4ab7      	ldr	r2, [pc, #732]	; (8009fd0 <_dtoa_r+0x618>)
 8009cf4:	f003 030f 	and.w	r3, r3, #15
 8009cf8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009cfc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d00:	9b00      	ldr	r3, [sp, #0]
 8009d02:	05d8      	lsls	r0, r3, #23
 8009d04:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d08:	d516      	bpl.n	8009d38 <_dtoa_r+0x380>
 8009d0a:	4bb2      	ldr	r3, [pc, #712]	; (8009fd4 <_dtoa_r+0x61c>)
 8009d0c:	ec51 0b19 	vmov	r0, r1, d9
 8009d10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d14:	f7f6 fd9a 	bl	800084c <__aeabi_ddiv>
 8009d18:	f007 070f 	and.w	r7, r7, #15
 8009d1c:	4682      	mov	sl, r0
 8009d1e:	468b      	mov	fp, r1
 8009d20:	2503      	movs	r5, #3
 8009d22:	4eac      	ldr	r6, [pc, #688]	; (8009fd4 <_dtoa_r+0x61c>)
 8009d24:	b957      	cbnz	r7, 8009d3c <_dtoa_r+0x384>
 8009d26:	4642      	mov	r2, r8
 8009d28:	464b      	mov	r3, r9
 8009d2a:	4650      	mov	r0, sl
 8009d2c:	4659      	mov	r1, fp
 8009d2e:	f7f6 fd8d 	bl	800084c <__aeabi_ddiv>
 8009d32:	4682      	mov	sl, r0
 8009d34:	468b      	mov	fp, r1
 8009d36:	e028      	b.n	8009d8a <_dtoa_r+0x3d2>
 8009d38:	2502      	movs	r5, #2
 8009d3a:	e7f2      	b.n	8009d22 <_dtoa_r+0x36a>
 8009d3c:	07f9      	lsls	r1, r7, #31
 8009d3e:	d508      	bpl.n	8009d52 <_dtoa_r+0x39a>
 8009d40:	4640      	mov	r0, r8
 8009d42:	4649      	mov	r1, r9
 8009d44:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009d48:	f7f6 fc56 	bl	80005f8 <__aeabi_dmul>
 8009d4c:	3501      	adds	r5, #1
 8009d4e:	4680      	mov	r8, r0
 8009d50:	4689      	mov	r9, r1
 8009d52:	107f      	asrs	r7, r7, #1
 8009d54:	3608      	adds	r6, #8
 8009d56:	e7e5      	b.n	8009d24 <_dtoa_r+0x36c>
 8009d58:	f000 809b 	beq.w	8009e92 <_dtoa_r+0x4da>
 8009d5c:	9b00      	ldr	r3, [sp, #0]
 8009d5e:	4f9d      	ldr	r7, [pc, #628]	; (8009fd4 <_dtoa_r+0x61c>)
 8009d60:	425e      	negs	r6, r3
 8009d62:	4b9b      	ldr	r3, [pc, #620]	; (8009fd0 <_dtoa_r+0x618>)
 8009d64:	f006 020f 	and.w	r2, r6, #15
 8009d68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d70:	ec51 0b19 	vmov	r0, r1, d9
 8009d74:	f7f6 fc40 	bl	80005f8 <__aeabi_dmul>
 8009d78:	1136      	asrs	r6, r6, #4
 8009d7a:	4682      	mov	sl, r0
 8009d7c:	468b      	mov	fp, r1
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2502      	movs	r5, #2
 8009d82:	2e00      	cmp	r6, #0
 8009d84:	d17a      	bne.n	8009e7c <_dtoa_r+0x4c4>
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d1d3      	bne.n	8009d32 <_dtoa_r+0x37a>
 8009d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 8082 	beq.w	8009e96 <_dtoa_r+0x4de>
 8009d92:	4b91      	ldr	r3, [pc, #580]	; (8009fd8 <_dtoa_r+0x620>)
 8009d94:	2200      	movs	r2, #0
 8009d96:	4650      	mov	r0, sl
 8009d98:	4659      	mov	r1, fp
 8009d9a:	f7f6 fe9f 	bl	8000adc <__aeabi_dcmplt>
 8009d9e:	2800      	cmp	r0, #0
 8009da0:	d079      	beq.n	8009e96 <_dtoa_r+0x4de>
 8009da2:	9b03      	ldr	r3, [sp, #12]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d076      	beq.n	8009e96 <_dtoa_r+0x4de>
 8009da8:	9b02      	ldr	r3, [sp, #8]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	dd36      	ble.n	8009e1c <_dtoa_r+0x464>
 8009dae:	9b00      	ldr	r3, [sp, #0]
 8009db0:	4650      	mov	r0, sl
 8009db2:	4659      	mov	r1, fp
 8009db4:	1e5f      	subs	r7, r3, #1
 8009db6:	2200      	movs	r2, #0
 8009db8:	4b88      	ldr	r3, [pc, #544]	; (8009fdc <_dtoa_r+0x624>)
 8009dba:	f7f6 fc1d 	bl	80005f8 <__aeabi_dmul>
 8009dbe:	9e02      	ldr	r6, [sp, #8]
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	468b      	mov	fp, r1
 8009dc4:	3501      	adds	r5, #1
 8009dc6:	4628      	mov	r0, r5
 8009dc8:	f7f6 fbac 	bl	8000524 <__aeabi_i2d>
 8009dcc:	4652      	mov	r2, sl
 8009dce:	465b      	mov	r3, fp
 8009dd0:	f7f6 fc12 	bl	80005f8 <__aeabi_dmul>
 8009dd4:	4b82      	ldr	r3, [pc, #520]	; (8009fe0 <_dtoa_r+0x628>)
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f7f6 fa58 	bl	800028c <__adddf3>
 8009ddc:	46d0      	mov	r8, sl
 8009dde:	46d9      	mov	r9, fp
 8009de0:	4682      	mov	sl, r0
 8009de2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009de6:	2e00      	cmp	r6, #0
 8009de8:	d158      	bne.n	8009e9c <_dtoa_r+0x4e4>
 8009dea:	4b7e      	ldr	r3, [pc, #504]	; (8009fe4 <_dtoa_r+0x62c>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	4640      	mov	r0, r8
 8009df0:	4649      	mov	r1, r9
 8009df2:	f7f6 fa49 	bl	8000288 <__aeabi_dsub>
 8009df6:	4652      	mov	r2, sl
 8009df8:	465b      	mov	r3, fp
 8009dfa:	4680      	mov	r8, r0
 8009dfc:	4689      	mov	r9, r1
 8009dfe:	f7f6 fe8b 	bl	8000b18 <__aeabi_dcmpgt>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	f040 8295 	bne.w	800a332 <_dtoa_r+0x97a>
 8009e08:	4652      	mov	r2, sl
 8009e0a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e0e:	4640      	mov	r0, r8
 8009e10:	4649      	mov	r1, r9
 8009e12:	f7f6 fe63 	bl	8000adc <__aeabi_dcmplt>
 8009e16:	2800      	cmp	r0, #0
 8009e18:	f040 8289 	bne.w	800a32e <_dtoa_r+0x976>
 8009e1c:	ec5b ab19 	vmov	sl, fp, d9
 8009e20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	f2c0 8148 	blt.w	800a0b8 <_dtoa_r+0x700>
 8009e28:	9a00      	ldr	r2, [sp, #0]
 8009e2a:	2a0e      	cmp	r2, #14
 8009e2c:	f300 8144 	bgt.w	800a0b8 <_dtoa_r+0x700>
 8009e30:	4b67      	ldr	r3, [pc, #412]	; (8009fd0 <_dtoa_r+0x618>)
 8009e32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e36:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	f280 80d5 	bge.w	8009fec <_dtoa_r+0x634>
 8009e42:	9b03      	ldr	r3, [sp, #12]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	f300 80d1 	bgt.w	8009fec <_dtoa_r+0x634>
 8009e4a:	f040 826f 	bne.w	800a32c <_dtoa_r+0x974>
 8009e4e:	4b65      	ldr	r3, [pc, #404]	; (8009fe4 <_dtoa_r+0x62c>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	4640      	mov	r0, r8
 8009e54:	4649      	mov	r1, r9
 8009e56:	f7f6 fbcf 	bl	80005f8 <__aeabi_dmul>
 8009e5a:	4652      	mov	r2, sl
 8009e5c:	465b      	mov	r3, fp
 8009e5e:	f7f6 fe51 	bl	8000b04 <__aeabi_dcmpge>
 8009e62:	9e03      	ldr	r6, [sp, #12]
 8009e64:	4637      	mov	r7, r6
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f040 8245 	bne.w	800a2f6 <_dtoa_r+0x93e>
 8009e6c:	9d01      	ldr	r5, [sp, #4]
 8009e6e:	2331      	movs	r3, #49	; 0x31
 8009e70:	f805 3b01 	strb.w	r3, [r5], #1
 8009e74:	9b00      	ldr	r3, [sp, #0]
 8009e76:	3301      	adds	r3, #1
 8009e78:	9300      	str	r3, [sp, #0]
 8009e7a:	e240      	b.n	800a2fe <_dtoa_r+0x946>
 8009e7c:	07f2      	lsls	r2, r6, #31
 8009e7e:	d505      	bpl.n	8009e8c <_dtoa_r+0x4d4>
 8009e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e84:	f7f6 fbb8 	bl	80005f8 <__aeabi_dmul>
 8009e88:	3501      	adds	r5, #1
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	1076      	asrs	r6, r6, #1
 8009e8e:	3708      	adds	r7, #8
 8009e90:	e777      	b.n	8009d82 <_dtoa_r+0x3ca>
 8009e92:	2502      	movs	r5, #2
 8009e94:	e779      	b.n	8009d8a <_dtoa_r+0x3d2>
 8009e96:	9f00      	ldr	r7, [sp, #0]
 8009e98:	9e03      	ldr	r6, [sp, #12]
 8009e9a:	e794      	b.n	8009dc6 <_dtoa_r+0x40e>
 8009e9c:	9901      	ldr	r1, [sp, #4]
 8009e9e:	4b4c      	ldr	r3, [pc, #304]	; (8009fd0 <_dtoa_r+0x618>)
 8009ea0:	4431      	add	r1, r6
 8009ea2:	910d      	str	r1, [sp, #52]	; 0x34
 8009ea4:	9908      	ldr	r1, [sp, #32]
 8009ea6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009eaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009eae:	2900      	cmp	r1, #0
 8009eb0:	d043      	beq.n	8009f3a <_dtoa_r+0x582>
 8009eb2:	494d      	ldr	r1, [pc, #308]	; (8009fe8 <_dtoa_r+0x630>)
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f7f6 fcc9 	bl	800084c <__aeabi_ddiv>
 8009eba:	4652      	mov	r2, sl
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	f7f6 f9e3 	bl	8000288 <__aeabi_dsub>
 8009ec2:	9d01      	ldr	r5, [sp, #4]
 8009ec4:	4682      	mov	sl, r0
 8009ec6:	468b      	mov	fp, r1
 8009ec8:	4649      	mov	r1, r9
 8009eca:	4640      	mov	r0, r8
 8009ecc:	f7f6 fe2e 	bl	8000b2c <__aeabi_d2iz>
 8009ed0:	4606      	mov	r6, r0
 8009ed2:	f7f6 fb27 	bl	8000524 <__aeabi_i2d>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	460b      	mov	r3, r1
 8009eda:	4640      	mov	r0, r8
 8009edc:	4649      	mov	r1, r9
 8009ede:	f7f6 f9d3 	bl	8000288 <__aeabi_dsub>
 8009ee2:	3630      	adds	r6, #48	; 0x30
 8009ee4:	f805 6b01 	strb.w	r6, [r5], #1
 8009ee8:	4652      	mov	r2, sl
 8009eea:	465b      	mov	r3, fp
 8009eec:	4680      	mov	r8, r0
 8009eee:	4689      	mov	r9, r1
 8009ef0:	f7f6 fdf4 	bl	8000adc <__aeabi_dcmplt>
 8009ef4:	2800      	cmp	r0, #0
 8009ef6:	d163      	bne.n	8009fc0 <_dtoa_r+0x608>
 8009ef8:	4642      	mov	r2, r8
 8009efa:	464b      	mov	r3, r9
 8009efc:	4936      	ldr	r1, [pc, #216]	; (8009fd8 <_dtoa_r+0x620>)
 8009efe:	2000      	movs	r0, #0
 8009f00:	f7f6 f9c2 	bl	8000288 <__aeabi_dsub>
 8009f04:	4652      	mov	r2, sl
 8009f06:	465b      	mov	r3, fp
 8009f08:	f7f6 fde8 	bl	8000adc <__aeabi_dcmplt>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	f040 80b5 	bne.w	800a07c <_dtoa_r+0x6c4>
 8009f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f14:	429d      	cmp	r5, r3
 8009f16:	d081      	beq.n	8009e1c <_dtoa_r+0x464>
 8009f18:	4b30      	ldr	r3, [pc, #192]	; (8009fdc <_dtoa_r+0x624>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	4650      	mov	r0, sl
 8009f1e:	4659      	mov	r1, fp
 8009f20:	f7f6 fb6a 	bl	80005f8 <__aeabi_dmul>
 8009f24:	4b2d      	ldr	r3, [pc, #180]	; (8009fdc <_dtoa_r+0x624>)
 8009f26:	4682      	mov	sl, r0
 8009f28:	468b      	mov	fp, r1
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	4649      	mov	r1, r9
 8009f2e:	2200      	movs	r2, #0
 8009f30:	f7f6 fb62 	bl	80005f8 <__aeabi_dmul>
 8009f34:	4680      	mov	r8, r0
 8009f36:	4689      	mov	r9, r1
 8009f38:	e7c6      	b.n	8009ec8 <_dtoa_r+0x510>
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	4659      	mov	r1, fp
 8009f3e:	f7f6 fb5b 	bl	80005f8 <__aeabi_dmul>
 8009f42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f44:	9d01      	ldr	r5, [sp, #4]
 8009f46:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f48:	4682      	mov	sl, r0
 8009f4a:	468b      	mov	fp, r1
 8009f4c:	4649      	mov	r1, r9
 8009f4e:	4640      	mov	r0, r8
 8009f50:	f7f6 fdec 	bl	8000b2c <__aeabi_d2iz>
 8009f54:	4606      	mov	r6, r0
 8009f56:	f7f6 fae5 	bl	8000524 <__aeabi_i2d>
 8009f5a:	3630      	adds	r6, #48	; 0x30
 8009f5c:	4602      	mov	r2, r0
 8009f5e:	460b      	mov	r3, r1
 8009f60:	4640      	mov	r0, r8
 8009f62:	4649      	mov	r1, r9
 8009f64:	f7f6 f990 	bl	8000288 <__aeabi_dsub>
 8009f68:	f805 6b01 	strb.w	r6, [r5], #1
 8009f6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f6e:	429d      	cmp	r5, r3
 8009f70:	4680      	mov	r8, r0
 8009f72:	4689      	mov	r9, r1
 8009f74:	f04f 0200 	mov.w	r2, #0
 8009f78:	d124      	bne.n	8009fc4 <_dtoa_r+0x60c>
 8009f7a:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <_dtoa_r+0x630>)
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	4659      	mov	r1, fp
 8009f80:	f7f6 f984 	bl	800028c <__adddf3>
 8009f84:	4602      	mov	r2, r0
 8009f86:	460b      	mov	r3, r1
 8009f88:	4640      	mov	r0, r8
 8009f8a:	4649      	mov	r1, r9
 8009f8c:	f7f6 fdc4 	bl	8000b18 <__aeabi_dcmpgt>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	d173      	bne.n	800a07c <_dtoa_r+0x6c4>
 8009f94:	4652      	mov	r2, sl
 8009f96:	465b      	mov	r3, fp
 8009f98:	4913      	ldr	r1, [pc, #76]	; (8009fe8 <_dtoa_r+0x630>)
 8009f9a:	2000      	movs	r0, #0
 8009f9c:	f7f6 f974 	bl	8000288 <__aeabi_dsub>
 8009fa0:	4602      	mov	r2, r0
 8009fa2:	460b      	mov	r3, r1
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	4649      	mov	r1, r9
 8009fa8:	f7f6 fd98 	bl	8000adc <__aeabi_dcmplt>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	f43f af35 	beq.w	8009e1c <_dtoa_r+0x464>
 8009fb2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009fb4:	1e6b      	subs	r3, r5, #1
 8009fb6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fb8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fbc:	2b30      	cmp	r3, #48	; 0x30
 8009fbe:	d0f8      	beq.n	8009fb2 <_dtoa_r+0x5fa>
 8009fc0:	9700      	str	r7, [sp, #0]
 8009fc2:	e049      	b.n	800a058 <_dtoa_r+0x6a0>
 8009fc4:	4b05      	ldr	r3, [pc, #20]	; (8009fdc <_dtoa_r+0x624>)
 8009fc6:	f7f6 fb17 	bl	80005f8 <__aeabi_dmul>
 8009fca:	4680      	mov	r8, r0
 8009fcc:	4689      	mov	r9, r1
 8009fce:	e7bd      	b.n	8009f4c <_dtoa_r+0x594>
 8009fd0:	0800b540 	.word	0x0800b540
 8009fd4:	0800b518 	.word	0x0800b518
 8009fd8:	3ff00000 	.word	0x3ff00000
 8009fdc:	40240000 	.word	0x40240000
 8009fe0:	401c0000 	.word	0x401c0000
 8009fe4:	40140000 	.word	0x40140000
 8009fe8:	3fe00000 	.word	0x3fe00000
 8009fec:	9d01      	ldr	r5, [sp, #4]
 8009fee:	4656      	mov	r6, sl
 8009ff0:	465f      	mov	r7, fp
 8009ff2:	4642      	mov	r2, r8
 8009ff4:	464b      	mov	r3, r9
 8009ff6:	4630      	mov	r0, r6
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	f7f6 fc27 	bl	800084c <__aeabi_ddiv>
 8009ffe:	f7f6 fd95 	bl	8000b2c <__aeabi_d2iz>
 800a002:	4682      	mov	sl, r0
 800a004:	f7f6 fa8e 	bl	8000524 <__aeabi_i2d>
 800a008:	4642      	mov	r2, r8
 800a00a:	464b      	mov	r3, r9
 800a00c:	f7f6 faf4 	bl	80005f8 <__aeabi_dmul>
 800a010:	4602      	mov	r2, r0
 800a012:	460b      	mov	r3, r1
 800a014:	4630      	mov	r0, r6
 800a016:	4639      	mov	r1, r7
 800a018:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a01c:	f7f6 f934 	bl	8000288 <__aeabi_dsub>
 800a020:	f805 6b01 	strb.w	r6, [r5], #1
 800a024:	9e01      	ldr	r6, [sp, #4]
 800a026:	9f03      	ldr	r7, [sp, #12]
 800a028:	1bae      	subs	r6, r5, r6
 800a02a:	42b7      	cmp	r7, r6
 800a02c:	4602      	mov	r2, r0
 800a02e:	460b      	mov	r3, r1
 800a030:	d135      	bne.n	800a09e <_dtoa_r+0x6e6>
 800a032:	f7f6 f92b 	bl	800028c <__adddf3>
 800a036:	4642      	mov	r2, r8
 800a038:	464b      	mov	r3, r9
 800a03a:	4606      	mov	r6, r0
 800a03c:	460f      	mov	r7, r1
 800a03e:	f7f6 fd6b 	bl	8000b18 <__aeabi_dcmpgt>
 800a042:	b9d0      	cbnz	r0, 800a07a <_dtoa_r+0x6c2>
 800a044:	4642      	mov	r2, r8
 800a046:	464b      	mov	r3, r9
 800a048:	4630      	mov	r0, r6
 800a04a:	4639      	mov	r1, r7
 800a04c:	f7f6 fd3c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a050:	b110      	cbz	r0, 800a058 <_dtoa_r+0x6a0>
 800a052:	f01a 0f01 	tst.w	sl, #1
 800a056:	d110      	bne.n	800a07a <_dtoa_r+0x6c2>
 800a058:	4620      	mov	r0, r4
 800a05a:	ee18 1a10 	vmov	r1, s16
 800a05e:	f7fe ffdb 	bl	8009018 <_Bfree>
 800a062:	2300      	movs	r3, #0
 800a064:	9800      	ldr	r0, [sp, #0]
 800a066:	702b      	strb	r3, [r5, #0]
 800a068:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a06a:	3001      	adds	r0, #1
 800a06c:	6018      	str	r0, [r3, #0]
 800a06e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a070:	2b00      	cmp	r3, #0
 800a072:	f43f acf1 	beq.w	8009a58 <_dtoa_r+0xa0>
 800a076:	601d      	str	r5, [r3, #0]
 800a078:	e4ee      	b.n	8009a58 <_dtoa_r+0xa0>
 800a07a:	9f00      	ldr	r7, [sp, #0]
 800a07c:	462b      	mov	r3, r5
 800a07e:	461d      	mov	r5, r3
 800a080:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a084:	2a39      	cmp	r2, #57	; 0x39
 800a086:	d106      	bne.n	800a096 <_dtoa_r+0x6de>
 800a088:	9a01      	ldr	r2, [sp, #4]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d1f7      	bne.n	800a07e <_dtoa_r+0x6c6>
 800a08e:	9901      	ldr	r1, [sp, #4]
 800a090:	2230      	movs	r2, #48	; 0x30
 800a092:	3701      	adds	r7, #1
 800a094:	700a      	strb	r2, [r1, #0]
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	3201      	adds	r2, #1
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	e790      	b.n	8009fc0 <_dtoa_r+0x608>
 800a09e:	4ba6      	ldr	r3, [pc, #664]	; (800a338 <_dtoa_r+0x980>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	f7f6 faa9 	bl	80005f8 <__aeabi_dmul>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4606      	mov	r6, r0
 800a0ac:	460f      	mov	r7, r1
 800a0ae:	f7f6 fd0b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d09d      	beq.n	8009ff2 <_dtoa_r+0x63a>
 800a0b6:	e7cf      	b.n	800a058 <_dtoa_r+0x6a0>
 800a0b8:	9a08      	ldr	r2, [sp, #32]
 800a0ba:	2a00      	cmp	r2, #0
 800a0bc:	f000 80d7 	beq.w	800a26e <_dtoa_r+0x8b6>
 800a0c0:	9a06      	ldr	r2, [sp, #24]
 800a0c2:	2a01      	cmp	r2, #1
 800a0c4:	f300 80ba 	bgt.w	800a23c <_dtoa_r+0x884>
 800a0c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	f000 80b2 	beq.w	800a234 <_dtoa_r+0x87c>
 800a0d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a0d4:	9e07      	ldr	r6, [sp, #28]
 800a0d6:	9d04      	ldr	r5, [sp, #16]
 800a0d8:	9a04      	ldr	r2, [sp, #16]
 800a0da:	441a      	add	r2, r3
 800a0dc:	9204      	str	r2, [sp, #16]
 800a0de:	9a05      	ldr	r2, [sp, #20]
 800a0e0:	2101      	movs	r1, #1
 800a0e2:	441a      	add	r2, r3
 800a0e4:	4620      	mov	r0, r4
 800a0e6:	9205      	str	r2, [sp, #20]
 800a0e8:	f7ff f84e 	bl	8009188 <__i2b>
 800a0ec:	4607      	mov	r7, r0
 800a0ee:	2d00      	cmp	r5, #0
 800a0f0:	dd0c      	ble.n	800a10c <_dtoa_r+0x754>
 800a0f2:	9b05      	ldr	r3, [sp, #20]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd09      	ble.n	800a10c <_dtoa_r+0x754>
 800a0f8:	42ab      	cmp	r3, r5
 800a0fa:	9a04      	ldr	r2, [sp, #16]
 800a0fc:	bfa8      	it	ge
 800a0fe:	462b      	movge	r3, r5
 800a100:	1ad2      	subs	r2, r2, r3
 800a102:	9204      	str	r2, [sp, #16]
 800a104:	9a05      	ldr	r2, [sp, #20]
 800a106:	1aed      	subs	r5, r5, r3
 800a108:	1ad3      	subs	r3, r2, r3
 800a10a:	9305      	str	r3, [sp, #20]
 800a10c:	9b07      	ldr	r3, [sp, #28]
 800a10e:	b31b      	cbz	r3, 800a158 <_dtoa_r+0x7a0>
 800a110:	9b08      	ldr	r3, [sp, #32]
 800a112:	2b00      	cmp	r3, #0
 800a114:	f000 80af 	beq.w	800a276 <_dtoa_r+0x8be>
 800a118:	2e00      	cmp	r6, #0
 800a11a:	dd13      	ble.n	800a144 <_dtoa_r+0x78c>
 800a11c:	4639      	mov	r1, r7
 800a11e:	4632      	mov	r2, r6
 800a120:	4620      	mov	r0, r4
 800a122:	f7ff f8f1 	bl	8009308 <__pow5mult>
 800a126:	ee18 2a10 	vmov	r2, s16
 800a12a:	4601      	mov	r1, r0
 800a12c:	4607      	mov	r7, r0
 800a12e:	4620      	mov	r0, r4
 800a130:	f7ff f840 	bl	80091b4 <__multiply>
 800a134:	ee18 1a10 	vmov	r1, s16
 800a138:	4680      	mov	r8, r0
 800a13a:	4620      	mov	r0, r4
 800a13c:	f7fe ff6c 	bl	8009018 <_Bfree>
 800a140:	ee08 8a10 	vmov	s16, r8
 800a144:	9b07      	ldr	r3, [sp, #28]
 800a146:	1b9a      	subs	r2, r3, r6
 800a148:	d006      	beq.n	800a158 <_dtoa_r+0x7a0>
 800a14a:	ee18 1a10 	vmov	r1, s16
 800a14e:	4620      	mov	r0, r4
 800a150:	f7ff f8da 	bl	8009308 <__pow5mult>
 800a154:	ee08 0a10 	vmov	s16, r0
 800a158:	2101      	movs	r1, #1
 800a15a:	4620      	mov	r0, r4
 800a15c:	f7ff f814 	bl	8009188 <__i2b>
 800a160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a162:	2b00      	cmp	r3, #0
 800a164:	4606      	mov	r6, r0
 800a166:	f340 8088 	ble.w	800a27a <_dtoa_r+0x8c2>
 800a16a:	461a      	mov	r2, r3
 800a16c:	4601      	mov	r1, r0
 800a16e:	4620      	mov	r0, r4
 800a170:	f7ff f8ca 	bl	8009308 <__pow5mult>
 800a174:	9b06      	ldr	r3, [sp, #24]
 800a176:	2b01      	cmp	r3, #1
 800a178:	4606      	mov	r6, r0
 800a17a:	f340 8081 	ble.w	800a280 <_dtoa_r+0x8c8>
 800a17e:	f04f 0800 	mov.w	r8, #0
 800a182:	6933      	ldr	r3, [r6, #16]
 800a184:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a188:	6918      	ldr	r0, [r3, #16]
 800a18a:	f7fe ffad 	bl	80090e8 <__hi0bits>
 800a18e:	f1c0 0020 	rsb	r0, r0, #32
 800a192:	9b05      	ldr	r3, [sp, #20]
 800a194:	4418      	add	r0, r3
 800a196:	f010 001f 	ands.w	r0, r0, #31
 800a19a:	f000 8092 	beq.w	800a2c2 <_dtoa_r+0x90a>
 800a19e:	f1c0 0320 	rsb	r3, r0, #32
 800a1a2:	2b04      	cmp	r3, #4
 800a1a4:	f340 808a 	ble.w	800a2bc <_dtoa_r+0x904>
 800a1a8:	f1c0 001c 	rsb	r0, r0, #28
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	4403      	add	r3, r0
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	9b05      	ldr	r3, [sp, #20]
 800a1b4:	4403      	add	r3, r0
 800a1b6:	4405      	add	r5, r0
 800a1b8:	9305      	str	r3, [sp, #20]
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	dd07      	ble.n	800a1d0 <_dtoa_r+0x818>
 800a1c0:	ee18 1a10 	vmov	r1, s16
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f7ff f8f8 	bl	80093bc <__lshift>
 800a1cc:	ee08 0a10 	vmov	s16, r0
 800a1d0:	9b05      	ldr	r3, [sp, #20]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	dd05      	ble.n	800a1e2 <_dtoa_r+0x82a>
 800a1d6:	4631      	mov	r1, r6
 800a1d8:	461a      	mov	r2, r3
 800a1da:	4620      	mov	r0, r4
 800a1dc:	f7ff f8ee 	bl	80093bc <__lshift>
 800a1e0:	4606      	mov	r6, r0
 800a1e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d06e      	beq.n	800a2c6 <_dtoa_r+0x90e>
 800a1e8:	ee18 0a10 	vmov	r0, s16
 800a1ec:	4631      	mov	r1, r6
 800a1ee:	f7ff f955 	bl	800949c <__mcmp>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	da67      	bge.n	800a2c6 <_dtoa_r+0x90e>
 800a1f6:	9b00      	ldr	r3, [sp, #0]
 800a1f8:	3b01      	subs	r3, #1
 800a1fa:	ee18 1a10 	vmov	r1, s16
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	220a      	movs	r2, #10
 800a202:	2300      	movs	r3, #0
 800a204:	4620      	mov	r0, r4
 800a206:	f7fe ff29 	bl	800905c <__multadd>
 800a20a:	9b08      	ldr	r3, [sp, #32]
 800a20c:	ee08 0a10 	vmov	s16, r0
 800a210:	2b00      	cmp	r3, #0
 800a212:	f000 81b1 	beq.w	800a578 <_dtoa_r+0xbc0>
 800a216:	2300      	movs	r3, #0
 800a218:	4639      	mov	r1, r7
 800a21a:	220a      	movs	r2, #10
 800a21c:	4620      	mov	r0, r4
 800a21e:	f7fe ff1d 	bl	800905c <__multadd>
 800a222:	9b02      	ldr	r3, [sp, #8]
 800a224:	2b00      	cmp	r3, #0
 800a226:	4607      	mov	r7, r0
 800a228:	f300 808e 	bgt.w	800a348 <_dtoa_r+0x990>
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	2b02      	cmp	r3, #2
 800a230:	dc51      	bgt.n	800a2d6 <_dtoa_r+0x91e>
 800a232:	e089      	b.n	800a348 <_dtoa_r+0x990>
 800a234:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a236:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a23a:	e74b      	b.n	800a0d4 <_dtoa_r+0x71c>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	1e5e      	subs	r6, r3, #1
 800a240:	9b07      	ldr	r3, [sp, #28]
 800a242:	42b3      	cmp	r3, r6
 800a244:	bfbf      	itttt	lt
 800a246:	9b07      	ldrlt	r3, [sp, #28]
 800a248:	9607      	strlt	r6, [sp, #28]
 800a24a:	1af2      	sublt	r2, r6, r3
 800a24c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a24e:	bfb6      	itet	lt
 800a250:	189b      	addlt	r3, r3, r2
 800a252:	1b9e      	subge	r6, r3, r6
 800a254:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a256:	9b03      	ldr	r3, [sp, #12]
 800a258:	bfb8      	it	lt
 800a25a:	2600      	movlt	r6, #0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfb7      	itett	lt
 800a260:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a264:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a268:	1a9d      	sublt	r5, r3, r2
 800a26a:	2300      	movlt	r3, #0
 800a26c:	e734      	b.n	800a0d8 <_dtoa_r+0x720>
 800a26e:	9e07      	ldr	r6, [sp, #28]
 800a270:	9d04      	ldr	r5, [sp, #16]
 800a272:	9f08      	ldr	r7, [sp, #32]
 800a274:	e73b      	b.n	800a0ee <_dtoa_r+0x736>
 800a276:	9a07      	ldr	r2, [sp, #28]
 800a278:	e767      	b.n	800a14a <_dtoa_r+0x792>
 800a27a:	9b06      	ldr	r3, [sp, #24]
 800a27c:	2b01      	cmp	r3, #1
 800a27e:	dc18      	bgt.n	800a2b2 <_dtoa_r+0x8fa>
 800a280:	f1ba 0f00 	cmp.w	sl, #0
 800a284:	d115      	bne.n	800a2b2 <_dtoa_r+0x8fa>
 800a286:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a28a:	b993      	cbnz	r3, 800a2b2 <_dtoa_r+0x8fa>
 800a28c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a290:	0d1b      	lsrs	r3, r3, #20
 800a292:	051b      	lsls	r3, r3, #20
 800a294:	b183      	cbz	r3, 800a2b8 <_dtoa_r+0x900>
 800a296:	9b04      	ldr	r3, [sp, #16]
 800a298:	3301      	adds	r3, #1
 800a29a:	9304      	str	r3, [sp, #16]
 800a29c:	9b05      	ldr	r3, [sp, #20]
 800a29e:	3301      	adds	r3, #1
 800a2a0:	9305      	str	r3, [sp, #20]
 800a2a2:	f04f 0801 	mov.w	r8, #1
 800a2a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	f47f af6a 	bne.w	800a182 <_dtoa_r+0x7ca>
 800a2ae:	2001      	movs	r0, #1
 800a2b0:	e76f      	b.n	800a192 <_dtoa_r+0x7da>
 800a2b2:	f04f 0800 	mov.w	r8, #0
 800a2b6:	e7f6      	b.n	800a2a6 <_dtoa_r+0x8ee>
 800a2b8:	4698      	mov	r8, r3
 800a2ba:	e7f4      	b.n	800a2a6 <_dtoa_r+0x8ee>
 800a2bc:	f43f af7d 	beq.w	800a1ba <_dtoa_r+0x802>
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	301c      	adds	r0, #28
 800a2c4:	e772      	b.n	800a1ac <_dtoa_r+0x7f4>
 800a2c6:	9b03      	ldr	r3, [sp, #12]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	dc37      	bgt.n	800a33c <_dtoa_r+0x984>
 800a2cc:	9b06      	ldr	r3, [sp, #24]
 800a2ce:	2b02      	cmp	r3, #2
 800a2d0:	dd34      	ble.n	800a33c <_dtoa_r+0x984>
 800a2d2:	9b03      	ldr	r3, [sp, #12]
 800a2d4:	9302      	str	r3, [sp, #8]
 800a2d6:	9b02      	ldr	r3, [sp, #8]
 800a2d8:	b96b      	cbnz	r3, 800a2f6 <_dtoa_r+0x93e>
 800a2da:	4631      	mov	r1, r6
 800a2dc:	2205      	movs	r2, #5
 800a2de:	4620      	mov	r0, r4
 800a2e0:	f7fe febc 	bl	800905c <__multadd>
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	4606      	mov	r6, r0
 800a2e8:	ee18 0a10 	vmov	r0, s16
 800a2ec:	f7ff f8d6 	bl	800949c <__mcmp>
 800a2f0:	2800      	cmp	r0, #0
 800a2f2:	f73f adbb 	bgt.w	8009e6c <_dtoa_r+0x4b4>
 800a2f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2f8:	9d01      	ldr	r5, [sp, #4]
 800a2fa:	43db      	mvns	r3, r3
 800a2fc:	9300      	str	r3, [sp, #0]
 800a2fe:	f04f 0800 	mov.w	r8, #0
 800a302:	4631      	mov	r1, r6
 800a304:	4620      	mov	r0, r4
 800a306:	f7fe fe87 	bl	8009018 <_Bfree>
 800a30a:	2f00      	cmp	r7, #0
 800a30c:	f43f aea4 	beq.w	800a058 <_dtoa_r+0x6a0>
 800a310:	f1b8 0f00 	cmp.w	r8, #0
 800a314:	d005      	beq.n	800a322 <_dtoa_r+0x96a>
 800a316:	45b8      	cmp	r8, r7
 800a318:	d003      	beq.n	800a322 <_dtoa_r+0x96a>
 800a31a:	4641      	mov	r1, r8
 800a31c:	4620      	mov	r0, r4
 800a31e:	f7fe fe7b 	bl	8009018 <_Bfree>
 800a322:	4639      	mov	r1, r7
 800a324:	4620      	mov	r0, r4
 800a326:	f7fe fe77 	bl	8009018 <_Bfree>
 800a32a:	e695      	b.n	800a058 <_dtoa_r+0x6a0>
 800a32c:	2600      	movs	r6, #0
 800a32e:	4637      	mov	r7, r6
 800a330:	e7e1      	b.n	800a2f6 <_dtoa_r+0x93e>
 800a332:	9700      	str	r7, [sp, #0]
 800a334:	4637      	mov	r7, r6
 800a336:	e599      	b.n	8009e6c <_dtoa_r+0x4b4>
 800a338:	40240000 	.word	0x40240000
 800a33c:	9b08      	ldr	r3, [sp, #32]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	f000 80ca 	beq.w	800a4d8 <_dtoa_r+0xb20>
 800a344:	9b03      	ldr	r3, [sp, #12]
 800a346:	9302      	str	r3, [sp, #8]
 800a348:	2d00      	cmp	r5, #0
 800a34a:	dd05      	ble.n	800a358 <_dtoa_r+0x9a0>
 800a34c:	4639      	mov	r1, r7
 800a34e:	462a      	mov	r2, r5
 800a350:	4620      	mov	r0, r4
 800a352:	f7ff f833 	bl	80093bc <__lshift>
 800a356:	4607      	mov	r7, r0
 800a358:	f1b8 0f00 	cmp.w	r8, #0
 800a35c:	d05b      	beq.n	800a416 <_dtoa_r+0xa5e>
 800a35e:	6879      	ldr	r1, [r7, #4]
 800a360:	4620      	mov	r0, r4
 800a362:	f7fe fe19 	bl	8008f98 <_Balloc>
 800a366:	4605      	mov	r5, r0
 800a368:	b928      	cbnz	r0, 800a376 <_dtoa_r+0x9be>
 800a36a:	4b87      	ldr	r3, [pc, #540]	; (800a588 <_dtoa_r+0xbd0>)
 800a36c:	4602      	mov	r2, r0
 800a36e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a372:	f7ff bb3b 	b.w	80099ec <_dtoa_r+0x34>
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	3202      	adds	r2, #2
 800a37a:	0092      	lsls	r2, r2, #2
 800a37c:	f107 010c 	add.w	r1, r7, #12
 800a380:	300c      	adds	r0, #12
 800a382:	f7fe fc9d 	bl	8008cc0 <memcpy>
 800a386:	2201      	movs	r2, #1
 800a388:	4629      	mov	r1, r5
 800a38a:	4620      	mov	r0, r4
 800a38c:	f7ff f816 	bl	80093bc <__lshift>
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	f103 0901 	add.w	r9, r3, #1
 800a396:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a39a:	4413      	add	r3, r2
 800a39c:	9305      	str	r3, [sp, #20]
 800a39e:	f00a 0301 	and.w	r3, sl, #1
 800a3a2:	46b8      	mov	r8, r7
 800a3a4:	9304      	str	r3, [sp, #16]
 800a3a6:	4607      	mov	r7, r0
 800a3a8:	4631      	mov	r1, r6
 800a3aa:	ee18 0a10 	vmov	r0, s16
 800a3ae:	f7ff fa75 	bl	800989c <quorem>
 800a3b2:	4641      	mov	r1, r8
 800a3b4:	9002      	str	r0, [sp, #8]
 800a3b6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a3ba:	ee18 0a10 	vmov	r0, s16
 800a3be:	f7ff f86d 	bl	800949c <__mcmp>
 800a3c2:	463a      	mov	r2, r7
 800a3c4:	9003      	str	r0, [sp, #12]
 800a3c6:	4631      	mov	r1, r6
 800a3c8:	4620      	mov	r0, r4
 800a3ca:	f7ff f883 	bl	80094d4 <__mdiff>
 800a3ce:	68c2      	ldr	r2, [r0, #12]
 800a3d0:	f109 3bff 	add.w	fp, r9, #4294967295
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	bb02      	cbnz	r2, 800a41a <_dtoa_r+0xa62>
 800a3d8:	4601      	mov	r1, r0
 800a3da:	ee18 0a10 	vmov	r0, s16
 800a3de:	f7ff f85d 	bl	800949c <__mcmp>
 800a3e2:	4602      	mov	r2, r0
 800a3e4:	4629      	mov	r1, r5
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	9207      	str	r2, [sp, #28]
 800a3ea:	f7fe fe15 	bl	8009018 <_Bfree>
 800a3ee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a3f2:	ea43 0102 	orr.w	r1, r3, r2
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	430b      	orrs	r3, r1
 800a3fa:	464d      	mov	r5, r9
 800a3fc:	d10f      	bne.n	800a41e <_dtoa_r+0xa66>
 800a3fe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a402:	d02a      	beq.n	800a45a <_dtoa_r+0xaa2>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	2b00      	cmp	r3, #0
 800a408:	dd02      	ble.n	800a410 <_dtoa_r+0xa58>
 800a40a:	9b02      	ldr	r3, [sp, #8]
 800a40c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a410:	f88b a000 	strb.w	sl, [fp]
 800a414:	e775      	b.n	800a302 <_dtoa_r+0x94a>
 800a416:	4638      	mov	r0, r7
 800a418:	e7ba      	b.n	800a390 <_dtoa_r+0x9d8>
 800a41a:	2201      	movs	r2, #1
 800a41c:	e7e2      	b.n	800a3e4 <_dtoa_r+0xa2c>
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	2b00      	cmp	r3, #0
 800a422:	db04      	blt.n	800a42e <_dtoa_r+0xa76>
 800a424:	9906      	ldr	r1, [sp, #24]
 800a426:	430b      	orrs	r3, r1
 800a428:	9904      	ldr	r1, [sp, #16]
 800a42a:	430b      	orrs	r3, r1
 800a42c:	d122      	bne.n	800a474 <_dtoa_r+0xabc>
 800a42e:	2a00      	cmp	r2, #0
 800a430:	ddee      	ble.n	800a410 <_dtoa_r+0xa58>
 800a432:	ee18 1a10 	vmov	r1, s16
 800a436:	2201      	movs	r2, #1
 800a438:	4620      	mov	r0, r4
 800a43a:	f7fe ffbf 	bl	80093bc <__lshift>
 800a43e:	4631      	mov	r1, r6
 800a440:	ee08 0a10 	vmov	s16, r0
 800a444:	f7ff f82a 	bl	800949c <__mcmp>
 800a448:	2800      	cmp	r0, #0
 800a44a:	dc03      	bgt.n	800a454 <_dtoa_r+0xa9c>
 800a44c:	d1e0      	bne.n	800a410 <_dtoa_r+0xa58>
 800a44e:	f01a 0f01 	tst.w	sl, #1
 800a452:	d0dd      	beq.n	800a410 <_dtoa_r+0xa58>
 800a454:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a458:	d1d7      	bne.n	800a40a <_dtoa_r+0xa52>
 800a45a:	2339      	movs	r3, #57	; 0x39
 800a45c:	f88b 3000 	strb.w	r3, [fp]
 800a460:	462b      	mov	r3, r5
 800a462:	461d      	mov	r5, r3
 800a464:	3b01      	subs	r3, #1
 800a466:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a46a:	2a39      	cmp	r2, #57	; 0x39
 800a46c:	d071      	beq.n	800a552 <_dtoa_r+0xb9a>
 800a46e:	3201      	adds	r2, #1
 800a470:	701a      	strb	r2, [r3, #0]
 800a472:	e746      	b.n	800a302 <_dtoa_r+0x94a>
 800a474:	2a00      	cmp	r2, #0
 800a476:	dd07      	ble.n	800a488 <_dtoa_r+0xad0>
 800a478:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a47c:	d0ed      	beq.n	800a45a <_dtoa_r+0xaa2>
 800a47e:	f10a 0301 	add.w	r3, sl, #1
 800a482:	f88b 3000 	strb.w	r3, [fp]
 800a486:	e73c      	b.n	800a302 <_dtoa_r+0x94a>
 800a488:	9b05      	ldr	r3, [sp, #20]
 800a48a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a48e:	4599      	cmp	r9, r3
 800a490:	d047      	beq.n	800a522 <_dtoa_r+0xb6a>
 800a492:	ee18 1a10 	vmov	r1, s16
 800a496:	2300      	movs	r3, #0
 800a498:	220a      	movs	r2, #10
 800a49a:	4620      	mov	r0, r4
 800a49c:	f7fe fdde 	bl	800905c <__multadd>
 800a4a0:	45b8      	cmp	r8, r7
 800a4a2:	ee08 0a10 	vmov	s16, r0
 800a4a6:	f04f 0300 	mov.w	r3, #0
 800a4aa:	f04f 020a 	mov.w	r2, #10
 800a4ae:	4641      	mov	r1, r8
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	d106      	bne.n	800a4c2 <_dtoa_r+0xb0a>
 800a4b4:	f7fe fdd2 	bl	800905c <__multadd>
 800a4b8:	4680      	mov	r8, r0
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	f109 0901 	add.w	r9, r9, #1
 800a4c0:	e772      	b.n	800a3a8 <_dtoa_r+0x9f0>
 800a4c2:	f7fe fdcb 	bl	800905c <__multadd>
 800a4c6:	4639      	mov	r1, r7
 800a4c8:	4680      	mov	r8, r0
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	220a      	movs	r2, #10
 800a4ce:	4620      	mov	r0, r4
 800a4d0:	f7fe fdc4 	bl	800905c <__multadd>
 800a4d4:	4607      	mov	r7, r0
 800a4d6:	e7f1      	b.n	800a4bc <_dtoa_r+0xb04>
 800a4d8:	9b03      	ldr	r3, [sp, #12]
 800a4da:	9302      	str	r3, [sp, #8]
 800a4dc:	9d01      	ldr	r5, [sp, #4]
 800a4de:	ee18 0a10 	vmov	r0, s16
 800a4e2:	4631      	mov	r1, r6
 800a4e4:	f7ff f9da 	bl	800989c <quorem>
 800a4e8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a4ec:	9b01      	ldr	r3, [sp, #4]
 800a4ee:	f805 ab01 	strb.w	sl, [r5], #1
 800a4f2:	1aea      	subs	r2, r5, r3
 800a4f4:	9b02      	ldr	r3, [sp, #8]
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	dd09      	ble.n	800a50e <_dtoa_r+0xb56>
 800a4fa:	ee18 1a10 	vmov	r1, s16
 800a4fe:	2300      	movs	r3, #0
 800a500:	220a      	movs	r2, #10
 800a502:	4620      	mov	r0, r4
 800a504:	f7fe fdaa 	bl	800905c <__multadd>
 800a508:	ee08 0a10 	vmov	s16, r0
 800a50c:	e7e7      	b.n	800a4de <_dtoa_r+0xb26>
 800a50e:	9b02      	ldr	r3, [sp, #8]
 800a510:	2b00      	cmp	r3, #0
 800a512:	bfc8      	it	gt
 800a514:	461d      	movgt	r5, r3
 800a516:	9b01      	ldr	r3, [sp, #4]
 800a518:	bfd8      	it	le
 800a51a:	2501      	movle	r5, #1
 800a51c:	441d      	add	r5, r3
 800a51e:	f04f 0800 	mov.w	r8, #0
 800a522:	ee18 1a10 	vmov	r1, s16
 800a526:	2201      	movs	r2, #1
 800a528:	4620      	mov	r0, r4
 800a52a:	f7fe ff47 	bl	80093bc <__lshift>
 800a52e:	4631      	mov	r1, r6
 800a530:	ee08 0a10 	vmov	s16, r0
 800a534:	f7fe ffb2 	bl	800949c <__mcmp>
 800a538:	2800      	cmp	r0, #0
 800a53a:	dc91      	bgt.n	800a460 <_dtoa_r+0xaa8>
 800a53c:	d102      	bne.n	800a544 <_dtoa_r+0xb8c>
 800a53e:	f01a 0f01 	tst.w	sl, #1
 800a542:	d18d      	bne.n	800a460 <_dtoa_r+0xaa8>
 800a544:	462b      	mov	r3, r5
 800a546:	461d      	mov	r5, r3
 800a548:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a54c:	2a30      	cmp	r2, #48	; 0x30
 800a54e:	d0fa      	beq.n	800a546 <_dtoa_r+0xb8e>
 800a550:	e6d7      	b.n	800a302 <_dtoa_r+0x94a>
 800a552:	9a01      	ldr	r2, [sp, #4]
 800a554:	429a      	cmp	r2, r3
 800a556:	d184      	bne.n	800a462 <_dtoa_r+0xaaa>
 800a558:	9b00      	ldr	r3, [sp, #0]
 800a55a:	3301      	adds	r3, #1
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	2331      	movs	r3, #49	; 0x31
 800a560:	7013      	strb	r3, [r2, #0]
 800a562:	e6ce      	b.n	800a302 <_dtoa_r+0x94a>
 800a564:	4b09      	ldr	r3, [pc, #36]	; (800a58c <_dtoa_r+0xbd4>)
 800a566:	f7ff ba95 	b.w	8009a94 <_dtoa_r+0xdc>
 800a56a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	f47f aa6e 	bne.w	8009a4e <_dtoa_r+0x96>
 800a572:	4b07      	ldr	r3, [pc, #28]	; (800a590 <_dtoa_r+0xbd8>)
 800a574:	f7ff ba8e 	b.w	8009a94 <_dtoa_r+0xdc>
 800a578:	9b02      	ldr	r3, [sp, #8]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	dcae      	bgt.n	800a4dc <_dtoa_r+0xb24>
 800a57e:	9b06      	ldr	r3, [sp, #24]
 800a580:	2b02      	cmp	r3, #2
 800a582:	f73f aea8 	bgt.w	800a2d6 <_dtoa_r+0x91e>
 800a586:	e7a9      	b.n	800a4dc <_dtoa_r+0xb24>
 800a588:	0800b507 	.word	0x0800b507
 800a58c:	0800b65d 	.word	0x0800b65d
 800a590:	0800b650 	.word	0x0800b650

0800a594 <fiprintf>:
 800a594:	b40e      	push	{r1, r2, r3}
 800a596:	b503      	push	{r0, r1, lr}
 800a598:	4601      	mov	r1, r0
 800a59a:	ab03      	add	r3, sp, #12
 800a59c:	4805      	ldr	r0, [pc, #20]	; (800a5b4 <fiprintf+0x20>)
 800a59e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5a2:	6800      	ldr	r0, [r0, #0]
 800a5a4:	9301      	str	r3, [sp, #4]
 800a5a6:	f000 f891 	bl	800a6cc <_vfiprintf_r>
 800a5aa:	b002      	add	sp, #8
 800a5ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5b0:	b003      	add	sp, #12
 800a5b2:	4770      	bx	lr
 800a5b4:	20000114 	.word	0x20000114

0800a5b8 <malloc>:
 800a5b8:	4b02      	ldr	r3, [pc, #8]	; (800a5c4 <malloc+0xc>)
 800a5ba:	4601      	mov	r1, r0
 800a5bc:	6818      	ldr	r0, [r3, #0]
 800a5be:	f7ff b8c3 	b.w	8009748 <_malloc_r>
 800a5c2:	bf00      	nop
 800a5c4:	20000114 	.word	0x20000114

0800a5c8 <__malloc_lock>:
 800a5c8:	4801      	ldr	r0, [pc, #4]	; (800a5d0 <__malloc_lock+0x8>)
 800a5ca:	f000 bdc3 	b.w	800b154 <__retarget_lock_acquire_recursive>
 800a5ce:	bf00      	nop
 800a5d0:	20002748 	.word	0x20002748

0800a5d4 <__malloc_unlock>:
 800a5d4:	4801      	ldr	r0, [pc, #4]	; (800a5dc <__malloc_unlock+0x8>)
 800a5d6:	f000 bdbe 	b.w	800b156 <__retarget_lock_release_recursive>
 800a5da:	bf00      	nop
 800a5dc:	20002748 	.word	0x20002748

0800a5e0 <_free_r>:
 800a5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a5e2:	2900      	cmp	r1, #0
 800a5e4:	d044      	beq.n	800a670 <_free_r+0x90>
 800a5e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a5ea:	9001      	str	r0, [sp, #4]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	f1a1 0404 	sub.w	r4, r1, #4
 800a5f2:	bfb8      	it	lt
 800a5f4:	18e4      	addlt	r4, r4, r3
 800a5f6:	f7ff ffe7 	bl	800a5c8 <__malloc_lock>
 800a5fa:	4a1e      	ldr	r2, [pc, #120]	; (800a674 <_free_r+0x94>)
 800a5fc:	9801      	ldr	r0, [sp, #4]
 800a5fe:	6813      	ldr	r3, [r2, #0]
 800a600:	b933      	cbnz	r3, 800a610 <_free_r+0x30>
 800a602:	6063      	str	r3, [r4, #4]
 800a604:	6014      	str	r4, [r2, #0]
 800a606:	b003      	add	sp, #12
 800a608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a60c:	f7ff bfe2 	b.w	800a5d4 <__malloc_unlock>
 800a610:	42a3      	cmp	r3, r4
 800a612:	d908      	bls.n	800a626 <_free_r+0x46>
 800a614:	6825      	ldr	r5, [r4, #0]
 800a616:	1961      	adds	r1, r4, r5
 800a618:	428b      	cmp	r3, r1
 800a61a:	bf01      	itttt	eq
 800a61c:	6819      	ldreq	r1, [r3, #0]
 800a61e:	685b      	ldreq	r3, [r3, #4]
 800a620:	1949      	addeq	r1, r1, r5
 800a622:	6021      	streq	r1, [r4, #0]
 800a624:	e7ed      	b.n	800a602 <_free_r+0x22>
 800a626:	461a      	mov	r2, r3
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	b10b      	cbz	r3, 800a630 <_free_r+0x50>
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	d9fa      	bls.n	800a626 <_free_r+0x46>
 800a630:	6811      	ldr	r1, [r2, #0]
 800a632:	1855      	adds	r5, r2, r1
 800a634:	42a5      	cmp	r5, r4
 800a636:	d10b      	bne.n	800a650 <_free_r+0x70>
 800a638:	6824      	ldr	r4, [r4, #0]
 800a63a:	4421      	add	r1, r4
 800a63c:	1854      	adds	r4, r2, r1
 800a63e:	42a3      	cmp	r3, r4
 800a640:	6011      	str	r1, [r2, #0]
 800a642:	d1e0      	bne.n	800a606 <_free_r+0x26>
 800a644:	681c      	ldr	r4, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	6053      	str	r3, [r2, #4]
 800a64a:	4421      	add	r1, r4
 800a64c:	6011      	str	r1, [r2, #0]
 800a64e:	e7da      	b.n	800a606 <_free_r+0x26>
 800a650:	d902      	bls.n	800a658 <_free_r+0x78>
 800a652:	230c      	movs	r3, #12
 800a654:	6003      	str	r3, [r0, #0]
 800a656:	e7d6      	b.n	800a606 <_free_r+0x26>
 800a658:	6825      	ldr	r5, [r4, #0]
 800a65a:	1961      	adds	r1, r4, r5
 800a65c:	428b      	cmp	r3, r1
 800a65e:	bf04      	itt	eq
 800a660:	6819      	ldreq	r1, [r3, #0]
 800a662:	685b      	ldreq	r3, [r3, #4]
 800a664:	6063      	str	r3, [r4, #4]
 800a666:	bf04      	itt	eq
 800a668:	1949      	addeq	r1, r1, r5
 800a66a:	6021      	streq	r1, [r4, #0]
 800a66c:	6054      	str	r4, [r2, #4]
 800a66e:	e7ca      	b.n	800a606 <_free_r+0x26>
 800a670:	b003      	add	sp, #12
 800a672:	bd30      	pop	{r4, r5, pc}
 800a674:	2000273c 	.word	0x2000273c

0800a678 <__sfputc_r>:
 800a678:	6893      	ldr	r3, [r2, #8]
 800a67a:	3b01      	subs	r3, #1
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	b410      	push	{r4}
 800a680:	6093      	str	r3, [r2, #8]
 800a682:	da08      	bge.n	800a696 <__sfputc_r+0x1e>
 800a684:	6994      	ldr	r4, [r2, #24]
 800a686:	42a3      	cmp	r3, r4
 800a688:	db01      	blt.n	800a68e <__sfputc_r+0x16>
 800a68a:	290a      	cmp	r1, #10
 800a68c:	d103      	bne.n	800a696 <__sfputc_r+0x1e>
 800a68e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a692:	f000 badf 	b.w	800ac54 <__swbuf_r>
 800a696:	6813      	ldr	r3, [r2, #0]
 800a698:	1c58      	adds	r0, r3, #1
 800a69a:	6010      	str	r0, [r2, #0]
 800a69c:	7019      	strb	r1, [r3, #0]
 800a69e:	4608      	mov	r0, r1
 800a6a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <__sfputs_r>:
 800a6a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6a8:	4606      	mov	r6, r0
 800a6aa:	460f      	mov	r7, r1
 800a6ac:	4614      	mov	r4, r2
 800a6ae:	18d5      	adds	r5, r2, r3
 800a6b0:	42ac      	cmp	r4, r5
 800a6b2:	d101      	bne.n	800a6b8 <__sfputs_r+0x12>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	e007      	b.n	800a6c8 <__sfputs_r+0x22>
 800a6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6bc:	463a      	mov	r2, r7
 800a6be:	4630      	mov	r0, r6
 800a6c0:	f7ff ffda 	bl	800a678 <__sfputc_r>
 800a6c4:	1c43      	adds	r3, r0, #1
 800a6c6:	d1f3      	bne.n	800a6b0 <__sfputs_r+0xa>
 800a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6cc <_vfiprintf_r>:
 800a6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d0:	460d      	mov	r5, r1
 800a6d2:	b09d      	sub	sp, #116	; 0x74
 800a6d4:	4614      	mov	r4, r2
 800a6d6:	4698      	mov	r8, r3
 800a6d8:	4606      	mov	r6, r0
 800a6da:	b118      	cbz	r0, 800a6e4 <_vfiprintf_r+0x18>
 800a6dc:	6983      	ldr	r3, [r0, #24]
 800a6de:	b90b      	cbnz	r3, 800a6e4 <_vfiprintf_r+0x18>
 800a6e0:	f000 fc9a 	bl	800b018 <__sinit>
 800a6e4:	4b89      	ldr	r3, [pc, #548]	; (800a90c <_vfiprintf_r+0x240>)
 800a6e6:	429d      	cmp	r5, r3
 800a6e8:	d11b      	bne.n	800a722 <_vfiprintf_r+0x56>
 800a6ea:	6875      	ldr	r5, [r6, #4]
 800a6ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ee:	07d9      	lsls	r1, r3, #31
 800a6f0:	d405      	bmi.n	800a6fe <_vfiprintf_r+0x32>
 800a6f2:	89ab      	ldrh	r3, [r5, #12]
 800a6f4:	059a      	lsls	r2, r3, #22
 800a6f6:	d402      	bmi.n	800a6fe <_vfiprintf_r+0x32>
 800a6f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6fa:	f000 fd2b 	bl	800b154 <__retarget_lock_acquire_recursive>
 800a6fe:	89ab      	ldrh	r3, [r5, #12]
 800a700:	071b      	lsls	r3, r3, #28
 800a702:	d501      	bpl.n	800a708 <_vfiprintf_r+0x3c>
 800a704:	692b      	ldr	r3, [r5, #16]
 800a706:	b9eb      	cbnz	r3, 800a744 <_vfiprintf_r+0x78>
 800a708:	4629      	mov	r1, r5
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 faf4 	bl	800acf8 <__swsetup_r>
 800a710:	b1c0      	cbz	r0, 800a744 <_vfiprintf_r+0x78>
 800a712:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a714:	07dc      	lsls	r4, r3, #31
 800a716:	d50e      	bpl.n	800a736 <_vfiprintf_r+0x6a>
 800a718:	f04f 30ff 	mov.w	r0, #4294967295
 800a71c:	b01d      	add	sp, #116	; 0x74
 800a71e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a722:	4b7b      	ldr	r3, [pc, #492]	; (800a910 <_vfiprintf_r+0x244>)
 800a724:	429d      	cmp	r5, r3
 800a726:	d101      	bne.n	800a72c <_vfiprintf_r+0x60>
 800a728:	68b5      	ldr	r5, [r6, #8]
 800a72a:	e7df      	b.n	800a6ec <_vfiprintf_r+0x20>
 800a72c:	4b79      	ldr	r3, [pc, #484]	; (800a914 <_vfiprintf_r+0x248>)
 800a72e:	429d      	cmp	r5, r3
 800a730:	bf08      	it	eq
 800a732:	68f5      	ldreq	r5, [r6, #12]
 800a734:	e7da      	b.n	800a6ec <_vfiprintf_r+0x20>
 800a736:	89ab      	ldrh	r3, [r5, #12]
 800a738:	0598      	lsls	r0, r3, #22
 800a73a:	d4ed      	bmi.n	800a718 <_vfiprintf_r+0x4c>
 800a73c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a73e:	f000 fd0a 	bl	800b156 <__retarget_lock_release_recursive>
 800a742:	e7e9      	b.n	800a718 <_vfiprintf_r+0x4c>
 800a744:	2300      	movs	r3, #0
 800a746:	9309      	str	r3, [sp, #36]	; 0x24
 800a748:	2320      	movs	r3, #32
 800a74a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a74e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a752:	2330      	movs	r3, #48	; 0x30
 800a754:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a918 <_vfiprintf_r+0x24c>
 800a758:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a75c:	f04f 0901 	mov.w	r9, #1
 800a760:	4623      	mov	r3, r4
 800a762:	469a      	mov	sl, r3
 800a764:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a768:	b10a      	cbz	r2, 800a76e <_vfiprintf_r+0xa2>
 800a76a:	2a25      	cmp	r2, #37	; 0x25
 800a76c:	d1f9      	bne.n	800a762 <_vfiprintf_r+0x96>
 800a76e:	ebba 0b04 	subs.w	fp, sl, r4
 800a772:	d00b      	beq.n	800a78c <_vfiprintf_r+0xc0>
 800a774:	465b      	mov	r3, fp
 800a776:	4622      	mov	r2, r4
 800a778:	4629      	mov	r1, r5
 800a77a:	4630      	mov	r0, r6
 800a77c:	f7ff ff93 	bl	800a6a6 <__sfputs_r>
 800a780:	3001      	adds	r0, #1
 800a782:	f000 80aa 	beq.w	800a8da <_vfiprintf_r+0x20e>
 800a786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a788:	445a      	add	r2, fp
 800a78a:	9209      	str	r2, [sp, #36]	; 0x24
 800a78c:	f89a 3000 	ldrb.w	r3, [sl]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 80a2 	beq.w	800a8da <_vfiprintf_r+0x20e>
 800a796:	2300      	movs	r3, #0
 800a798:	f04f 32ff 	mov.w	r2, #4294967295
 800a79c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7a0:	f10a 0a01 	add.w	sl, sl, #1
 800a7a4:	9304      	str	r3, [sp, #16]
 800a7a6:	9307      	str	r3, [sp, #28]
 800a7a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7ac:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ae:	4654      	mov	r4, sl
 800a7b0:	2205      	movs	r2, #5
 800a7b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b6:	4858      	ldr	r0, [pc, #352]	; (800a918 <_vfiprintf_r+0x24c>)
 800a7b8:	f7f5 fd12 	bl	80001e0 <memchr>
 800a7bc:	9a04      	ldr	r2, [sp, #16]
 800a7be:	b9d8      	cbnz	r0, 800a7f8 <_vfiprintf_r+0x12c>
 800a7c0:	06d1      	lsls	r1, r2, #27
 800a7c2:	bf44      	itt	mi
 800a7c4:	2320      	movmi	r3, #32
 800a7c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7ca:	0713      	lsls	r3, r2, #28
 800a7cc:	bf44      	itt	mi
 800a7ce:	232b      	movmi	r3, #43	; 0x2b
 800a7d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7d4:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a7da:	d015      	beq.n	800a808 <_vfiprintf_r+0x13c>
 800a7dc:	9a07      	ldr	r2, [sp, #28]
 800a7de:	4654      	mov	r4, sl
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	f04f 0c0a 	mov.w	ip, #10
 800a7e6:	4621      	mov	r1, r4
 800a7e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7ec:	3b30      	subs	r3, #48	; 0x30
 800a7ee:	2b09      	cmp	r3, #9
 800a7f0:	d94e      	bls.n	800a890 <_vfiprintf_r+0x1c4>
 800a7f2:	b1b0      	cbz	r0, 800a822 <_vfiprintf_r+0x156>
 800a7f4:	9207      	str	r2, [sp, #28]
 800a7f6:	e014      	b.n	800a822 <_vfiprintf_r+0x156>
 800a7f8:	eba0 0308 	sub.w	r3, r0, r8
 800a7fc:	fa09 f303 	lsl.w	r3, r9, r3
 800a800:	4313      	orrs	r3, r2
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	46a2      	mov	sl, r4
 800a806:	e7d2      	b.n	800a7ae <_vfiprintf_r+0xe2>
 800a808:	9b03      	ldr	r3, [sp, #12]
 800a80a:	1d19      	adds	r1, r3, #4
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	9103      	str	r1, [sp, #12]
 800a810:	2b00      	cmp	r3, #0
 800a812:	bfbb      	ittet	lt
 800a814:	425b      	neglt	r3, r3
 800a816:	f042 0202 	orrlt.w	r2, r2, #2
 800a81a:	9307      	strge	r3, [sp, #28]
 800a81c:	9307      	strlt	r3, [sp, #28]
 800a81e:	bfb8      	it	lt
 800a820:	9204      	strlt	r2, [sp, #16]
 800a822:	7823      	ldrb	r3, [r4, #0]
 800a824:	2b2e      	cmp	r3, #46	; 0x2e
 800a826:	d10c      	bne.n	800a842 <_vfiprintf_r+0x176>
 800a828:	7863      	ldrb	r3, [r4, #1]
 800a82a:	2b2a      	cmp	r3, #42	; 0x2a
 800a82c:	d135      	bne.n	800a89a <_vfiprintf_r+0x1ce>
 800a82e:	9b03      	ldr	r3, [sp, #12]
 800a830:	1d1a      	adds	r2, r3, #4
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	9203      	str	r2, [sp, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	bfb8      	it	lt
 800a83a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a83e:	3402      	adds	r4, #2
 800a840:	9305      	str	r3, [sp, #20]
 800a842:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a928 <_vfiprintf_r+0x25c>
 800a846:	7821      	ldrb	r1, [r4, #0]
 800a848:	2203      	movs	r2, #3
 800a84a:	4650      	mov	r0, sl
 800a84c:	f7f5 fcc8 	bl	80001e0 <memchr>
 800a850:	b140      	cbz	r0, 800a864 <_vfiprintf_r+0x198>
 800a852:	2340      	movs	r3, #64	; 0x40
 800a854:	eba0 000a 	sub.w	r0, r0, sl
 800a858:	fa03 f000 	lsl.w	r0, r3, r0
 800a85c:	9b04      	ldr	r3, [sp, #16]
 800a85e:	4303      	orrs	r3, r0
 800a860:	3401      	adds	r4, #1
 800a862:	9304      	str	r3, [sp, #16]
 800a864:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a868:	482c      	ldr	r0, [pc, #176]	; (800a91c <_vfiprintf_r+0x250>)
 800a86a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a86e:	2206      	movs	r2, #6
 800a870:	f7f5 fcb6 	bl	80001e0 <memchr>
 800a874:	2800      	cmp	r0, #0
 800a876:	d03f      	beq.n	800a8f8 <_vfiprintf_r+0x22c>
 800a878:	4b29      	ldr	r3, [pc, #164]	; (800a920 <_vfiprintf_r+0x254>)
 800a87a:	bb1b      	cbnz	r3, 800a8c4 <_vfiprintf_r+0x1f8>
 800a87c:	9b03      	ldr	r3, [sp, #12]
 800a87e:	3307      	adds	r3, #7
 800a880:	f023 0307 	bic.w	r3, r3, #7
 800a884:	3308      	adds	r3, #8
 800a886:	9303      	str	r3, [sp, #12]
 800a888:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a88a:	443b      	add	r3, r7
 800a88c:	9309      	str	r3, [sp, #36]	; 0x24
 800a88e:	e767      	b.n	800a760 <_vfiprintf_r+0x94>
 800a890:	fb0c 3202 	mla	r2, ip, r2, r3
 800a894:	460c      	mov	r4, r1
 800a896:	2001      	movs	r0, #1
 800a898:	e7a5      	b.n	800a7e6 <_vfiprintf_r+0x11a>
 800a89a:	2300      	movs	r3, #0
 800a89c:	3401      	adds	r4, #1
 800a89e:	9305      	str	r3, [sp, #20]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	f04f 0c0a 	mov.w	ip, #10
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8ac:	3a30      	subs	r2, #48	; 0x30
 800a8ae:	2a09      	cmp	r2, #9
 800a8b0:	d903      	bls.n	800a8ba <_vfiprintf_r+0x1ee>
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d0c5      	beq.n	800a842 <_vfiprintf_r+0x176>
 800a8b6:	9105      	str	r1, [sp, #20]
 800a8b8:	e7c3      	b.n	800a842 <_vfiprintf_r+0x176>
 800a8ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8be:	4604      	mov	r4, r0
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e7f0      	b.n	800a8a6 <_vfiprintf_r+0x1da>
 800a8c4:	ab03      	add	r3, sp, #12
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	462a      	mov	r2, r5
 800a8ca:	4b16      	ldr	r3, [pc, #88]	; (800a924 <_vfiprintf_r+0x258>)
 800a8cc:	a904      	add	r1, sp, #16
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	f3af 8000 	nop.w
 800a8d4:	4607      	mov	r7, r0
 800a8d6:	1c78      	adds	r0, r7, #1
 800a8d8:	d1d6      	bne.n	800a888 <_vfiprintf_r+0x1bc>
 800a8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8dc:	07d9      	lsls	r1, r3, #31
 800a8de:	d405      	bmi.n	800a8ec <_vfiprintf_r+0x220>
 800a8e0:	89ab      	ldrh	r3, [r5, #12]
 800a8e2:	059a      	lsls	r2, r3, #22
 800a8e4:	d402      	bmi.n	800a8ec <_vfiprintf_r+0x220>
 800a8e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8e8:	f000 fc35 	bl	800b156 <__retarget_lock_release_recursive>
 800a8ec:	89ab      	ldrh	r3, [r5, #12]
 800a8ee:	065b      	lsls	r3, r3, #25
 800a8f0:	f53f af12 	bmi.w	800a718 <_vfiprintf_r+0x4c>
 800a8f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8f6:	e711      	b.n	800a71c <_vfiprintf_r+0x50>
 800a8f8:	ab03      	add	r3, sp, #12
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4b09      	ldr	r3, [pc, #36]	; (800a924 <_vfiprintf_r+0x258>)
 800a900:	a904      	add	r1, sp, #16
 800a902:	4630      	mov	r0, r6
 800a904:	f000 f880 	bl	800aa08 <_printf_i>
 800a908:	e7e4      	b.n	800a8d4 <_vfiprintf_r+0x208>
 800a90a:	bf00      	nop
 800a90c:	0800b710 	.word	0x0800b710
 800a910:	0800b730 	.word	0x0800b730
 800a914:	0800b6f0 	.word	0x0800b6f0
 800a918:	0800b6ba 	.word	0x0800b6ba
 800a91c:	0800b6c4 	.word	0x0800b6c4
 800a920:	00000000 	.word	0x00000000
 800a924:	0800a6a7 	.word	0x0800a6a7
 800a928:	0800b6c0 	.word	0x0800b6c0

0800a92c <_printf_common>:
 800a92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a930:	4616      	mov	r6, r2
 800a932:	4699      	mov	r9, r3
 800a934:	688a      	ldr	r2, [r1, #8]
 800a936:	690b      	ldr	r3, [r1, #16]
 800a938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a93c:	4293      	cmp	r3, r2
 800a93e:	bfb8      	it	lt
 800a940:	4613      	movlt	r3, r2
 800a942:	6033      	str	r3, [r6, #0]
 800a944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a948:	4607      	mov	r7, r0
 800a94a:	460c      	mov	r4, r1
 800a94c:	b10a      	cbz	r2, 800a952 <_printf_common+0x26>
 800a94e:	3301      	adds	r3, #1
 800a950:	6033      	str	r3, [r6, #0]
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	0699      	lsls	r1, r3, #26
 800a956:	bf42      	ittt	mi
 800a958:	6833      	ldrmi	r3, [r6, #0]
 800a95a:	3302      	addmi	r3, #2
 800a95c:	6033      	strmi	r3, [r6, #0]
 800a95e:	6825      	ldr	r5, [r4, #0]
 800a960:	f015 0506 	ands.w	r5, r5, #6
 800a964:	d106      	bne.n	800a974 <_printf_common+0x48>
 800a966:	f104 0a19 	add.w	sl, r4, #25
 800a96a:	68e3      	ldr	r3, [r4, #12]
 800a96c:	6832      	ldr	r2, [r6, #0]
 800a96e:	1a9b      	subs	r3, r3, r2
 800a970:	42ab      	cmp	r3, r5
 800a972:	dc26      	bgt.n	800a9c2 <_printf_common+0x96>
 800a974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a978:	1e13      	subs	r3, r2, #0
 800a97a:	6822      	ldr	r2, [r4, #0]
 800a97c:	bf18      	it	ne
 800a97e:	2301      	movne	r3, #1
 800a980:	0692      	lsls	r2, r2, #26
 800a982:	d42b      	bmi.n	800a9dc <_printf_common+0xb0>
 800a984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a988:	4649      	mov	r1, r9
 800a98a:	4638      	mov	r0, r7
 800a98c:	47c0      	blx	r8
 800a98e:	3001      	adds	r0, #1
 800a990:	d01e      	beq.n	800a9d0 <_printf_common+0xa4>
 800a992:	6823      	ldr	r3, [r4, #0]
 800a994:	68e5      	ldr	r5, [r4, #12]
 800a996:	6832      	ldr	r2, [r6, #0]
 800a998:	f003 0306 	and.w	r3, r3, #6
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	bf08      	it	eq
 800a9a0:	1aad      	subeq	r5, r5, r2
 800a9a2:	68a3      	ldr	r3, [r4, #8]
 800a9a4:	6922      	ldr	r2, [r4, #16]
 800a9a6:	bf0c      	ite	eq
 800a9a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9ac:	2500      	movne	r5, #0
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	bfc4      	itt	gt
 800a9b2:	1a9b      	subgt	r3, r3, r2
 800a9b4:	18ed      	addgt	r5, r5, r3
 800a9b6:	2600      	movs	r6, #0
 800a9b8:	341a      	adds	r4, #26
 800a9ba:	42b5      	cmp	r5, r6
 800a9bc:	d11a      	bne.n	800a9f4 <_printf_common+0xc8>
 800a9be:	2000      	movs	r0, #0
 800a9c0:	e008      	b.n	800a9d4 <_printf_common+0xa8>
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	4652      	mov	r2, sl
 800a9c6:	4649      	mov	r1, r9
 800a9c8:	4638      	mov	r0, r7
 800a9ca:	47c0      	blx	r8
 800a9cc:	3001      	adds	r0, #1
 800a9ce:	d103      	bne.n	800a9d8 <_printf_common+0xac>
 800a9d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9d8:	3501      	adds	r5, #1
 800a9da:	e7c6      	b.n	800a96a <_printf_common+0x3e>
 800a9dc:	18e1      	adds	r1, r4, r3
 800a9de:	1c5a      	adds	r2, r3, #1
 800a9e0:	2030      	movs	r0, #48	; 0x30
 800a9e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9e6:	4422      	add	r2, r4
 800a9e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	e7c7      	b.n	800a984 <_printf_common+0x58>
 800a9f4:	2301      	movs	r3, #1
 800a9f6:	4622      	mov	r2, r4
 800a9f8:	4649      	mov	r1, r9
 800a9fa:	4638      	mov	r0, r7
 800a9fc:	47c0      	blx	r8
 800a9fe:	3001      	adds	r0, #1
 800aa00:	d0e6      	beq.n	800a9d0 <_printf_common+0xa4>
 800aa02:	3601      	adds	r6, #1
 800aa04:	e7d9      	b.n	800a9ba <_printf_common+0x8e>
	...

0800aa08 <_printf_i>:
 800aa08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa0c:	7e0f      	ldrb	r7, [r1, #24]
 800aa0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa10:	2f78      	cmp	r7, #120	; 0x78
 800aa12:	4691      	mov	r9, r2
 800aa14:	4680      	mov	r8, r0
 800aa16:	460c      	mov	r4, r1
 800aa18:	469a      	mov	sl, r3
 800aa1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa1e:	d807      	bhi.n	800aa30 <_printf_i+0x28>
 800aa20:	2f62      	cmp	r7, #98	; 0x62
 800aa22:	d80a      	bhi.n	800aa3a <_printf_i+0x32>
 800aa24:	2f00      	cmp	r7, #0
 800aa26:	f000 80d8 	beq.w	800abda <_printf_i+0x1d2>
 800aa2a:	2f58      	cmp	r7, #88	; 0x58
 800aa2c:	f000 80a3 	beq.w	800ab76 <_printf_i+0x16e>
 800aa30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa38:	e03a      	b.n	800aab0 <_printf_i+0xa8>
 800aa3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa3e:	2b15      	cmp	r3, #21
 800aa40:	d8f6      	bhi.n	800aa30 <_printf_i+0x28>
 800aa42:	a101      	add	r1, pc, #4	; (adr r1, 800aa48 <_printf_i+0x40>)
 800aa44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa48:	0800aaa1 	.word	0x0800aaa1
 800aa4c:	0800aab5 	.word	0x0800aab5
 800aa50:	0800aa31 	.word	0x0800aa31
 800aa54:	0800aa31 	.word	0x0800aa31
 800aa58:	0800aa31 	.word	0x0800aa31
 800aa5c:	0800aa31 	.word	0x0800aa31
 800aa60:	0800aab5 	.word	0x0800aab5
 800aa64:	0800aa31 	.word	0x0800aa31
 800aa68:	0800aa31 	.word	0x0800aa31
 800aa6c:	0800aa31 	.word	0x0800aa31
 800aa70:	0800aa31 	.word	0x0800aa31
 800aa74:	0800abc1 	.word	0x0800abc1
 800aa78:	0800aae5 	.word	0x0800aae5
 800aa7c:	0800aba3 	.word	0x0800aba3
 800aa80:	0800aa31 	.word	0x0800aa31
 800aa84:	0800aa31 	.word	0x0800aa31
 800aa88:	0800abe3 	.word	0x0800abe3
 800aa8c:	0800aa31 	.word	0x0800aa31
 800aa90:	0800aae5 	.word	0x0800aae5
 800aa94:	0800aa31 	.word	0x0800aa31
 800aa98:	0800aa31 	.word	0x0800aa31
 800aa9c:	0800abab 	.word	0x0800abab
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	1d1a      	adds	r2, r3, #4
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	602a      	str	r2, [r5, #0]
 800aaa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aaac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aab0:	2301      	movs	r3, #1
 800aab2:	e0a3      	b.n	800abfc <_printf_i+0x1f4>
 800aab4:	6820      	ldr	r0, [r4, #0]
 800aab6:	6829      	ldr	r1, [r5, #0]
 800aab8:	0606      	lsls	r6, r0, #24
 800aaba:	f101 0304 	add.w	r3, r1, #4
 800aabe:	d50a      	bpl.n	800aad6 <_printf_i+0xce>
 800aac0:	680e      	ldr	r6, [r1, #0]
 800aac2:	602b      	str	r3, [r5, #0]
 800aac4:	2e00      	cmp	r6, #0
 800aac6:	da03      	bge.n	800aad0 <_printf_i+0xc8>
 800aac8:	232d      	movs	r3, #45	; 0x2d
 800aaca:	4276      	negs	r6, r6
 800aacc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aad0:	485e      	ldr	r0, [pc, #376]	; (800ac4c <_printf_i+0x244>)
 800aad2:	230a      	movs	r3, #10
 800aad4:	e019      	b.n	800ab0a <_printf_i+0x102>
 800aad6:	680e      	ldr	r6, [r1, #0]
 800aad8:	602b      	str	r3, [r5, #0]
 800aada:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aade:	bf18      	it	ne
 800aae0:	b236      	sxthne	r6, r6
 800aae2:	e7ef      	b.n	800aac4 <_printf_i+0xbc>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	6820      	ldr	r0, [r4, #0]
 800aae8:	1d19      	adds	r1, r3, #4
 800aaea:	6029      	str	r1, [r5, #0]
 800aaec:	0601      	lsls	r1, r0, #24
 800aaee:	d501      	bpl.n	800aaf4 <_printf_i+0xec>
 800aaf0:	681e      	ldr	r6, [r3, #0]
 800aaf2:	e002      	b.n	800aafa <_printf_i+0xf2>
 800aaf4:	0646      	lsls	r6, r0, #25
 800aaf6:	d5fb      	bpl.n	800aaf0 <_printf_i+0xe8>
 800aaf8:	881e      	ldrh	r6, [r3, #0]
 800aafa:	4854      	ldr	r0, [pc, #336]	; (800ac4c <_printf_i+0x244>)
 800aafc:	2f6f      	cmp	r7, #111	; 0x6f
 800aafe:	bf0c      	ite	eq
 800ab00:	2308      	moveq	r3, #8
 800ab02:	230a      	movne	r3, #10
 800ab04:	2100      	movs	r1, #0
 800ab06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab0a:	6865      	ldr	r5, [r4, #4]
 800ab0c:	60a5      	str	r5, [r4, #8]
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	bfa2      	ittt	ge
 800ab12:	6821      	ldrge	r1, [r4, #0]
 800ab14:	f021 0104 	bicge.w	r1, r1, #4
 800ab18:	6021      	strge	r1, [r4, #0]
 800ab1a:	b90e      	cbnz	r6, 800ab20 <_printf_i+0x118>
 800ab1c:	2d00      	cmp	r5, #0
 800ab1e:	d04d      	beq.n	800abbc <_printf_i+0x1b4>
 800ab20:	4615      	mov	r5, r2
 800ab22:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab26:	fb03 6711 	mls	r7, r3, r1, r6
 800ab2a:	5dc7      	ldrb	r7, [r0, r7]
 800ab2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab30:	4637      	mov	r7, r6
 800ab32:	42bb      	cmp	r3, r7
 800ab34:	460e      	mov	r6, r1
 800ab36:	d9f4      	bls.n	800ab22 <_printf_i+0x11a>
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d10b      	bne.n	800ab54 <_printf_i+0x14c>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	07de      	lsls	r6, r3, #31
 800ab40:	d508      	bpl.n	800ab54 <_printf_i+0x14c>
 800ab42:	6923      	ldr	r3, [r4, #16]
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	4299      	cmp	r1, r3
 800ab48:	bfde      	ittt	le
 800ab4a:	2330      	movle	r3, #48	; 0x30
 800ab4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab54:	1b52      	subs	r2, r2, r5
 800ab56:	6122      	str	r2, [r4, #16]
 800ab58:	f8cd a000 	str.w	sl, [sp]
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	aa03      	add	r2, sp, #12
 800ab60:	4621      	mov	r1, r4
 800ab62:	4640      	mov	r0, r8
 800ab64:	f7ff fee2 	bl	800a92c <_printf_common>
 800ab68:	3001      	adds	r0, #1
 800ab6a:	d14c      	bne.n	800ac06 <_printf_i+0x1fe>
 800ab6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab70:	b004      	add	sp, #16
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab76:	4835      	ldr	r0, [pc, #212]	; (800ac4c <_printf_i+0x244>)
 800ab78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab7c:	6829      	ldr	r1, [r5, #0]
 800ab7e:	6823      	ldr	r3, [r4, #0]
 800ab80:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab84:	6029      	str	r1, [r5, #0]
 800ab86:	061d      	lsls	r5, r3, #24
 800ab88:	d514      	bpl.n	800abb4 <_printf_i+0x1ac>
 800ab8a:	07df      	lsls	r7, r3, #31
 800ab8c:	bf44      	itt	mi
 800ab8e:	f043 0320 	orrmi.w	r3, r3, #32
 800ab92:	6023      	strmi	r3, [r4, #0]
 800ab94:	b91e      	cbnz	r6, 800ab9e <_printf_i+0x196>
 800ab96:	6823      	ldr	r3, [r4, #0]
 800ab98:	f023 0320 	bic.w	r3, r3, #32
 800ab9c:	6023      	str	r3, [r4, #0]
 800ab9e:	2310      	movs	r3, #16
 800aba0:	e7b0      	b.n	800ab04 <_printf_i+0xfc>
 800aba2:	6823      	ldr	r3, [r4, #0]
 800aba4:	f043 0320 	orr.w	r3, r3, #32
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	2378      	movs	r3, #120	; 0x78
 800abac:	4828      	ldr	r0, [pc, #160]	; (800ac50 <_printf_i+0x248>)
 800abae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abb2:	e7e3      	b.n	800ab7c <_printf_i+0x174>
 800abb4:	0659      	lsls	r1, r3, #25
 800abb6:	bf48      	it	mi
 800abb8:	b2b6      	uxthmi	r6, r6
 800abba:	e7e6      	b.n	800ab8a <_printf_i+0x182>
 800abbc:	4615      	mov	r5, r2
 800abbe:	e7bb      	b.n	800ab38 <_printf_i+0x130>
 800abc0:	682b      	ldr	r3, [r5, #0]
 800abc2:	6826      	ldr	r6, [r4, #0]
 800abc4:	6961      	ldr	r1, [r4, #20]
 800abc6:	1d18      	adds	r0, r3, #4
 800abc8:	6028      	str	r0, [r5, #0]
 800abca:	0635      	lsls	r5, r6, #24
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	d501      	bpl.n	800abd4 <_printf_i+0x1cc>
 800abd0:	6019      	str	r1, [r3, #0]
 800abd2:	e002      	b.n	800abda <_printf_i+0x1d2>
 800abd4:	0670      	lsls	r0, r6, #25
 800abd6:	d5fb      	bpl.n	800abd0 <_printf_i+0x1c8>
 800abd8:	8019      	strh	r1, [r3, #0]
 800abda:	2300      	movs	r3, #0
 800abdc:	6123      	str	r3, [r4, #16]
 800abde:	4615      	mov	r5, r2
 800abe0:	e7ba      	b.n	800ab58 <_printf_i+0x150>
 800abe2:	682b      	ldr	r3, [r5, #0]
 800abe4:	1d1a      	adds	r2, r3, #4
 800abe6:	602a      	str	r2, [r5, #0]
 800abe8:	681d      	ldr	r5, [r3, #0]
 800abea:	6862      	ldr	r2, [r4, #4]
 800abec:	2100      	movs	r1, #0
 800abee:	4628      	mov	r0, r5
 800abf0:	f7f5 faf6 	bl	80001e0 <memchr>
 800abf4:	b108      	cbz	r0, 800abfa <_printf_i+0x1f2>
 800abf6:	1b40      	subs	r0, r0, r5
 800abf8:	6060      	str	r0, [r4, #4]
 800abfa:	6863      	ldr	r3, [r4, #4]
 800abfc:	6123      	str	r3, [r4, #16]
 800abfe:	2300      	movs	r3, #0
 800ac00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac04:	e7a8      	b.n	800ab58 <_printf_i+0x150>
 800ac06:	6923      	ldr	r3, [r4, #16]
 800ac08:	462a      	mov	r2, r5
 800ac0a:	4649      	mov	r1, r9
 800ac0c:	4640      	mov	r0, r8
 800ac0e:	47d0      	blx	sl
 800ac10:	3001      	adds	r0, #1
 800ac12:	d0ab      	beq.n	800ab6c <_printf_i+0x164>
 800ac14:	6823      	ldr	r3, [r4, #0]
 800ac16:	079b      	lsls	r3, r3, #30
 800ac18:	d413      	bmi.n	800ac42 <_printf_i+0x23a>
 800ac1a:	68e0      	ldr	r0, [r4, #12]
 800ac1c:	9b03      	ldr	r3, [sp, #12]
 800ac1e:	4298      	cmp	r0, r3
 800ac20:	bfb8      	it	lt
 800ac22:	4618      	movlt	r0, r3
 800ac24:	e7a4      	b.n	800ab70 <_printf_i+0x168>
 800ac26:	2301      	movs	r3, #1
 800ac28:	4632      	mov	r2, r6
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	4640      	mov	r0, r8
 800ac2e:	47d0      	blx	sl
 800ac30:	3001      	adds	r0, #1
 800ac32:	d09b      	beq.n	800ab6c <_printf_i+0x164>
 800ac34:	3501      	adds	r5, #1
 800ac36:	68e3      	ldr	r3, [r4, #12]
 800ac38:	9903      	ldr	r1, [sp, #12]
 800ac3a:	1a5b      	subs	r3, r3, r1
 800ac3c:	42ab      	cmp	r3, r5
 800ac3e:	dcf2      	bgt.n	800ac26 <_printf_i+0x21e>
 800ac40:	e7eb      	b.n	800ac1a <_printf_i+0x212>
 800ac42:	2500      	movs	r5, #0
 800ac44:	f104 0619 	add.w	r6, r4, #25
 800ac48:	e7f5      	b.n	800ac36 <_printf_i+0x22e>
 800ac4a:	bf00      	nop
 800ac4c:	0800b6cb 	.word	0x0800b6cb
 800ac50:	0800b6dc 	.word	0x0800b6dc

0800ac54 <__swbuf_r>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	460e      	mov	r6, r1
 800ac58:	4614      	mov	r4, r2
 800ac5a:	4605      	mov	r5, r0
 800ac5c:	b118      	cbz	r0, 800ac66 <__swbuf_r+0x12>
 800ac5e:	6983      	ldr	r3, [r0, #24]
 800ac60:	b90b      	cbnz	r3, 800ac66 <__swbuf_r+0x12>
 800ac62:	f000 f9d9 	bl	800b018 <__sinit>
 800ac66:	4b21      	ldr	r3, [pc, #132]	; (800acec <__swbuf_r+0x98>)
 800ac68:	429c      	cmp	r4, r3
 800ac6a:	d12b      	bne.n	800acc4 <__swbuf_r+0x70>
 800ac6c:	686c      	ldr	r4, [r5, #4]
 800ac6e:	69a3      	ldr	r3, [r4, #24]
 800ac70:	60a3      	str	r3, [r4, #8]
 800ac72:	89a3      	ldrh	r3, [r4, #12]
 800ac74:	071a      	lsls	r2, r3, #28
 800ac76:	d52f      	bpl.n	800acd8 <__swbuf_r+0x84>
 800ac78:	6923      	ldr	r3, [r4, #16]
 800ac7a:	b36b      	cbz	r3, 800acd8 <__swbuf_r+0x84>
 800ac7c:	6923      	ldr	r3, [r4, #16]
 800ac7e:	6820      	ldr	r0, [r4, #0]
 800ac80:	1ac0      	subs	r0, r0, r3
 800ac82:	6963      	ldr	r3, [r4, #20]
 800ac84:	b2f6      	uxtb	r6, r6
 800ac86:	4283      	cmp	r3, r0
 800ac88:	4637      	mov	r7, r6
 800ac8a:	dc04      	bgt.n	800ac96 <__swbuf_r+0x42>
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 f92e 	bl	800aef0 <_fflush_r>
 800ac94:	bb30      	cbnz	r0, 800ace4 <__swbuf_r+0x90>
 800ac96:	68a3      	ldr	r3, [r4, #8]
 800ac98:	3b01      	subs	r3, #1
 800ac9a:	60a3      	str	r3, [r4, #8]
 800ac9c:	6823      	ldr	r3, [r4, #0]
 800ac9e:	1c5a      	adds	r2, r3, #1
 800aca0:	6022      	str	r2, [r4, #0]
 800aca2:	701e      	strb	r6, [r3, #0]
 800aca4:	6963      	ldr	r3, [r4, #20]
 800aca6:	3001      	adds	r0, #1
 800aca8:	4283      	cmp	r3, r0
 800acaa:	d004      	beq.n	800acb6 <__swbuf_r+0x62>
 800acac:	89a3      	ldrh	r3, [r4, #12]
 800acae:	07db      	lsls	r3, r3, #31
 800acb0:	d506      	bpl.n	800acc0 <__swbuf_r+0x6c>
 800acb2:	2e0a      	cmp	r6, #10
 800acb4:	d104      	bne.n	800acc0 <__swbuf_r+0x6c>
 800acb6:	4621      	mov	r1, r4
 800acb8:	4628      	mov	r0, r5
 800acba:	f000 f919 	bl	800aef0 <_fflush_r>
 800acbe:	b988      	cbnz	r0, 800ace4 <__swbuf_r+0x90>
 800acc0:	4638      	mov	r0, r7
 800acc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acc4:	4b0a      	ldr	r3, [pc, #40]	; (800acf0 <__swbuf_r+0x9c>)
 800acc6:	429c      	cmp	r4, r3
 800acc8:	d101      	bne.n	800acce <__swbuf_r+0x7a>
 800acca:	68ac      	ldr	r4, [r5, #8]
 800accc:	e7cf      	b.n	800ac6e <__swbuf_r+0x1a>
 800acce:	4b09      	ldr	r3, [pc, #36]	; (800acf4 <__swbuf_r+0xa0>)
 800acd0:	429c      	cmp	r4, r3
 800acd2:	bf08      	it	eq
 800acd4:	68ec      	ldreq	r4, [r5, #12]
 800acd6:	e7ca      	b.n	800ac6e <__swbuf_r+0x1a>
 800acd8:	4621      	mov	r1, r4
 800acda:	4628      	mov	r0, r5
 800acdc:	f000 f80c 	bl	800acf8 <__swsetup_r>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d0cb      	beq.n	800ac7c <__swbuf_r+0x28>
 800ace4:	f04f 37ff 	mov.w	r7, #4294967295
 800ace8:	e7ea      	b.n	800acc0 <__swbuf_r+0x6c>
 800acea:	bf00      	nop
 800acec:	0800b710 	.word	0x0800b710
 800acf0:	0800b730 	.word	0x0800b730
 800acf4:	0800b6f0 	.word	0x0800b6f0

0800acf8 <__swsetup_r>:
 800acf8:	4b32      	ldr	r3, [pc, #200]	; (800adc4 <__swsetup_r+0xcc>)
 800acfa:	b570      	push	{r4, r5, r6, lr}
 800acfc:	681d      	ldr	r5, [r3, #0]
 800acfe:	4606      	mov	r6, r0
 800ad00:	460c      	mov	r4, r1
 800ad02:	b125      	cbz	r5, 800ad0e <__swsetup_r+0x16>
 800ad04:	69ab      	ldr	r3, [r5, #24]
 800ad06:	b913      	cbnz	r3, 800ad0e <__swsetup_r+0x16>
 800ad08:	4628      	mov	r0, r5
 800ad0a:	f000 f985 	bl	800b018 <__sinit>
 800ad0e:	4b2e      	ldr	r3, [pc, #184]	; (800adc8 <__swsetup_r+0xd0>)
 800ad10:	429c      	cmp	r4, r3
 800ad12:	d10f      	bne.n	800ad34 <__swsetup_r+0x3c>
 800ad14:	686c      	ldr	r4, [r5, #4]
 800ad16:	89a3      	ldrh	r3, [r4, #12]
 800ad18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad1c:	0719      	lsls	r1, r3, #28
 800ad1e:	d42c      	bmi.n	800ad7a <__swsetup_r+0x82>
 800ad20:	06dd      	lsls	r5, r3, #27
 800ad22:	d411      	bmi.n	800ad48 <__swsetup_r+0x50>
 800ad24:	2309      	movs	r3, #9
 800ad26:	6033      	str	r3, [r6, #0]
 800ad28:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ad2c:	81a3      	strh	r3, [r4, #12]
 800ad2e:	f04f 30ff 	mov.w	r0, #4294967295
 800ad32:	e03e      	b.n	800adb2 <__swsetup_r+0xba>
 800ad34:	4b25      	ldr	r3, [pc, #148]	; (800adcc <__swsetup_r+0xd4>)
 800ad36:	429c      	cmp	r4, r3
 800ad38:	d101      	bne.n	800ad3e <__swsetup_r+0x46>
 800ad3a:	68ac      	ldr	r4, [r5, #8]
 800ad3c:	e7eb      	b.n	800ad16 <__swsetup_r+0x1e>
 800ad3e:	4b24      	ldr	r3, [pc, #144]	; (800add0 <__swsetup_r+0xd8>)
 800ad40:	429c      	cmp	r4, r3
 800ad42:	bf08      	it	eq
 800ad44:	68ec      	ldreq	r4, [r5, #12]
 800ad46:	e7e6      	b.n	800ad16 <__swsetup_r+0x1e>
 800ad48:	0758      	lsls	r0, r3, #29
 800ad4a:	d512      	bpl.n	800ad72 <__swsetup_r+0x7a>
 800ad4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad4e:	b141      	cbz	r1, 800ad62 <__swsetup_r+0x6a>
 800ad50:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad54:	4299      	cmp	r1, r3
 800ad56:	d002      	beq.n	800ad5e <__swsetup_r+0x66>
 800ad58:	4630      	mov	r0, r6
 800ad5a:	f7ff fc41 	bl	800a5e0 <_free_r>
 800ad5e:	2300      	movs	r3, #0
 800ad60:	6363      	str	r3, [r4, #52]	; 0x34
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ad68:	81a3      	strh	r3, [r4, #12]
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	6063      	str	r3, [r4, #4]
 800ad6e:	6923      	ldr	r3, [r4, #16]
 800ad70:	6023      	str	r3, [r4, #0]
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	f043 0308 	orr.w	r3, r3, #8
 800ad78:	81a3      	strh	r3, [r4, #12]
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	b94b      	cbnz	r3, 800ad92 <__swsetup_r+0x9a>
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ad84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad88:	d003      	beq.n	800ad92 <__swsetup_r+0x9a>
 800ad8a:	4621      	mov	r1, r4
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	f000 fa09 	bl	800b1a4 <__smakebuf_r>
 800ad92:	89a0      	ldrh	r0, [r4, #12]
 800ad94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ad98:	f010 0301 	ands.w	r3, r0, #1
 800ad9c:	d00a      	beq.n	800adb4 <__swsetup_r+0xbc>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	60a3      	str	r3, [r4, #8]
 800ada2:	6963      	ldr	r3, [r4, #20]
 800ada4:	425b      	negs	r3, r3
 800ada6:	61a3      	str	r3, [r4, #24]
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	b943      	cbnz	r3, 800adbe <__swsetup_r+0xc6>
 800adac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800adb0:	d1ba      	bne.n	800ad28 <__swsetup_r+0x30>
 800adb2:	bd70      	pop	{r4, r5, r6, pc}
 800adb4:	0781      	lsls	r1, r0, #30
 800adb6:	bf58      	it	pl
 800adb8:	6963      	ldrpl	r3, [r4, #20]
 800adba:	60a3      	str	r3, [r4, #8]
 800adbc:	e7f4      	b.n	800ada8 <__swsetup_r+0xb0>
 800adbe:	2000      	movs	r0, #0
 800adc0:	e7f7      	b.n	800adb2 <__swsetup_r+0xba>
 800adc2:	bf00      	nop
 800adc4:	20000114 	.word	0x20000114
 800adc8:	0800b710 	.word	0x0800b710
 800adcc:	0800b730 	.word	0x0800b730
 800add0:	0800b6f0 	.word	0x0800b6f0

0800add4 <abort>:
 800add4:	b508      	push	{r3, lr}
 800add6:	2006      	movs	r0, #6
 800add8:	f000 fa4c 	bl	800b274 <raise>
 800addc:	2001      	movs	r0, #1
 800adde:	f7f6 fcff 	bl	80017e0 <_exit>
	...

0800ade4 <__sflush_r>:
 800ade4:	898a      	ldrh	r2, [r1, #12]
 800ade6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adea:	4605      	mov	r5, r0
 800adec:	0710      	lsls	r0, r2, #28
 800adee:	460c      	mov	r4, r1
 800adf0:	d458      	bmi.n	800aea4 <__sflush_r+0xc0>
 800adf2:	684b      	ldr	r3, [r1, #4]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	dc05      	bgt.n	800ae04 <__sflush_r+0x20>
 800adf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	dc02      	bgt.n	800ae04 <__sflush_r+0x20>
 800adfe:	2000      	movs	r0, #0
 800ae00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae06:	2e00      	cmp	r6, #0
 800ae08:	d0f9      	beq.n	800adfe <__sflush_r+0x1a>
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae10:	682f      	ldr	r7, [r5, #0]
 800ae12:	602b      	str	r3, [r5, #0]
 800ae14:	d032      	beq.n	800ae7c <__sflush_r+0x98>
 800ae16:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae18:	89a3      	ldrh	r3, [r4, #12]
 800ae1a:	075a      	lsls	r2, r3, #29
 800ae1c:	d505      	bpl.n	800ae2a <__sflush_r+0x46>
 800ae1e:	6863      	ldr	r3, [r4, #4]
 800ae20:	1ac0      	subs	r0, r0, r3
 800ae22:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae24:	b10b      	cbz	r3, 800ae2a <__sflush_r+0x46>
 800ae26:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae28:	1ac0      	subs	r0, r0, r3
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	4602      	mov	r2, r0
 800ae2e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae30:	6a21      	ldr	r1, [r4, #32]
 800ae32:	4628      	mov	r0, r5
 800ae34:	47b0      	blx	r6
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	89a3      	ldrh	r3, [r4, #12]
 800ae3a:	d106      	bne.n	800ae4a <__sflush_r+0x66>
 800ae3c:	6829      	ldr	r1, [r5, #0]
 800ae3e:	291d      	cmp	r1, #29
 800ae40:	d82c      	bhi.n	800ae9c <__sflush_r+0xb8>
 800ae42:	4a2a      	ldr	r2, [pc, #168]	; (800aeec <__sflush_r+0x108>)
 800ae44:	40ca      	lsrs	r2, r1
 800ae46:	07d6      	lsls	r6, r2, #31
 800ae48:	d528      	bpl.n	800ae9c <__sflush_r+0xb8>
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	6062      	str	r2, [r4, #4]
 800ae4e:	04d9      	lsls	r1, r3, #19
 800ae50:	6922      	ldr	r2, [r4, #16]
 800ae52:	6022      	str	r2, [r4, #0]
 800ae54:	d504      	bpl.n	800ae60 <__sflush_r+0x7c>
 800ae56:	1c42      	adds	r2, r0, #1
 800ae58:	d101      	bne.n	800ae5e <__sflush_r+0x7a>
 800ae5a:	682b      	ldr	r3, [r5, #0]
 800ae5c:	b903      	cbnz	r3, 800ae60 <__sflush_r+0x7c>
 800ae5e:	6560      	str	r0, [r4, #84]	; 0x54
 800ae60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae62:	602f      	str	r7, [r5, #0]
 800ae64:	2900      	cmp	r1, #0
 800ae66:	d0ca      	beq.n	800adfe <__sflush_r+0x1a>
 800ae68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae6c:	4299      	cmp	r1, r3
 800ae6e:	d002      	beq.n	800ae76 <__sflush_r+0x92>
 800ae70:	4628      	mov	r0, r5
 800ae72:	f7ff fbb5 	bl	800a5e0 <_free_r>
 800ae76:	2000      	movs	r0, #0
 800ae78:	6360      	str	r0, [r4, #52]	; 0x34
 800ae7a:	e7c1      	b.n	800ae00 <__sflush_r+0x1c>
 800ae7c:	6a21      	ldr	r1, [r4, #32]
 800ae7e:	2301      	movs	r3, #1
 800ae80:	4628      	mov	r0, r5
 800ae82:	47b0      	blx	r6
 800ae84:	1c41      	adds	r1, r0, #1
 800ae86:	d1c7      	bne.n	800ae18 <__sflush_r+0x34>
 800ae88:	682b      	ldr	r3, [r5, #0]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d0c4      	beq.n	800ae18 <__sflush_r+0x34>
 800ae8e:	2b1d      	cmp	r3, #29
 800ae90:	d001      	beq.n	800ae96 <__sflush_r+0xb2>
 800ae92:	2b16      	cmp	r3, #22
 800ae94:	d101      	bne.n	800ae9a <__sflush_r+0xb6>
 800ae96:	602f      	str	r7, [r5, #0]
 800ae98:	e7b1      	b.n	800adfe <__sflush_r+0x1a>
 800ae9a:	89a3      	ldrh	r3, [r4, #12]
 800ae9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aea0:	81a3      	strh	r3, [r4, #12]
 800aea2:	e7ad      	b.n	800ae00 <__sflush_r+0x1c>
 800aea4:	690f      	ldr	r7, [r1, #16]
 800aea6:	2f00      	cmp	r7, #0
 800aea8:	d0a9      	beq.n	800adfe <__sflush_r+0x1a>
 800aeaa:	0793      	lsls	r3, r2, #30
 800aeac:	680e      	ldr	r6, [r1, #0]
 800aeae:	bf08      	it	eq
 800aeb0:	694b      	ldreq	r3, [r1, #20]
 800aeb2:	600f      	str	r7, [r1, #0]
 800aeb4:	bf18      	it	ne
 800aeb6:	2300      	movne	r3, #0
 800aeb8:	eba6 0807 	sub.w	r8, r6, r7
 800aebc:	608b      	str	r3, [r1, #8]
 800aebe:	f1b8 0f00 	cmp.w	r8, #0
 800aec2:	dd9c      	ble.n	800adfe <__sflush_r+0x1a>
 800aec4:	6a21      	ldr	r1, [r4, #32]
 800aec6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aec8:	4643      	mov	r3, r8
 800aeca:	463a      	mov	r2, r7
 800aecc:	4628      	mov	r0, r5
 800aece:	47b0      	blx	r6
 800aed0:	2800      	cmp	r0, #0
 800aed2:	dc06      	bgt.n	800aee2 <__sflush_r+0xfe>
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aeda:	81a3      	strh	r3, [r4, #12]
 800aedc:	f04f 30ff 	mov.w	r0, #4294967295
 800aee0:	e78e      	b.n	800ae00 <__sflush_r+0x1c>
 800aee2:	4407      	add	r7, r0
 800aee4:	eba8 0800 	sub.w	r8, r8, r0
 800aee8:	e7e9      	b.n	800aebe <__sflush_r+0xda>
 800aeea:	bf00      	nop
 800aeec:	20400001 	.word	0x20400001

0800aef0 <_fflush_r>:
 800aef0:	b538      	push	{r3, r4, r5, lr}
 800aef2:	690b      	ldr	r3, [r1, #16]
 800aef4:	4605      	mov	r5, r0
 800aef6:	460c      	mov	r4, r1
 800aef8:	b913      	cbnz	r3, 800af00 <_fflush_r+0x10>
 800aefa:	2500      	movs	r5, #0
 800aefc:	4628      	mov	r0, r5
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	b118      	cbz	r0, 800af0a <_fflush_r+0x1a>
 800af02:	6983      	ldr	r3, [r0, #24]
 800af04:	b90b      	cbnz	r3, 800af0a <_fflush_r+0x1a>
 800af06:	f000 f887 	bl	800b018 <__sinit>
 800af0a:	4b14      	ldr	r3, [pc, #80]	; (800af5c <_fflush_r+0x6c>)
 800af0c:	429c      	cmp	r4, r3
 800af0e:	d11b      	bne.n	800af48 <_fflush_r+0x58>
 800af10:	686c      	ldr	r4, [r5, #4]
 800af12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d0ef      	beq.n	800aefa <_fflush_r+0xa>
 800af1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af1c:	07d0      	lsls	r0, r2, #31
 800af1e:	d404      	bmi.n	800af2a <_fflush_r+0x3a>
 800af20:	0599      	lsls	r1, r3, #22
 800af22:	d402      	bmi.n	800af2a <_fflush_r+0x3a>
 800af24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af26:	f000 f915 	bl	800b154 <__retarget_lock_acquire_recursive>
 800af2a:	4628      	mov	r0, r5
 800af2c:	4621      	mov	r1, r4
 800af2e:	f7ff ff59 	bl	800ade4 <__sflush_r>
 800af32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af34:	07da      	lsls	r2, r3, #31
 800af36:	4605      	mov	r5, r0
 800af38:	d4e0      	bmi.n	800aefc <_fflush_r+0xc>
 800af3a:	89a3      	ldrh	r3, [r4, #12]
 800af3c:	059b      	lsls	r3, r3, #22
 800af3e:	d4dd      	bmi.n	800aefc <_fflush_r+0xc>
 800af40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af42:	f000 f908 	bl	800b156 <__retarget_lock_release_recursive>
 800af46:	e7d9      	b.n	800aefc <_fflush_r+0xc>
 800af48:	4b05      	ldr	r3, [pc, #20]	; (800af60 <_fflush_r+0x70>)
 800af4a:	429c      	cmp	r4, r3
 800af4c:	d101      	bne.n	800af52 <_fflush_r+0x62>
 800af4e:	68ac      	ldr	r4, [r5, #8]
 800af50:	e7df      	b.n	800af12 <_fflush_r+0x22>
 800af52:	4b04      	ldr	r3, [pc, #16]	; (800af64 <_fflush_r+0x74>)
 800af54:	429c      	cmp	r4, r3
 800af56:	bf08      	it	eq
 800af58:	68ec      	ldreq	r4, [r5, #12]
 800af5a:	e7da      	b.n	800af12 <_fflush_r+0x22>
 800af5c:	0800b710 	.word	0x0800b710
 800af60:	0800b730 	.word	0x0800b730
 800af64:	0800b6f0 	.word	0x0800b6f0

0800af68 <std>:
 800af68:	2300      	movs	r3, #0
 800af6a:	b510      	push	{r4, lr}
 800af6c:	4604      	mov	r4, r0
 800af6e:	e9c0 3300 	strd	r3, r3, [r0]
 800af72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800af76:	6083      	str	r3, [r0, #8]
 800af78:	8181      	strh	r1, [r0, #12]
 800af7a:	6643      	str	r3, [r0, #100]	; 0x64
 800af7c:	81c2      	strh	r2, [r0, #14]
 800af7e:	6183      	str	r3, [r0, #24]
 800af80:	4619      	mov	r1, r3
 800af82:	2208      	movs	r2, #8
 800af84:	305c      	adds	r0, #92	; 0x5c
 800af86:	f7fd fea9 	bl	8008cdc <memset>
 800af8a:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <std+0x38>)
 800af8c:	6263      	str	r3, [r4, #36]	; 0x24
 800af8e:	4b05      	ldr	r3, [pc, #20]	; (800afa4 <std+0x3c>)
 800af90:	62a3      	str	r3, [r4, #40]	; 0x28
 800af92:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <std+0x40>)
 800af94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800af96:	4b05      	ldr	r3, [pc, #20]	; (800afac <std+0x44>)
 800af98:	6224      	str	r4, [r4, #32]
 800af9a:	6323      	str	r3, [r4, #48]	; 0x30
 800af9c:	bd10      	pop	{r4, pc}
 800af9e:	bf00      	nop
 800afa0:	0800b2ad 	.word	0x0800b2ad
 800afa4:	0800b2cf 	.word	0x0800b2cf
 800afa8:	0800b307 	.word	0x0800b307
 800afac:	0800b32b 	.word	0x0800b32b

0800afb0 <_cleanup_r>:
 800afb0:	4901      	ldr	r1, [pc, #4]	; (800afb8 <_cleanup_r+0x8>)
 800afb2:	f000 b8af 	b.w	800b114 <_fwalk_reent>
 800afb6:	bf00      	nop
 800afb8:	0800aef1 	.word	0x0800aef1

0800afbc <__sfmoreglue>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	2268      	movs	r2, #104	; 0x68
 800afc0:	1e4d      	subs	r5, r1, #1
 800afc2:	4355      	muls	r5, r2
 800afc4:	460e      	mov	r6, r1
 800afc6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800afca:	f7fe fbbd 	bl	8009748 <_malloc_r>
 800afce:	4604      	mov	r4, r0
 800afd0:	b140      	cbz	r0, 800afe4 <__sfmoreglue+0x28>
 800afd2:	2100      	movs	r1, #0
 800afd4:	e9c0 1600 	strd	r1, r6, [r0]
 800afd8:	300c      	adds	r0, #12
 800afda:	60a0      	str	r0, [r4, #8]
 800afdc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800afe0:	f7fd fe7c 	bl	8008cdc <memset>
 800afe4:	4620      	mov	r0, r4
 800afe6:	bd70      	pop	{r4, r5, r6, pc}

0800afe8 <__sfp_lock_acquire>:
 800afe8:	4801      	ldr	r0, [pc, #4]	; (800aff0 <__sfp_lock_acquire+0x8>)
 800afea:	f000 b8b3 	b.w	800b154 <__retarget_lock_acquire_recursive>
 800afee:	bf00      	nop
 800aff0:	20002749 	.word	0x20002749

0800aff4 <__sfp_lock_release>:
 800aff4:	4801      	ldr	r0, [pc, #4]	; (800affc <__sfp_lock_release+0x8>)
 800aff6:	f000 b8ae 	b.w	800b156 <__retarget_lock_release_recursive>
 800affa:	bf00      	nop
 800affc:	20002749 	.word	0x20002749

0800b000 <__sinit_lock_acquire>:
 800b000:	4801      	ldr	r0, [pc, #4]	; (800b008 <__sinit_lock_acquire+0x8>)
 800b002:	f000 b8a7 	b.w	800b154 <__retarget_lock_acquire_recursive>
 800b006:	bf00      	nop
 800b008:	2000274a 	.word	0x2000274a

0800b00c <__sinit_lock_release>:
 800b00c:	4801      	ldr	r0, [pc, #4]	; (800b014 <__sinit_lock_release+0x8>)
 800b00e:	f000 b8a2 	b.w	800b156 <__retarget_lock_release_recursive>
 800b012:	bf00      	nop
 800b014:	2000274a 	.word	0x2000274a

0800b018 <__sinit>:
 800b018:	b510      	push	{r4, lr}
 800b01a:	4604      	mov	r4, r0
 800b01c:	f7ff fff0 	bl	800b000 <__sinit_lock_acquire>
 800b020:	69a3      	ldr	r3, [r4, #24]
 800b022:	b11b      	cbz	r3, 800b02c <__sinit+0x14>
 800b024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b028:	f7ff bff0 	b.w	800b00c <__sinit_lock_release>
 800b02c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b030:	6523      	str	r3, [r4, #80]	; 0x50
 800b032:	4b13      	ldr	r3, [pc, #76]	; (800b080 <__sinit+0x68>)
 800b034:	4a13      	ldr	r2, [pc, #76]	; (800b084 <__sinit+0x6c>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	62a2      	str	r2, [r4, #40]	; 0x28
 800b03a:	42a3      	cmp	r3, r4
 800b03c:	bf04      	itt	eq
 800b03e:	2301      	moveq	r3, #1
 800b040:	61a3      	streq	r3, [r4, #24]
 800b042:	4620      	mov	r0, r4
 800b044:	f000 f820 	bl	800b088 <__sfp>
 800b048:	6060      	str	r0, [r4, #4]
 800b04a:	4620      	mov	r0, r4
 800b04c:	f000 f81c 	bl	800b088 <__sfp>
 800b050:	60a0      	str	r0, [r4, #8]
 800b052:	4620      	mov	r0, r4
 800b054:	f000 f818 	bl	800b088 <__sfp>
 800b058:	2200      	movs	r2, #0
 800b05a:	60e0      	str	r0, [r4, #12]
 800b05c:	2104      	movs	r1, #4
 800b05e:	6860      	ldr	r0, [r4, #4]
 800b060:	f7ff ff82 	bl	800af68 <std>
 800b064:	68a0      	ldr	r0, [r4, #8]
 800b066:	2201      	movs	r2, #1
 800b068:	2109      	movs	r1, #9
 800b06a:	f7ff ff7d 	bl	800af68 <std>
 800b06e:	68e0      	ldr	r0, [r4, #12]
 800b070:	2202      	movs	r2, #2
 800b072:	2112      	movs	r1, #18
 800b074:	f7ff ff78 	bl	800af68 <std>
 800b078:	2301      	movs	r3, #1
 800b07a:	61a3      	str	r3, [r4, #24]
 800b07c:	e7d2      	b.n	800b024 <__sinit+0xc>
 800b07e:	bf00      	nop
 800b080:	0800b490 	.word	0x0800b490
 800b084:	0800afb1 	.word	0x0800afb1

0800b088 <__sfp>:
 800b088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08a:	4607      	mov	r7, r0
 800b08c:	f7ff ffac 	bl	800afe8 <__sfp_lock_acquire>
 800b090:	4b1e      	ldr	r3, [pc, #120]	; (800b10c <__sfp+0x84>)
 800b092:	681e      	ldr	r6, [r3, #0]
 800b094:	69b3      	ldr	r3, [r6, #24]
 800b096:	b913      	cbnz	r3, 800b09e <__sfp+0x16>
 800b098:	4630      	mov	r0, r6
 800b09a:	f7ff ffbd 	bl	800b018 <__sinit>
 800b09e:	3648      	adds	r6, #72	; 0x48
 800b0a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	d503      	bpl.n	800b0b0 <__sfp+0x28>
 800b0a8:	6833      	ldr	r3, [r6, #0]
 800b0aa:	b30b      	cbz	r3, 800b0f0 <__sfp+0x68>
 800b0ac:	6836      	ldr	r6, [r6, #0]
 800b0ae:	e7f7      	b.n	800b0a0 <__sfp+0x18>
 800b0b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b0b4:	b9d5      	cbnz	r5, 800b0ec <__sfp+0x64>
 800b0b6:	4b16      	ldr	r3, [pc, #88]	; (800b110 <__sfp+0x88>)
 800b0b8:	60e3      	str	r3, [r4, #12]
 800b0ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0be:	6665      	str	r5, [r4, #100]	; 0x64
 800b0c0:	f000 f847 	bl	800b152 <__retarget_lock_init_recursive>
 800b0c4:	f7ff ff96 	bl	800aff4 <__sfp_lock_release>
 800b0c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b0cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b0d0:	6025      	str	r5, [r4, #0]
 800b0d2:	61a5      	str	r5, [r4, #24]
 800b0d4:	2208      	movs	r2, #8
 800b0d6:	4629      	mov	r1, r5
 800b0d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b0dc:	f7fd fdfe 	bl	8008cdc <memset>
 800b0e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b0e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b0e8:	4620      	mov	r0, r4
 800b0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b0ec:	3468      	adds	r4, #104	; 0x68
 800b0ee:	e7d9      	b.n	800b0a4 <__sfp+0x1c>
 800b0f0:	2104      	movs	r1, #4
 800b0f2:	4638      	mov	r0, r7
 800b0f4:	f7ff ff62 	bl	800afbc <__sfmoreglue>
 800b0f8:	4604      	mov	r4, r0
 800b0fa:	6030      	str	r0, [r6, #0]
 800b0fc:	2800      	cmp	r0, #0
 800b0fe:	d1d5      	bne.n	800b0ac <__sfp+0x24>
 800b100:	f7ff ff78 	bl	800aff4 <__sfp_lock_release>
 800b104:	230c      	movs	r3, #12
 800b106:	603b      	str	r3, [r7, #0]
 800b108:	e7ee      	b.n	800b0e8 <__sfp+0x60>
 800b10a:	bf00      	nop
 800b10c:	0800b490 	.word	0x0800b490
 800b110:	ffff0001 	.word	0xffff0001

0800b114 <_fwalk_reent>:
 800b114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b118:	4606      	mov	r6, r0
 800b11a:	4688      	mov	r8, r1
 800b11c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b120:	2700      	movs	r7, #0
 800b122:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b126:	f1b9 0901 	subs.w	r9, r9, #1
 800b12a:	d505      	bpl.n	800b138 <_fwalk_reent+0x24>
 800b12c:	6824      	ldr	r4, [r4, #0]
 800b12e:	2c00      	cmp	r4, #0
 800b130:	d1f7      	bne.n	800b122 <_fwalk_reent+0xe>
 800b132:	4638      	mov	r0, r7
 800b134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b138:	89ab      	ldrh	r3, [r5, #12]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d907      	bls.n	800b14e <_fwalk_reent+0x3a>
 800b13e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b142:	3301      	adds	r3, #1
 800b144:	d003      	beq.n	800b14e <_fwalk_reent+0x3a>
 800b146:	4629      	mov	r1, r5
 800b148:	4630      	mov	r0, r6
 800b14a:	47c0      	blx	r8
 800b14c:	4307      	orrs	r7, r0
 800b14e:	3568      	adds	r5, #104	; 0x68
 800b150:	e7e9      	b.n	800b126 <_fwalk_reent+0x12>

0800b152 <__retarget_lock_init_recursive>:
 800b152:	4770      	bx	lr

0800b154 <__retarget_lock_acquire_recursive>:
 800b154:	4770      	bx	lr

0800b156 <__retarget_lock_release_recursive>:
 800b156:	4770      	bx	lr

0800b158 <__swhatbuf_r>:
 800b158:	b570      	push	{r4, r5, r6, lr}
 800b15a:	460e      	mov	r6, r1
 800b15c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b160:	2900      	cmp	r1, #0
 800b162:	b096      	sub	sp, #88	; 0x58
 800b164:	4614      	mov	r4, r2
 800b166:	461d      	mov	r5, r3
 800b168:	da08      	bge.n	800b17c <__swhatbuf_r+0x24>
 800b16a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b16e:	2200      	movs	r2, #0
 800b170:	602a      	str	r2, [r5, #0]
 800b172:	061a      	lsls	r2, r3, #24
 800b174:	d410      	bmi.n	800b198 <__swhatbuf_r+0x40>
 800b176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b17a:	e00e      	b.n	800b19a <__swhatbuf_r+0x42>
 800b17c:	466a      	mov	r2, sp
 800b17e:	f000 f8fb 	bl	800b378 <_fstat_r>
 800b182:	2800      	cmp	r0, #0
 800b184:	dbf1      	blt.n	800b16a <__swhatbuf_r+0x12>
 800b186:	9a01      	ldr	r2, [sp, #4]
 800b188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b18c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b190:	425a      	negs	r2, r3
 800b192:	415a      	adcs	r2, r3
 800b194:	602a      	str	r2, [r5, #0]
 800b196:	e7ee      	b.n	800b176 <__swhatbuf_r+0x1e>
 800b198:	2340      	movs	r3, #64	; 0x40
 800b19a:	2000      	movs	r0, #0
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	b016      	add	sp, #88	; 0x58
 800b1a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b1a4 <__smakebuf_r>:
 800b1a4:	898b      	ldrh	r3, [r1, #12]
 800b1a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b1a8:	079d      	lsls	r5, r3, #30
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	460c      	mov	r4, r1
 800b1ae:	d507      	bpl.n	800b1c0 <__smakebuf_r+0x1c>
 800b1b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b1b4:	6023      	str	r3, [r4, #0]
 800b1b6:	6123      	str	r3, [r4, #16]
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	6163      	str	r3, [r4, #20]
 800b1bc:	b002      	add	sp, #8
 800b1be:	bd70      	pop	{r4, r5, r6, pc}
 800b1c0:	ab01      	add	r3, sp, #4
 800b1c2:	466a      	mov	r2, sp
 800b1c4:	f7ff ffc8 	bl	800b158 <__swhatbuf_r>
 800b1c8:	9900      	ldr	r1, [sp, #0]
 800b1ca:	4605      	mov	r5, r0
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f7fe fabb 	bl	8009748 <_malloc_r>
 800b1d2:	b948      	cbnz	r0, 800b1e8 <__smakebuf_r+0x44>
 800b1d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1d8:	059a      	lsls	r2, r3, #22
 800b1da:	d4ef      	bmi.n	800b1bc <__smakebuf_r+0x18>
 800b1dc:	f023 0303 	bic.w	r3, r3, #3
 800b1e0:	f043 0302 	orr.w	r3, r3, #2
 800b1e4:	81a3      	strh	r3, [r4, #12]
 800b1e6:	e7e3      	b.n	800b1b0 <__smakebuf_r+0xc>
 800b1e8:	4b0d      	ldr	r3, [pc, #52]	; (800b220 <__smakebuf_r+0x7c>)
 800b1ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800b1ec:	89a3      	ldrh	r3, [r4, #12]
 800b1ee:	6020      	str	r0, [r4, #0]
 800b1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1f4:	81a3      	strh	r3, [r4, #12]
 800b1f6:	9b00      	ldr	r3, [sp, #0]
 800b1f8:	6163      	str	r3, [r4, #20]
 800b1fa:	9b01      	ldr	r3, [sp, #4]
 800b1fc:	6120      	str	r0, [r4, #16]
 800b1fe:	b15b      	cbz	r3, 800b218 <__smakebuf_r+0x74>
 800b200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b204:	4630      	mov	r0, r6
 800b206:	f000 f8c9 	bl	800b39c <_isatty_r>
 800b20a:	b128      	cbz	r0, 800b218 <__smakebuf_r+0x74>
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	f023 0303 	bic.w	r3, r3, #3
 800b212:	f043 0301 	orr.w	r3, r3, #1
 800b216:	81a3      	strh	r3, [r4, #12]
 800b218:	89a0      	ldrh	r0, [r4, #12]
 800b21a:	4305      	orrs	r5, r0
 800b21c:	81a5      	strh	r5, [r4, #12]
 800b21e:	e7cd      	b.n	800b1bc <__smakebuf_r+0x18>
 800b220:	0800afb1 	.word	0x0800afb1

0800b224 <_raise_r>:
 800b224:	291f      	cmp	r1, #31
 800b226:	b538      	push	{r3, r4, r5, lr}
 800b228:	4604      	mov	r4, r0
 800b22a:	460d      	mov	r5, r1
 800b22c:	d904      	bls.n	800b238 <_raise_r+0x14>
 800b22e:	2316      	movs	r3, #22
 800b230:	6003      	str	r3, [r0, #0]
 800b232:	f04f 30ff 	mov.w	r0, #4294967295
 800b236:	bd38      	pop	{r3, r4, r5, pc}
 800b238:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b23a:	b112      	cbz	r2, 800b242 <_raise_r+0x1e>
 800b23c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b240:	b94b      	cbnz	r3, 800b256 <_raise_r+0x32>
 800b242:	4620      	mov	r0, r4
 800b244:	f000 f830 	bl	800b2a8 <_getpid_r>
 800b248:	462a      	mov	r2, r5
 800b24a:	4601      	mov	r1, r0
 800b24c:	4620      	mov	r0, r4
 800b24e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b252:	f000 b817 	b.w	800b284 <_kill_r>
 800b256:	2b01      	cmp	r3, #1
 800b258:	d00a      	beq.n	800b270 <_raise_r+0x4c>
 800b25a:	1c59      	adds	r1, r3, #1
 800b25c:	d103      	bne.n	800b266 <_raise_r+0x42>
 800b25e:	2316      	movs	r3, #22
 800b260:	6003      	str	r3, [r0, #0]
 800b262:	2001      	movs	r0, #1
 800b264:	e7e7      	b.n	800b236 <_raise_r+0x12>
 800b266:	2400      	movs	r4, #0
 800b268:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b26c:	4628      	mov	r0, r5
 800b26e:	4798      	blx	r3
 800b270:	2000      	movs	r0, #0
 800b272:	e7e0      	b.n	800b236 <_raise_r+0x12>

0800b274 <raise>:
 800b274:	4b02      	ldr	r3, [pc, #8]	; (800b280 <raise+0xc>)
 800b276:	4601      	mov	r1, r0
 800b278:	6818      	ldr	r0, [r3, #0]
 800b27a:	f7ff bfd3 	b.w	800b224 <_raise_r>
 800b27e:	bf00      	nop
 800b280:	20000114 	.word	0x20000114

0800b284 <_kill_r>:
 800b284:	b538      	push	{r3, r4, r5, lr}
 800b286:	4d07      	ldr	r5, [pc, #28]	; (800b2a4 <_kill_r+0x20>)
 800b288:	2300      	movs	r3, #0
 800b28a:	4604      	mov	r4, r0
 800b28c:	4608      	mov	r0, r1
 800b28e:	4611      	mov	r1, r2
 800b290:	602b      	str	r3, [r5, #0]
 800b292:	f7f6 fa95 	bl	80017c0 <_kill>
 800b296:	1c43      	adds	r3, r0, #1
 800b298:	d102      	bne.n	800b2a0 <_kill_r+0x1c>
 800b29a:	682b      	ldr	r3, [r5, #0]
 800b29c:	b103      	cbz	r3, 800b2a0 <_kill_r+0x1c>
 800b29e:	6023      	str	r3, [r4, #0]
 800b2a0:	bd38      	pop	{r3, r4, r5, pc}
 800b2a2:	bf00      	nop
 800b2a4:	20002744 	.word	0x20002744

0800b2a8 <_getpid_r>:
 800b2a8:	f7f6 ba82 	b.w	80017b0 <_getpid>

0800b2ac <__sread>:
 800b2ac:	b510      	push	{r4, lr}
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2b4:	f000 f894 	bl	800b3e0 <_read_r>
 800b2b8:	2800      	cmp	r0, #0
 800b2ba:	bfab      	itete	ge
 800b2bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b2be:	89a3      	ldrhlt	r3, [r4, #12]
 800b2c0:	181b      	addge	r3, r3, r0
 800b2c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b2c6:	bfac      	ite	ge
 800b2c8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b2ca:	81a3      	strhlt	r3, [r4, #12]
 800b2cc:	bd10      	pop	{r4, pc}

0800b2ce <__swrite>:
 800b2ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d2:	461f      	mov	r7, r3
 800b2d4:	898b      	ldrh	r3, [r1, #12]
 800b2d6:	05db      	lsls	r3, r3, #23
 800b2d8:	4605      	mov	r5, r0
 800b2da:	460c      	mov	r4, r1
 800b2dc:	4616      	mov	r6, r2
 800b2de:	d505      	bpl.n	800b2ec <__swrite+0x1e>
 800b2e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b2e4:	2302      	movs	r3, #2
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	f000 f868 	bl	800b3bc <_lseek_r>
 800b2ec:	89a3      	ldrh	r3, [r4, #12]
 800b2ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b2f6:	81a3      	strh	r3, [r4, #12]
 800b2f8:	4632      	mov	r2, r6
 800b2fa:	463b      	mov	r3, r7
 800b2fc:	4628      	mov	r0, r5
 800b2fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b302:	f000 b817 	b.w	800b334 <_write_r>

0800b306 <__sseek>:
 800b306:	b510      	push	{r4, lr}
 800b308:	460c      	mov	r4, r1
 800b30a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b30e:	f000 f855 	bl	800b3bc <_lseek_r>
 800b312:	1c43      	adds	r3, r0, #1
 800b314:	89a3      	ldrh	r3, [r4, #12]
 800b316:	bf15      	itete	ne
 800b318:	6560      	strne	r0, [r4, #84]	; 0x54
 800b31a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b31e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b322:	81a3      	strheq	r3, [r4, #12]
 800b324:	bf18      	it	ne
 800b326:	81a3      	strhne	r3, [r4, #12]
 800b328:	bd10      	pop	{r4, pc}

0800b32a <__sclose>:
 800b32a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b32e:	f000 b813 	b.w	800b358 <_close_r>
	...

0800b334 <_write_r>:
 800b334:	b538      	push	{r3, r4, r5, lr}
 800b336:	4d07      	ldr	r5, [pc, #28]	; (800b354 <_write_r+0x20>)
 800b338:	4604      	mov	r4, r0
 800b33a:	4608      	mov	r0, r1
 800b33c:	4611      	mov	r1, r2
 800b33e:	2200      	movs	r2, #0
 800b340:	602a      	str	r2, [r5, #0]
 800b342:	461a      	mov	r2, r3
 800b344:	f7f6 fa73 	bl	800182e <_write>
 800b348:	1c43      	adds	r3, r0, #1
 800b34a:	d102      	bne.n	800b352 <_write_r+0x1e>
 800b34c:	682b      	ldr	r3, [r5, #0]
 800b34e:	b103      	cbz	r3, 800b352 <_write_r+0x1e>
 800b350:	6023      	str	r3, [r4, #0]
 800b352:	bd38      	pop	{r3, r4, r5, pc}
 800b354:	20002744 	.word	0x20002744

0800b358 <_close_r>:
 800b358:	b538      	push	{r3, r4, r5, lr}
 800b35a:	4d06      	ldr	r5, [pc, #24]	; (800b374 <_close_r+0x1c>)
 800b35c:	2300      	movs	r3, #0
 800b35e:	4604      	mov	r4, r0
 800b360:	4608      	mov	r0, r1
 800b362:	602b      	str	r3, [r5, #0]
 800b364:	f7f6 fa7f 	bl	8001866 <_close>
 800b368:	1c43      	adds	r3, r0, #1
 800b36a:	d102      	bne.n	800b372 <_close_r+0x1a>
 800b36c:	682b      	ldr	r3, [r5, #0]
 800b36e:	b103      	cbz	r3, 800b372 <_close_r+0x1a>
 800b370:	6023      	str	r3, [r4, #0]
 800b372:	bd38      	pop	{r3, r4, r5, pc}
 800b374:	20002744 	.word	0x20002744

0800b378 <_fstat_r>:
 800b378:	b538      	push	{r3, r4, r5, lr}
 800b37a:	4d07      	ldr	r5, [pc, #28]	; (800b398 <_fstat_r+0x20>)
 800b37c:	2300      	movs	r3, #0
 800b37e:	4604      	mov	r4, r0
 800b380:	4608      	mov	r0, r1
 800b382:	4611      	mov	r1, r2
 800b384:	602b      	str	r3, [r5, #0]
 800b386:	f7f6 fa7a 	bl	800187e <_fstat>
 800b38a:	1c43      	adds	r3, r0, #1
 800b38c:	d102      	bne.n	800b394 <_fstat_r+0x1c>
 800b38e:	682b      	ldr	r3, [r5, #0]
 800b390:	b103      	cbz	r3, 800b394 <_fstat_r+0x1c>
 800b392:	6023      	str	r3, [r4, #0]
 800b394:	bd38      	pop	{r3, r4, r5, pc}
 800b396:	bf00      	nop
 800b398:	20002744 	.word	0x20002744

0800b39c <_isatty_r>:
 800b39c:	b538      	push	{r3, r4, r5, lr}
 800b39e:	4d06      	ldr	r5, [pc, #24]	; (800b3b8 <_isatty_r+0x1c>)
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	4604      	mov	r4, r0
 800b3a4:	4608      	mov	r0, r1
 800b3a6:	602b      	str	r3, [r5, #0]
 800b3a8:	f7f6 fa79 	bl	800189e <_isatty>
 800b3ac:	1c43      	adds	r3, r0, #1
 800b3ae:	d102      	bne.n	800b3b6 <_isatty_r+0x1a>
 800b3b0:	682b      	ldr	r3, [r5, #0]
 800b3b2:	b103      	cbz	r3, 800b3b6 <_isatty_r+0x1a>
 800b3b4:	6023      	str	r3, [r4, #0]
 800b3b6:	bd38      	pop	{r3, r4, r5, pc}
 800b3b8:	20002744 	.word	0x20002744

0800b3bc <_lseek_r>:
 800b3bc:	b538      	push	{r3, r4, r5, lr}
 800b3be:	4d07      	ldr	r5, [pc, #28]	; (800b3dc <_lseek_r+0x20>)
 800b3c0:	4604      	mov	r4, r0
 800b3c2:	4608      	mov	r0, r1
 800b3c4:	4611      	mov	r1, r2
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	602a      	str	r2, [r5, #0]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	f7f6 fa72 	bl	80018b4 <_lseek>
 800b3d0:	1c43      	adds	r3, r0, #1
 800b3d2:	d102      	bne.n	800b3da <_lseek_r+0x1e>
 800b3d4:	682b      	ldr	r3, [r5, #0]
 800b3d6:	b103      	cbz	r3, 800b3da <_lseek_r+0x1e>
 800b3d8:	6023      	str	r3, [r4, #0]
 800b3da:	bd38      	pop	{r3, r4, r5, pc}
 800b3dc:	20002744 	.word	0x20002744

0800b3e0 <_read_r>:
 800b3e0:	b538      	push	{r3, r4, r5, lr}
 800b3e2:	4d07      	ldr	r5, [pc, #28]	; (800b400 <_read_r+0x20>)
 800b3e4:	4604      	mov	r4, r0
 800b3e6:	4608      	mov	r0, r1
 800b3e8:	4611      	mov	r1, r2
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	602a      	str	r2, [r5, #0]
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f7f6 fa00 	bl	80017f4 <_read>
 800b3f4:	1c43      	adds	r3, r0, #1
 800b3f6:	d102      	bne.n	800b3fe <_read_r+0x1e>
 800b3f8:	682b      	ldr	r3, [r5, #0]
 800b3fa:	b103      	cbz	r3, 800b3fe <_read_r+0x1e>
 800b3fc:	6023      	str	r3, [r4, #0]
 800b3fe:	bd38      	pop	{r3, r4, r5, pc}
 800b400:	20002744 	.word	0x20002744

0800b404 <_init>:
 800b404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b406:	bf00      	nop
 800b408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40a:	bc08      	pop	{r3}
 800b40c:	469e      	mov	lr, r3
 800b40e:	4770      	bx	lr

0800b410 <_fini>:
 800b410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b412:	bf00      	nop
 800b414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b416:	bc08      	pop	{r3}
 800b418:	469e      	mov	lr, r3
 800b41a:	4770      	bx	lr
