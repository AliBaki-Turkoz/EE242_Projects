
hwsolution4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080082c8  080082c8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080082c8  080082c8  000182c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080082d0  080082d0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080082d0  080082d0  000182d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080082d4  080082d4  000182d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080082d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001cdc  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001dd8  20001dd8  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011b10  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003014  00000000  00000000  00031c3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  00034c50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d28  00000000  00000000  00035ae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000249f5  00000000  00000000  00036808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012d8b  00000000  00000000  0005b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2896  00000000  00000000  0006df88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014081e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c20  00000000  00000000  00140870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008258 	.word	0x08008258

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	08008258 	.word	0x08008258

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <Read_ADC>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//char *data = "Hello from Ali Baki TÜRKÖZ\n";
void Read_ADC()
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8000d0c:	481c      	ldr	r0, [pc, #112]	; (8000d80 <Read_ADC+0x78>)
 8000d0e:	f000 fbdd 	bl	80014cc <HAL_ADC_Start>

	if(HAL_ADC_PollForConversion(&hadc1, 100000) == HAL_OK)
 8000d12:	491c      	ldr	r1, [pc, #112]	; (8000d84 <Read_ADC+0x7c>)
 8000d14:	481a      	ldr	r0, [pc, #104]	; (8000d80 <Read_ADC+0x78>)
 8000d16:	f000 fcde 	bl	80016d6 <HAL_ADC_PollForConversion>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d122      	bne.n	8000d66 <Read_ADC+0x5e>
	{
		adc_value = HAL_ADC_GetValue(&hadc1);
 8000d20:	4817      	ldr	r0, [pc, #92]	; (8000d80 <Read_ADC+0x78>)
 8000d22:	f000 fd63 	bl	80017ec <HAL_ADC_GetValue>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <Read_ADC+0x80>)
 8000d2c:	801a      	strh	r2, [r3, #0]
		Vadc = 3.3 * adc_value / 4095;
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <Read_ADC+0x80>)
 8000d30:	881b      	ldrh	r3, [r3, #0]
 8000d32:	4618      	mov	r0, r3
 8000d34:	f7ff fb9a 	bl	800046c <__aeabi_i2d>
 8000d38:	a30d      	add	r3, pc, #52	; (adr r3, 8000d70 <Read_ADC+0x68>)
 8000d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3e:	f7ff fbff 	bl	8000540 <__aeabi_dmul>
 8000d42:	4602      	mov	r2, r0
 8000d44:	460b      	mov	r3, r1
 8000d46:	4610      	mov	r0, r2
 8000d48:	4619      	mov	r1, r3
 8000d4a:	a30b      	add	r3, pc, #44	; (adr r3, 8000d78 <Read_ADC+0x70>)
 8000d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d50:	f7ff fd20 	bl	8000794 <__aeabi_ddiv>
 8000d54:	4602      	mov	r2, r0
 8000d56:	460b      	mov	r3, r1
 8000d58:	4610      	mov	r0, r2
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	f7ff fe02 	bl	8000964 <__aeabi_d2f>
 8000d60:	4603      	mov	r3, r0
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <Read_ADC+0x84>)
 8000d64:	6013      	str	r3, [r2, #0]
	}
	HAL_ADC_Stop(&hadc1);
 8000d66:	4806      	ldr	r0, [pc, #24]	; (8000d80 <Read_ADC+0x78>)
 8000d68:	f000 fc82 	bl	8001670 <HAL_ADC_Stop>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	66666666 	.word	0x66666666
 8000d74:	400a6666 	.word	0x400a6666
 8000d78:	00000000 	.word	0x00000000
 8000d7c:	40affe00 	.word	0x40affe00
 8000d80:	20000120 	.word	0x20000120
 8000d84:	000186a0 	.word	0x000186a0
 8000d88:	20000118 	.word	0x20000118
 8000d8c:	2000011c 	.word	0x2000011c

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d94:	f000 fac0 	bl	8001318 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d98:	f000 f80e 	bl	8000db8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9c:	f000 f912 	bl	8000fc4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000da0:	f006 fd42 	bl	8007828 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000da4:	f000 f8d8 	bl	8000f58 <MX_SPI1_Init>
  MX_CRC_Init();
 8000da8:	f000 f8c2 	bl	8000f30 <MX_CRC_Init>
  MX_ADC1_Init();
 8000dac:	f000 f86e 	bl	8000e8c <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Read_ADC();
 8000db0:	f7ff ffaa 	bl	8000d08 <Read_ADC>
 8000db4:	e7fc      	b.n	8000db0 <main+0x20>
	...

08000db8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b094      	sub	sp, #80	; 0x50
 8000dbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dbe:	f107 0320 	add.w	r3, r7, #32
 8000dc2:	2230      	movs	r2, #48	; 0x30
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f007 fa3e 	bl	8008248 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dcc:	f107 030c 	add.w	r3, r7, #12
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ddc:	2300      	movs	r3, #0
 8000dde:	60bb      	str	r3, [r7, #8]
 8000de0:	4b28      	ldr	r3, [pc, #160]	; (8000e84 <SystemClock_Config+0xcc>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de4:	4a27      	ldr	r2, [pc, #156]	; (8000e84 <SystemClock_Config+0xcc>)
 8000de6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dea:	6413      	str	r3, [r2, #64]	; 0x40
 8000dec:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <SystemClock_Config+0xcc>)
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	607b      	str	r3, [r7, #4]
 8000dfc:	4b22      	ldr	r3, [pc, #136]	; (8000e88 <SystemClock_Config+0xd0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <SystemClock_Config+0xd0>)
 8000e02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <SystemClock_Config+0xd0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e14:	2301      	movs	r3, #1
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e28:	2304      	movs	r3, #4
 8000e2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e2c:	23a8      	movs	r3, #168	; 0xa8
 8000e2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e30:	2302      	movs	r3, #2
 8000e32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000e34:	2307      	movs	r3, #7
 8000e36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e38:	f107 0320 	add.w	r3, r7, #32
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f002 fc61 	bl	8003704 <HAL_RCC_OscConfig>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e48:	f000 f91a 	bl	8001080 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4c:	230f      	movs	r3, #15
 8000e4e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e50:	2302      	movs	r3, #2
 8000e52:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e58:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e64:	f107 030c 	add.w	r3, r7, #12
 8000e68:	2105      	movs	r1, #5
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f002 fec2 	bl	8003bf4 <HAL_RCC_ClockConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e76:	f000 f903 	bl	8001080 <Error_Handler>
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3750      	adds	r7, #80	; 0x50
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40007000 	.word	0x40007000

08000e8c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b084      	sub	sp, #16
 8000e90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e9e:	4b21      	ldr	r3, [pc, #132]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ea0:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <MX_ADC1_Init+0x9c>)
 8000ea2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea4:	4b1f      	ldr	r3, [pc, #124]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ea6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000eaa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eac:	4b1d      	ldr	r3, [pc, #116]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000eb2:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb8:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ebe:	4b19      	ldr	r3, [pc, #100]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ec6:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ece:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <MX_ADC1_Init+0xa0>)
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed2:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ede:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ee6:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eec:	480d      	ldr	r0, [pc, #52]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000eee:	f000 faa9 	bl	8001444 <HAL_ADC_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ef8:	f000 f8c2 	bl	8001080 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000efc:	2300      	movs	r3, #0
 8000efe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f00:	2301      	movs	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f04:	2300      	movs	r3, #0
 8000f06:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f08:	463b      	mov	r3, r7
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	4805      	ldr	r0, [pc, #20]	; (8000f24 <MX_ADC1_Init+0x98>)
 8000f0e:	f000 fc7b 	bl	8001808 <HAL_ADC_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f18:	f000 f8b2 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f1c:	bf00      	nop
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000120 	.word	0x20000120
 8000f28:	40012000 	.word	0x40012000
 8000f2c:	0f000001 	.word	0x0f000001

08000f30 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_CRC_Init+0x20>)
 8000f36:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <MX_CRC_Init+0x24>)
 8000f38:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f3a:	4805      	ldr	r0, [pc, #20]	; (8000f50 <MX_CRC_Init+0x20>)
 8000f3c:	f000 ff93 	bl	8001e66 <HAL_CRC_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f46:	f000 f89b 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000168 	.word	0x20000168
 8000f54:	40023000 	.word	0x40023000

08000f58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f5e:	4a18      	ldr	r2, [pc, #96]	; (8000fc0 <MX_SPI1_Init+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f64:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f9c:	4b07      	ldr	r3, [pc, #28]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000fa2:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000fa4:	220a      	movs	r2, #10
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000fa8:	4804      	ldr	r0, [pc, #16]	; (8000fbc <MX_SPI1_Init+0x64>)
 8000faa:	f003 f81b 	bl	8003fe4 <HAL_SPI_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000fb4:	f000 f864 	bl	8001080 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000170 	.word	0x20000170
 8000fc0:	40013000 	.word	0x40013000

08000fc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
 8000fde:	4b26      	ldr	r3, [pc, #152]	; (8001078 <MX_GPIO_Init+0xb4>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a25      	ldr	r2, [pc, #148]	; (8001078 <MX_GPIO_Init+0xb4>)
 8000fe4:	f043 0310 	orr.w	r3, r3, #16
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b23      	ldr	r3, [pc, #140]	; (8001078 <MX_GPIO_Init+0xb4>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f003 0310 	and.w	r3, r3, #16
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
 8000ffa:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <MX_GPIO_Init+0xb4>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001004:	6313      	str	r3, [r2, #48]	; 0x30
 8001006:	4b1c      	ldr	r3, [pc, #112]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a17      	ldr	r2, [pc, #92]	; (8001078 <MX_GPIO_Init+0xb4>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001038:	f043 0302 	orr.w	r3, r3, #2
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_GPIO_Init+0xb4>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0302 	and.w	r3, r3, #2
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_0, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2109      	movs	r1, #9
 800104e:	480b      	ldr	r0, [pc, #44]	; (800107c <MX_GPIO_Init+0xb8>)
 8001050:	f001 f8c2 	bl	80021d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_0;
 8001054:	2309      	movs	r3, #9
 8001056:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001058:	2301      	movs	r3, #1
 800105a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_GPIO_Init+0xb8>)
 800106c:	f000 ff18 	bl	8001ea0 <HAL_GPIO_Init>

}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40023800 	.word	0x40023800
 800107c:	40021000 	.word	0x40021000

08001080 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001084:	b672      	cpsid	i
}
 8001086:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001088:	e7fe      	b.n	8001088 <Error_Handler+0x8>
	...

0800108c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_MspInit+0x4c>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <HAL_MspInit+0x4c>)
 800109c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_MspInit+0x4c>)
 80010b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010bc:	6413      	str	r3, [r2, #64]	; 0x40
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_MspInit+0x4c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	40023800 	.word	0x40023800

080010dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	; 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a17      	ldr	r2, [pc, #92]	; (8001158 <HAL_ADC_MspInit+0x7c>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d127      	bne.n	800114e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b16      	ldr	r3, [pc, #88]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a15      	ldr	r2, [pc, #84]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b13      	ldr	r3, [pc, #76]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_ADC_MspInit+0x80>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_ADC_MspInit+0x80>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800113a:	2303      	movs	r3, #3
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4805      	ldr	r0, [pc, #20]	; (8001160 <HAL_ADC_MspInit+0x84>)
 800114a:	f000 fea9 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800114e:	bf00      	nop
 8001150:	3728      	adds	r7, #40	; 0x28
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40012000 	.word	0x40012000
 800115c:	40023800 	.word	0x40023800
 8001160:	40020000 	.word	0x40020000

08001164 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a0b      	ldr	r2, [pc, #44]	; (80011a0 <HAL_CRC_MspInit+0x3c>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d10d      	bne.n	8001192 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <HAL_CRC_MspInit+0x40>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a09      	ldr	r2, [pc, #36]	; (80011a4 <HAL_CRC_MspInit+0x40>)
 8001180:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <HAL_CRC_MspInit+0x40>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001192:	bf00      	nop
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr
 800119e:	bf00      	nop
 80011a0:	40023000 	.word	0x40023000
 80011a4:	40023800 	.word	0x40023800

080011a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_SPI_MspInit+0x84>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d12b      	bne.n	8001222 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
 80011ce:	4b18      	ldr	r3, [pc, #96]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011d2:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80011d8:	6453      	str	r3, [r2, #68]	; 0x44
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011e2:	613b      	str	r3, [r7, #16]
 80011e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_SPI_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001202:	23e0      	movs	r3, #224	; 0xe0
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001212:	2305      	movs	r3, #5
 8001214:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <HAL_SPI_MspInit+0x8c>)
 800121e:	f000 fe3f 	bl	8001ea0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001222:	bf00      	nop
 8001224:	3728      	adds	r7, #40	; 0x28
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	40013000 	.word	0x40013000
 8001230:	40023800 	.word	0x40023800
 8001234:	40020000 	.word	0x40020000

08001238 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800123c:	e7fe      	b.n	800123c <NMI_Handler+0x4>

0800123e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123e:	b480      	push	{r7}
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001242:	e7fe      	b.n	8001242 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	e7fe      	b.n	8001248 <MemManage_Handler+0x4>

0800124a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124e:	e7fe      	b.n	800124e <BusFault_Handler+0x4>

08001250 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001254:	e7fe      	b.n	8001254 <UsageFault_Handler+0x4>

08001256 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001268:	bf00      	nop
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	bf00      	nop
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001284:	f000 f89a 	bl	80013bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}

0800128c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <OTG_FS_IRQHandler+0x10>)
 8001292:	f001 f90a 	bl	80024aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200016ac 	.word	0x200016ac

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <SystemInit+0x20>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a05      	ldr	r2, [pc, #20]	; (80012c0 <SystemInit+0x20>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000ed00 	.word	0xe000ed00

080012c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80012c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012c8:	480d      	ldr	r0, [pc, #52]	; (8001300 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012ca:	490e      	ldr	r1, [pc, #56]	; (8001304 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012cc:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d0:	e002      	b.n	80012d8 <LoopCopyDataInit>

080012d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012d6:	3304      	adds	r3, #4

080012d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012dc:	d3f9      	bcc.n	80012d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012de:	4a0b      	ldr	r2, [pc, #44]	; (800130c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012e0:	4c0b      	ldr	r4, [pc, #44]	; (8001310 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012e4:	e001      	b.n	80012ea <LoopFillZerobss>

080012e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012e8:	3204      	adds	r2, #4

080012ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012ec:	d3fb      	bcc.n	80012e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012ee:	f7ff ffd7 	bl	80012a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012f2:	f006 ff85 	bl	8008200 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012f6:	f7ff fd4b 	bl	8000d90 <main>
  bx  lr    
 80012fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80012fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001300:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001304:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8001308:	080082d8 	.word	0x080082d8
  ldr r2, =_sbss
 800130c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8001310:	20001dd8 	.word	0x20001dd8

08001314 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001314:	e7fe      	b.n	8001314 <ADC_IRQHandler>
	...

08001318 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800131c:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <HAL_Init+0x40>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a0d      	ldr	r2, [pc, #52]	; (8001358 <HAL_Init+0x40>)
 8001322:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001326:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001328:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <HAL_Init+0x40>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_Init+0x40>)
 800132e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001332:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001334:	4b08      	ldr	r3, [pc, #32]	; (8001358 <HAL_Init+0x40>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a07      	ldr	r2, [pc, #28]	; (8001358 <HAL_Init+0x40>)
 800133a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800133e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001340:	2003      	movs	r0, #3
 8001342:	f000 fd4f 	bl	8001de4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001346:	200f      	movs	r0, #15
 8001348:	f000 f808 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134c:	f7ff fe9e 	bl	800108c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	40023c00 	.word	0x40023c00

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b12      	ldr	r3, [pc, #72]	; (80013b0 <HAL_InitTick+0x54>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <HAL_InitTick+0x58>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	4619      	mov	r1, r3
 800136e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001372:	fbb3 f3f1 	udiv	r3, r3, r1
 8001376:	fbb2 f3f3 	udiv	r3, r2, r3
 800137a:	4618      	mov	r0, r3
 800137c:	f000 fd67 	bl	8001e4e <HAL_SYSTICK_Config>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e00e      	b.n	80013a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2b0f      	cmp	r3, #15
 800138e:	d80a      	bhi.n	80013a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001390:	2200      	movs	r2, #0
 8001392:	6879      	ldr	r1, [r7, #4]
 8001394:	f04f 30ff 	mov.w	r0, #4294967295
 8001398:	f000 fd2f 	bl	8001dfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800139c:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <HAL_InitTick+0x5c>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013a2:	2300      	movs	r3, #0
 80013a4:	e000      	b.n	80013a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013a6:	2301      	movs	r3, #1
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x20>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_IncTick+0x24>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4413      	add	r3, r2
 80013cc:	4a04      	ldr	r2, [pc, #16]	; (80013e0 <HAL_IncTick+0x24>)
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	20000008 	.word	0x20000008
 80013e0:	200001c8 	.word	0x200001c8

080013e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  return uwTick;
 80013e8:	4b03      	ldr	r3, [pc, #12]	; (80013f8 <HAL_GetTick+0x14>)
 80013ea:	681b      	ldr	r3, [r3, #0]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	200001c8 	.word	0x200001c8

080013fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001404:	f7ff ffee 	bl	80013e4 <HAL_GetTick>
 8001408:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001414:	d005      	beq.n	8001422 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <HAL_Delay+0x44>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	461a      	mov	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001422:	bf00      	nop
 8001424:	f7ff ffde 	bl	80013e4 <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	429a      	cmp	r2, r3
 8001432:	d8f7      	bhi.n	8001424 <HAL_Delay+0x28>
  {
  }
}
 8001434:	bf00      	nop
 8001436:	bf00      	nop
 8001438:	3710      	adds	r7, #16
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000008 	.word	0x20000008

08001444 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b084      	sub	sp, #16
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d101      	bne.n	800145a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e033      	b.n	80014c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	2b00      	cmp	r3, #0
 8001460:	d109      	bne.n	8001476 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fe3a 	bl	80010dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2200      	movs	r2, #0
 800146c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	f003 0310 	and.w	r3, r3, #16
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800148a:	f023 0302 	bic.w	r3, r3, #2
 800148e:	f043 0202 	orr.w	r2, r3, #2
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 fad8 	bl	8001a4c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f023 0303 	bic.w	r3, r3, #3
 80014aa:	f043 0201 	orr.w	r2, r3, #1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	641a      	str	r2, [r3, #64]	; 0x40
 80014b2:	e001      	b.n	80014b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2200      	movs	r2, #0
 80014bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_ADC_Start+0x1a>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e0b2      	b.n	800164c <HAL_ADC_Start+0x180>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	689b      	ldr	r3, [r3, #8]
 80014f4:	f003 0301 	and.w	r3, r3, #1
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d018      	beq.n	800152e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800150c:	4b52      	ldr	r3, [pc, #328]	; (8001658 <HAL_ADC_Start+0x18c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a52      	ldr	r2, [pc, #328]	; (800165c <HAL_ADC_Start+0x190>)
 8001512:	fba2 2303 	umull	r2, r3, r2, r3
 8001516:	0c9a      	lsrs	r2, r3, #18
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001520:	e002      	b.n	8001528 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3b01      	subs	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f9      	bne.n	8001522 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b01      	cmp	r3, #1
 800153a:	d17a      	bne.n	8001632 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001544:	f023 0301 	bic.w	r3, r3, #1
 8001548:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800155a:	2b00      	cmp	r3, #0
 800155c:	d007      	beq.n	800156e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001562:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001566:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157a:	d106      	bne.n	800158a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	f023 0206 	bic.w	r2, r3, #6
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	645a      	str	r2, [r3, #68]	; 0x44
 8001588:	e002      	b.n	8001590 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001598:	4b31      	ldr	r3, [pc, #196]	; (8001660 <HAL_ADC_Start+0x194>)
 800159a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 031f 	and.w	r3, r3, #31
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d12a      	bne.n	8001608 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a2b      	ldr	r2, [pc, #172]	; (8001664 <HAL_ADC_Start+0x198>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d015      	beq.n	80015e8 <HAL_ADC_Start+0x11c>
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a29      	ldr	r2, [pc, #164]	; (8001668 <HAL_ADC_Start+0x19c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d105      	bne.n	80015d2 <HAL_ADC_Start+0x106>
 80015c6:	4b26      	ldr	r3, [pc, #152]	; (8001660 <HAL_ADC_Start+0x194>)
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f003 031f 	and.w	r3, r3, #31
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d00a      	beq.n	80015e8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a25      	ldr	r2, [pc, #148]	; (800166c <HAL_ADC_Start+0x1a0>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d136      	bne.n	800164a <HAL_ADC_Start+0x17e>
 80015dc:	4b20      	ldr	r3, [pc, #128]	; (8001660 <HAL_ADC_Start+0x194>)
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d130      	bne.n	800164a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689b      	ldr	r3, [r3, #8]
 80015ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d129      	bne.n	800164a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	e020      	b.n	800164a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a15      	ldr	r2, [pc, #84]	; (8001664 <HAL_ADC_Start+0x198>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d11b      	bne.n	800164a <HAL_ADC_Start+0x17e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800161c:	2b00      	cmp	r3, #0
 800161e:	d114      	bne.n	800164a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	689a      	ldr	r2, [r3, #8]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800162e:	609a      	str	r2, [r3, #8]
 8001630:	e00b      	b.n	800164a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f043 0210 	orr.w	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001642:	f043 0201 	orr.w	r2, r3, #1
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800164a:	2300      	movs	r3, #0
}
 800164c:	4618      	mov	r0, r3
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr
 8001658:	20000000 	.word	0x20000000
 800165c:	431bde83 	.word	0x431bde83
 8001660:	40012300 	.word	0x40012300
 8001664:	40012000 	.word	0x40012000
 8001668:	40012100 	.word	0x40012100
 800166c:	40012200 	.word	0x40012200

08001670 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800167e:	2b01      	cmp	r3, #1
 8001680:	d101      	bne.n	8001686 <HAL_ADC_Stop+0x16>
 8001682:	2302      	movs	r3, #2
 8001684:	e021      	b.n	80016ca <HAL_ADC_Stop+0x5a>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2201      	movs	r2, #1
 800168a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f022 0201 	bic.w	r2, r2, #1
 800169c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d109      	bne.n	80016c0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016b4:	f023 0301 	bic.w	r3, r3, #1
 80016b8:	f043 0201 	orr.w	r2, r3, #1
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr

080016d6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016e0:	2300      	movs	r3, #0
 80016e2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016f2:	d113      	bne.n	800171c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80016fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001702:	d10b      	bne.n	800171c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	f043 0220 	orr.w	r2, r3, #32
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e063      	b.n	80017e4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800171c:	f7ff fe62 	bl	80013e4 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001722:	e021      	b.n	8001768 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800172a:	d01d      	beq.n	8001768 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d007      	beq.n	8001742 <HAL_ADC_PollForConversion+0x6c>
 8001732:	f7ff fe57 	bl	80013e4 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d212      	bcs.n	8001768 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b02      	cmp	r3, #2
 800174e:	d00b      	beq.n	8001768 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f043 0204 	orr.w	r2, r3, #4
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e03d      	b.n	80017e4 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d1d6      	bne.n	8001724 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f06f 0212 	mvn.w	r2, #18
 800177e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001784:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d123      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d11f      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d006      	beq.n	80017be <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d111      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d105      	bne.n	80017e2 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f043 0201 	orr.w	r2, r3, #1
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
	...

08001808 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800181c:	2b01      	cmp	r3, #1
 800181e:	d101      	bne.n	8001824 <HAL_ADC_ConfigChannel+0x1c>
 8001820:	2302      	movs	r3, #2
 8001822:	e105      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x228>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2201      	movs	r2, #1
 8001828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b09      	cmp	r3, #9
 8001832:	d925      	bls.n	8001880 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68d9      	ldr	r1, [r3, #12]
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	b29b      	uxth	r3, r3
 8001840:	461a      	mov	r2, r3
 8001842:	4613      	mov	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4413      	add	r3, r2
 8001848:	3b1e      	subs	r3, #30
 800184a:	2207      	movs	r2, #7
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43da      	mvns	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	400a      	ands	r2, r1
 8001858:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68d9      	ldr	r1, [r3, #12]
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	4603      	mov	r3, r0
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4403      	add	r3, r0
 8001872:	3b1e      	subs	r3, #30
 8001874:	409a      	lsls	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	e022      	b.n	80018c6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6919      	ldr	r1, [r3, #16]
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	b29b      	uxth	r3, r3
 800188c:	461a      	mov	r2, r3
 800188e:	4613      	mov	r3, r2
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	4413      	add	r3, r2
 8001894:	2207      	movs	r2, #7
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43da      	mvns	r2, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	400a      	ands	r2, r1
 80018a2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6919      	ldr	r1, [r3, #16]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4618      	mov	r0, r3
 80018b6:	4603      	mov	r3, r0
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4403      	add	r3, r0
 80018bc:	409a      	lsls	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d824      	bhi.n	8001918 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685a      	ldr	r2, [r3, #4]
 80018d8:	4613      	mov	r3, r2
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	4413      	add	r3, r2
 80018de:	3b05      	subs	r3, #5
 80018e0:	221f      	movs	r2, #31
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43da      	mvns	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	400a      	ands	r2, r1
 80018ee:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	4613      	mov	r3, r2
 8001904:	009b      	lsls	r3, r3, #2
 8001906:	4413      	add	r3, r2
 8001908:	3b05      	subs	r3, #5
 800190a:	fa00 f203 	lsl.w	r2, r0, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	430a      	orrs	r2, r1
 8001914:	635a      	str	r2, [r3, #52]	; 0x34
 8001916:	e04c      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d824      	bhi.n	800196a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	4613      	mov	r3, r2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	4413      	add	r3, r2
 8001930:	3b23      	subs	r3, #35	; 0x23
 8001932:	221f      	movs	r2, #31
 8001934:	fa02 f303 	lsl.w	r3, r2, r3
 8001938:	43da      	mvns	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	400a      	ands	r2, r1
 8001940:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	b29b      	uxth	r3, r3
 800194e:	4618      	mov	r0, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685a      	ldr	r2, [r3, #4]
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	3b23      	subs	r3, #35	; 0x23
 800195c:	fa00 f203 	lsl.w	r2, r0, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	631a      	str	r2, [r3, #48]	; 0x30
 8001968:	e023      	b.n	80019b2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b41      	subs	r3, #65	; 0x41
 800197c:	221f      	movs	r2, #31
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43da      	mvns	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	400a      	ands	r2, r1
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4618      	mov	r0, r3
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	4613      	mov	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	4413      	add	r3, r2
 80019a4:	3b41      	subs	r3, #65	; 0x41
 80019a6:	fa00 f203 	lsl.w	r2, r0, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	430a      	orrs	r2, r1
 80019b0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019b2:	4b22      	ldr	r3, [pc, #136]	; (8001a3c <HAL_ADC_ConfigChannel+0x234>)
 80019b4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a21      	ldr	r2, [pc, #132]	; (8001a40 <HAL_ADC_ConfigChannel+0x238>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d109      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1cc>
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b12      	cmp	r3, #18
 80019c6:	d105      	bne.n	80019d4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_ADC_ConfigChannel+0x238>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d123      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x21e>
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b10      	cmp	r3, #16
 80019e4:	d003      	beq.n	80019ee <HAL_ADC_ConfigChannel+0x1e6>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2b11      	cmp	r3, #17
 80019ec:	d11b      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2b10      	cmp	r3, #16
 8001a00:	d111      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a02:	4b10      	ldr	r3, [pc, #64]	; (8001a44 <HAL_ADC_ConfigChannel+0x23c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a10      	ldr	r2, [pc, #64]	; (8001a48 <HAL_ADC_ConfigChannel+0x240>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9a      	lsrs	r2, r3, #18
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40012300 	.word	0x40012300
 8001a40:	40012000 	.word	0x40012000
 8001a44:	20000000 	.word	0x20000000
 8001a48:	431bde83 	.word	0x431bde83

08001a4c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a54:	4b79      	ldr	r3, [pc, #484]	; (8001c3c <ADC_Init+0x1f0>)
 8001a56:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	685a      	ldr	r2, [r3, #4]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	685a      	ldr	r2, [r3, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a80:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	6859      	ldr	r1, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	021a      	lsls	r2, r3, #8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	430a      	orrs	r2, r1
 8001a94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	685a      	ldr	r2, [r3, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689a      	ldr	r2, [r3, #8]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6899      	ldr	r1, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	430a      	orrs	r2, r1
 8001ad8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ade:	4a58      	ldr	r2, [pc, #352]	; (8001c40 <ADC_Init+0x1f4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d022      	beq.n	8001b2a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	689a      	ldr	r2, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6899      	ldr	r1, [r3, #8]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b14:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6899      	ldr	r1, [r3, #8]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	e00f      	b.n	8001b4a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	689a      	ldr	r2, [r3, #8]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b38:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b48:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0202 	bic.w	r2, r2, #2
 8001b58:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	6899      	ldr	r1, [r3, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	7e1b      	ldrb	r3, [r3, #24]
 8001b64:	005a      	lsls	r2, r3, #1
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d01b      	beq.n	8001bb0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b86:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b96:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6859      	ldr	r1, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	035a      	lsls	r2, r3, #13
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	430a      	orrs	r2, r1
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	e007      	b.n	8001bc0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	685a      	ldr	r2, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	69db      	ldr	r3, [r3, #28]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	051a      	lsls	r2, r3, #20
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	430a      	orrs	r2, r1
 8001be4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bf4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6899      	ldr	r1, [r3, #8]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c02:	025a      	lsls	r2, r3, #9
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	6899      	ldr	r1, [r3, #8]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	029a      	lsls	r2, r3, #10
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	609a      	str	r2, [r3, #8]
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	40012300 	.word	0x40012300
 8001c40:	0f000001 	.word	0x0f000001

08001c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	f003 0307 	and.w	r3, r3, #7
 8001c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c54:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c60:	4013      	ands	r3, r2
 8001c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c76:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <__NVIC_SetPriorityGrouping+0x44>)
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	60d3      	str	r3, [r2, #12]
}
 8001c7c:	bf00      	nop
 8001c7e:	3714      	adds	r7, #20
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	e000ed00 	.word	0xe000ed00

08001c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c90:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	0a1b      	lsrs	r3, r3, #8
 8001c96:	f003 0307 	and.w	r3, r3, #7
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	e000ed00 	.word	0xe000ed00

08001ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	db0b      	blt.n	8001cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	f003 021f 	and.w	r2, r3, #31
 8001cc0:	4907      	ldr	r1, [pc, #28]	; (8001ce0 <__NVIC_EnableIRQ+0x38>)
 8001cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	2001      	movs	r0, #1
 8001cca:	fa00 f202 	lsl.w	r2, r0, r2
 8001cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000e100 	.word	0xe000e100

08001ce4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	6039      	str	r1, [r7, #0]
 8001cee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	db0a      	blt.n	8001d0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	b2da      	uxtb	r2, r3
 8001cfc:	490c      	ldr	r1, [pc, #48]	; (8001d30 <__NVIC_SetPriority+0x4c>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	440b      	add	r3, r1
 8001d08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d0c:	e00a      	b.n	8001d24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	b2da      	uxtb	r2, r3
 8001d12:	4908      	ldr	r1, [pc, #32]	; (8001d34 <__NVIC_SetPriority+0x50>)
 8001d14:	79fb      	ldrb	r3, [r7, #7]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	3b04      	subs	r3, #4
 8001d1c:	0112      	lsls	r2, r2, #4
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	440b      	add	r3, r1
 8001d22:	761a      	strb	r2, [r3, #24]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000e100 	.word	0xe000e100
 8001d34:	e000ed00 	.word	0xe000ed00

08001d38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b089      	sub	sp, #36	; 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f1c3 0307 	rsb	r3, r3, #7
 8001d52:	2b04      	cmp	r3, #4
 8001d54:	bf28      	it	cs
 8001d56:	2304      	movcs	r3, #4
 8001d58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	2b06      	cmp	r3, #6
 8001d60:	d902      	bls.n	8001d68 <NVIC_EncodePriority+0x30>
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	3b03      	subs	r3, #3
 8001d66:	e000      	b.n	8001d6a <NVIC_EncodePriority+0x32>
 8001d68:	2300      	movs	r3, #0
 8001d6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43da      	mvns	r2, r3
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	401a      	ands	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d80:	f04f 31ff 	mov.w	r1, #4294967295
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	43d9      	mvns	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d90:	4313      	orrs	r3, r2
         );
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3724      	adds	r7, #36	; 0x24
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
	...

08001da0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3b01      	subs	r3, #1
 8001dac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001db0:	d301      	bcc.n	8001db6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00f      	b.n	8001dd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <SysTick_Config+0x40>)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dbe:	210f      	movs	r1, #15
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f7ff ff8e 	bl	8001ce4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dc8:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <SysTick_Config+0x40>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dce:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <SysTick_Config+0x40>)
 8001dd0:	2207      	movs	r2, #7
 8001dd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	e000e010 	.word	0xe000e010

08001de4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff ff29 	bl	8001c44 <__NVIC_SetPriorityGrouping>
}
 8001df2:	bf00      	nop
 8001df4:	3708      	adds	r7, #8
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b086      	sub	sp, #24
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	60b9      	str	r1, [r7, #8]
 8001e04:	607a      	str	r2, [r7, #4]
 8001e06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e0c:	f7ff ff3e 	bl	8001c8c <__NVIC_GetPriorityGrouping>
 8001e10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	6978      	ldr	r0, [r7, #20]
 8001e18:	f7ff ff8e 	bl	8001d38 <NVIC_EncodePriority>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e22:	4611      	mov	r1, r2
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff ff5d 	bl	8001ce4 <__NVIC_SetPriority>
}
 8001e2a:	bf00      	nop
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e32:	b580      	push	{r7, lr}
 8001e34:	b082      	sub	sp, #8
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	4603      	mov	r3, r0
 8001e3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff31 	bl	8001ca8 <__NVIC_EnableIRQ>
}
 8001e46:	bf00      	nop
 8001e48:	3708      	adds	r7, #8
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}

08001e4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e4e:	b580      	push	{r7, lr}
 8001e50:	b082      	sub	sp, #8
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f7ff ffa2 	bl	8001da0 <SysTick_Config>
 8001e5c:	4603      	mov	r3, r0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e00e      	b.n	8001e96 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	795b      	ldrb	r3, [r3, #5]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d105      	bne.n	8001e8e <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f7ff f96b 	bl	8001164 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2201      	movs	r2, #1
 8001e92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
	...

08001ea0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
 8001eba:	e16b      	b.n	8002194 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	697a      	ldr	r2, [r7, #20]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed0:	693a      	ldr	r2, [r7, #16]
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	f040 815a 	bne.w	800218e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f003 0303 	and.w	r3, r3, #3
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d005      	beq.n	8001ef2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d130      	bne.n	8001f54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	2203      	movs	r2, #3
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43db      	mvns	r3, r3
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	4013      	ands	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	091b      	lsrs	r3, r3, #4
 8001f3e:	f003 0201 	and.w	r2, r3, #1
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	2b03      	cmp	r3, #3
 8001f5e:	d017      	beq.n	8001f90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	2203      	movs	r2, #3
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	689a      	ldr	r2, [r3, #8]
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d123      	bne.n	8001fe4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	08da      	lsrs	r2, r3, #3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3208      	adds	r2, #8
 8001fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	220f      	movs	r2, #15
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	691a      	ldr	r2, [r3, #16]
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	08da      	lsrs	r2, r3, #3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3208      	adds	r2, #8
 8001fde:	69b9      	ldr	r1, [r7, #24]
 8001fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	2203      	movs	r2, #3
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	69ba      	ldr	r2, [r7, #24]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0203 	and.w	r2, r3, #3
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	69ba      	ldr	r2, [r7, #24]
 800200e:	4313      	orrs	r3, r2
 8002010:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 80b4 	beq.w	800218e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002026:	2300      	movs	r3, #0
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	4b60      	ldr	r3, [pc, #384]	; (80021ac <HAL_GPIO_Init+0x30c>)
 800202c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800202e:	4a5f      	ldr	r2, [pc, #380]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002034:	6453      	str	r3, [r2, #68]	; 0x44
 8002036:	4b5d      	ldr	r3, [pc, #372]	; (80021ac <HAL_GPIO_Init+0x30c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a5b      	ldr	r2, [pc, #364]	; (80021b0 <HAL_GPIO_Init+0x310>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a52      	ldr	r2, [pc, #328]	; (80021b4 <HAL_GPIO_Init+0x314>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d02b      	beq.n	80020c6 <HAL_GPIO_Init+0x226>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <HAL_GPIO_Init+0x318>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d025      	beq.n	80020c2 <HAL_GPIO_Init+0x222>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_GPIO_Init+0x31c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d01f      	beq.n	80020be <HAL_GPIO_Init+0x21e>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a4f      	ldr	r2, [pc, #316]	; (80021c0 <HAL_GPIO_Init+0x320>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d019      	beq.n	80020ba <HAL_GPIO_Init+0x21a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4e      	ldr	r2, [pc, #312]	; (80021c4 <HAL_GPIO_Init+0x324>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d013      	beq.n	80020b6 <HAL_GPIO_Init+0x216>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4d      	ldr	r2, [pc, #308]	; (80021c8 <HAL_GPIO_Init+0x328>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d00d      	beq.n	80020b2 <HAL_GPIO_Init+0x212>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4c      	ldr	r2, [pc, #304]	; (80021cc <HAL_GPIO_Init+0x32c>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d007      	beq.n	80020ae <HAL_GPIO_Init+0x20e>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4b      	ldr	r2, [pc, #300]	; (80021d0 <HAL_GPIO_Init+0x330>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d101      	bne.n	80020aa <HAL_GPIO_Init+0x20a>
 80020a6:	2307      	movs	r3, #7
 80020a8:	e00e      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020aa:	2308      	movs	r3, #8
 80020ac:	e00c      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020ae:	2306      	movs	r3, #6
 80020b0:	e00a      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020b2:	2305      	movs	r3, #5
 80020b4:	e008      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020b6:	2304      	movs	r3, #4
 80020b8:	e006      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020ba:	2303      	movs	r3, #3
 80020bc:	e004      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020be:	2302      	movs	r3, #2
 80020c0:	e002      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x228>
 80020c6:	2300      	movs	r3, #0
 80020c8:	69fa      	ldr	r2, [r7, #28]
 80020ca:	f002 0203 	and.w	r2, r2, #3
 80020ce:	0092      	lsls	r2, r2, #2
 80020d0:	4093      	lsls	r3, r2
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020d8:	4935      	ldr	r1, [pc, #212]	; (80021b0 <HAL_GPIO_Init+0x310>)
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020e6:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_GPIO_Init+0x334>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	4313      	orrs	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800210a:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	43db      	mvns	r3, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4013      	ands	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d003      	beq.n	8002134 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002134:	4a27      	ldr	r2, [pc, #156]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002136:	69bb      	ldr	r3, [r7, #24]
 8002138:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800215e:	4a1d      	ldr	r2, [pc, #116]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_GPIO_Init+0x334>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002188:	4a12      	ldr	r2, [pc, #72]	; (80021d4 <HAL_GPIO_Init+0x334>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3301      	adds	r3, #1
 8002192:	61fb      	str	r3, [r7, #28]
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	2b0f      	cmp	r3, #15
 8002198:	f67f ae90 	bls.w	8001ebc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3724      	adds	r7, #36	; 0x24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40023800 	.word	0x40023800
 80021b0:	40013800 	.word	0x40013800
 80021b4:	40020000 	.word	0x40020000
 80021b8:	40020400 	.word	0x40020400
 80021bc:	40020800 	.word	0x40020800
 80021c0:	40020c00 	.word	0x40020c00
 80021c4:	40021000 	.word	0x40021000
 80021c8:	40021400 	.word	0x40021400
 80021cc:	40021800 	.word	0x40021800
 80021d0:	40021c00 	.word	0x40021c00
 80021d4:	40013c00 	.word	0x40013c00

080021d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021d8:	b480      	push	{r7}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	807b      	strh	r3, [r7, #2]
 80021e4:	4613      	mov	r3, r2
 80021e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021e8:	787b      	ldrb	r3, [r7, #1]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d003      	beq.n	80021f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021f4:	e003      	b.n	80021fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021f6:	887b      	ldrh	r3, [r7, #2]
 80021f8:	041a      	lsls	r2, r3, #16
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	619a      	str	r2, [r3, #24]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800220a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800220c:	b08f      	sub	sp, #60	; 0x3c
 800220e:	af0a      	add	r7, sp, #40	; 0x28
 8002210:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e10f      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b00      	cmp	r3, #0
 800222c:	d106      	bne.n	800223c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f005 fcce 	bl	8007bd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2203      	movs	r2, #3
 8002240:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800224c:	2b00      	cmp	r3, #0
 800224e:	d102      	bne.n	8002256 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2200      	movs	r2, #0
 8002254:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f002 f85f 	bl	800431e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	687e      	ldr	r6, [r7, #4]
 8002268:	466d      	mov	r5, sp
 800226a:	f106 0410 	add.w	r4, r6, #16
 800226e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002270:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002276:	e894 0003 	ldmia.w	r4, {r0, r1}
 800227a:	e885 0003 	stmia.w	r5, {r0, r1}
 800227e:	1d33      	adds	r3, r6, #4
 8002280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002282:	6838      	ldr	r0, [r7, #0]
 8002284:	f001 ff37 	bl	80040f6 <USB_CoreInit>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2202      	movs	r2, #2
 8002292:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e0d0      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 f84d 	bl	8004340 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a6:	2300      	movs	r3, #0
 80022a8:	73fb      	strb	r3, [r7, #15]
 80022aa:	e04a      	b.n	8002342 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80022ac:	7bfa      	ldrb	r2, [r7, #15]
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	4413      	add	r3, r2
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	440b      	add	r3, r1
 80022ba:	333d      	adds	r3, #61	; 0x3d
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80022c0:	7bfa      	ldrb	r2, [r7, #15]
 80022c2:	6879      	ldr	r1, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	00db      	lsls	r3, r3, #3
 80022c8:	4413      	add	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	440b      	add	r3, r1
 80022ce:	333c      	adds	r3, #60	; 0x3c
 80022d0:	7bfa      	ldrb	r2, [r7, #15]
 80022d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80022d4:	7bfa      	ldrb	r2, [r7, #15]
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	b298      	uxth	r0, r3
 80022da:	6879      	ldr	r1, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	00db      	lsls	r3, r3, #3
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	3344      	adds	r3, #68	; 0x44
 80022e8:	4602      	mov	r2, r0
 80022ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80022ec:	7bfa      	ldrb	r2, [r7, #15]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	00db      	lsls	r3, r3, #3
 80022f4:	4413      	add	r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3340      	adds	r3, #64	; 0x40
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002300:	7bfa      	ldrb	r2, [r7, #15]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	00db      	lsls	r3, r3, #3
 8002308:	4413      	add	r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3348      	adds	r3, #72	; 0x48
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002314:	7bfa      	ldrb	r2, [r7, #15]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	334c      	adds	r3, #76	; 0x4c
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002328:	7bfa      	ldrb	r2, [r7, #15]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3354      	adds	r3, #84	; 0x54
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfa      	ldrb	r2, [r7, #15]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	d3af      	bcc.n	80022ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]
 8002350:	e044      	b.n	80023dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002352:	7bfa      	ldrb	r2, [r7, #15]
 8002354:	6879      	ldr	r1, [r7, #4]
 8002356:	4613      	mov	r3, r2
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4413      	add	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	440b      	add	r3, r1
 8002360:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002368:	7bfa      	ldrb	r2, [r7, #15]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	4613      	mov	r3, r2
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	4413      	add	r3, r2
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	440b      	add	r3, r1
 8002376:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800237a:	7bfa      	ldrb	r2, [r7, #15]
 800237c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800237e:	7bfa      	ldrb	r2, [r7, #15]
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	009b      	lsls	r3, r3, #2
 800238a:	440b      	add	r3, r1
 800238c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002390:	2200      	movs	r2, #0
 8002392:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002394:	7bfa      	ldrb	r2, [r7, #15]
 8002396:	6879      	ldr	r1, [r7, #4]
 8002398:	4613      	mov	r3, r2
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	440b      	add	r3, r1
 80023a2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80023a6:	2200      	movs	r2, #0
 80023a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80023aa:	7bfa      	ldrb	r2, [r7, #15]
 80023ac:	6879      	ldr	r1, [r7, #4]
 80023ae:	4613      	mov	r3, r2
 80023b0:	00db      	lsls	r3, r3, #3
 80023b2:	4413      	add	r3, r2
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	440b      	add	r3, r1
 80023b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80023c0:	7bfa      	ldrb	r2, [r7, #15]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	00db      	lsls	r3, r3, #3
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023d6:	7bfb      	ldrb	r3, [r7, #15]
 80023d8:	3301      	adds	r3, #1
 80023da:	73fb      	strb	r3, [r7, #15]
 80023dc:	7bfa      	ldrb	r2, [r7, #15]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d3b5      	bcc.n	8002352 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	603b      	str	r3, [r7, #0]
 80023ec:	687e      	ldr	r6, [r7, #4]
 80023ee:	466d      	mov	r5, sp
 80023f0:	f106 0410 	add.w	r4, r6, #16
 80023f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80023fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80023fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002400:	e885 0003 	stmia.w	r5, {r0, r1}
 8002404:	1d33      	adds	r3, r6, #4
 8002406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002408:	6838      	ldr	r0, [r7, #0]
 800240a:	f001 ffe5 	bl	80043d8 <USB_DevInit>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2202      	movs	r2, #2
 8002418:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e00d      	b.n	800243c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f003 f934 	bl	80056a2 <USB_DevDisconnect>

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002444 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <HAL_PCD_Start+0x1c>
 800245c:	2302      	movs	r3, #2
 800245e:	e020      	b.n	80024a2 <HAL_PCD_Start+0x5e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800246c:	2b01      	cmp	r3, #1
 800246e:	d109      	bne.n	8002484 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002474:	2b01      	cmp	r3, #1
 8002476:	d005      	beq.n	8002484 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4618      	mov	r0, r3
 800248a:	f001 ff37 	bl	80042fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f003 f8e4 	bl	8005660 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3710      	adds	r7, #16
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80024aa:	b590      	push	{r4, r7, lr}
 80024ac:	b08d      	sub	sp, #52	; 0x34
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f003 f9a2 	bl	800580a <USB_GetMode>
 80024c6:	4603      	mov	r3, r0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f040 848a 	bne.w	8002de2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f003 f906 	bl	80056e4 <USB_ReadInterrupts>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	f000 8480 	beq.w	8002de0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	0a1b      	lsrs	r3, r3, #8
 80024ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f003 f8f3 	bl	80056e4 <USB_ReadInterrupts>
 80024fe:	4603      	mov	r3, r0
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b02      	cmp	r3, #2
 8002506:	d107      	bne.n	8002518 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695a      	ldr	r2, [r3, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f002 0202 	and.w	r2, r2, #2
 8002516:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f003 f8e1 	bl	80056e4 <USB_ReadInterrupts>
 8002522:	4603      	mov	r3, r0
 8002524:	f003 0310 	and.w	r3, r3, #16
 8002528:	2b10      	cmp	r3, #16
 800252a:	d161      	bne.n	80025f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699a      	ldr	r2, [r3, #24]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f022 0210 	bic.w	r2, r2, #16
 800253a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 020f 	and.w	r2, r3, #15
 8002548:	4613      	mov	r3, r2
 800254a:	00db      	lsls	r3, r3, #3
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	4413      	add	r3, r2
 8002558:	3304      	adds	r3, #4
 800255a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	0c5b      	lsrs	r3, r3, #17
 8002560:	f003 030f 	and.w	r3, r3, #15
 8002564:	2b02      	cmp	r3, #2
 8002566:	d124      	bne.n	80025b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d035      	beq.n	80025e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	091b      	lsrs	r3, r3, #4
 800257c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800257e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6a38      	ldr	r0, [r7, #32]
 8002588:	f002 ff18 	bl	80053bc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	691a      	ldr	r2, [r3, #16]
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	091b      	lsrs	r3, r3, #4
 8002594:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002598:	441a      	add	r2, r3
 800259a:	697b      	ldr	r3, [r7, #20]
 800259c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	6a1a      	ldr	r2, [r3, #32]
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	091b      	lsrs	r3, r3, #4
 80025a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025aa:	441a      	add	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	621a      	str	r2, [r3, #32]
 80025b0:	e016      	b.n	80025e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	0c5b      	lsrs	r3, r3, #17
 80025b6:	f003 030f 	and.w	r3, r3, #15
 80025ba:	2b06      	cmp	r3, #6
 80025bc:	d110      	bne.n	80025e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80025c4:	2208      	movs	r2, #8
 80025c6:	4619      	mov	r1, r3
 80025c8:	6a38      	ldr	r0, [r7, #32]
 80025ca:	f002 fef7 	bl	80053bc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	091b      	lsrs	r3, r3, #4
 80025d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025da:	441a      	add	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	699a      	ldr	r2, [r3, #24]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f042 0210 	orr.w	r2, r2, #16
 80025ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f003 f875 	bl	80056e4 <USB_ReadInterrupts>
 80025fa:	4603      	mov	r3, r0
 80025fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002600:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002604:	f040 80a7 	bne.w	8002756 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f003 f87a 	bl	800570a <USB_ReadDevAllOutEpInterrupt>
 8002616:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002618:	e099      	b.n	800274e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	f003 0301 	and.w	r3, r3, #1
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 808e 	beq.w	8002742 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	4611      	mov	r1, r2
 8002630:	4618      	mov	r0, r3
 8002632:	f003 f89e 	bl	8005772 <USB_ReadDevOutEPInterrupt>
 8002636:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002644:	015a      	lsls	r2, r3, #5
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	4413      	add	r3, r2
 800264a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800264e:	461a      	mov	r2, r3
 8002650:	2301      	movs	r3, #1
 8002652:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002654:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	f000 fec2 	bl	80033e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00c      	beq.n	8002680 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	015a      	lsls	r2, r3, #5
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	4413      	add	r3, r2
 800266e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002672:	461a      	mov	r2, r3
 8002674:	2308      	movs	r3, #8
 8002676:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002678:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 ff98 	bl	80035b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d008      	beq.n	800269c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	015a      	lsls	r2, r3, #5
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	4413      	add	r3, r2
 8002692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002696:	461a      	mov	r2, r3
 8002698:	2310      	movs	r3, #16
 800269a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d030      	beq.n	8002708 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	695b      	ldr	r3, [r3, #20]
 80026aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ae:	2b80      	cmp	r3, #128	; 0x80
 80026b0:	d109      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	69fa      	ldr	r2, [r7, #28]
 80026bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4413      	add	r3, r2
 80026d8:	3304      	adds	r3, #4
 80026da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	78db      	ldrb	r3, [r3, #3]
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d108      	bne.n	80026f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2200      	movs	r2, #0
 80026e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	4619      	mov	r1, r3
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f005 fb77 	bl	8007de4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	015a      	lsls	r2, r3, #5
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	4413      	add	r3, r2
 80026fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002702:	461a      	mov	r2, r3
 8002704:	2302      	movs	r3, #2
 8002706:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d008      	beq.n	8002724 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	015a      	lsls	r2, r3, #5
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	4413      	add	r3, r2
 800271a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800271e:	461a      	mov	r2, r3
 8002720:	2320      	movs	r3, #32
 8002722:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d009      	beq.n	8002742 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800273a:	461a      	mov	r2, r3
 800273c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002740:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	3301      	adds	r3, #1
 8002746:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002750:	2b00      	cmp	r3, #0
 8002752:	f47f af62 	bne.w	800261a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f002 ffc2 	bl	80056e4 <USB_ReadInterrupts>
 8002760:	4603      	mov	r3, r0
 8002762:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002766:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800276a:	f040 80db 	bne.w	8002924 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f002 ffe3 	bl	800573e <USB_ReadDevAllInEpInterrupt>
 8002778:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800277a:	2300      	movs	r3, #0
 800277c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800277e:	e0cd      	b.n	800291c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 80c2 	beq.w	8002910 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002792:	b2d2      	uxtb	r2, r2
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f003 f809 	bl	80057ae <USB_ReadDevInEPInterrupt>
 800279c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d057      	beq.n	8002858 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	2201      	movs	r2, #1
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69f9      	ldr	r1, [r7, #28]
 80027c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80027c8:	4013      	ands	r3, r2
 80027ca:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80027cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ce:	015a      	lsls	r2, r3, #5
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	4413      	add	r3, r2
 80027d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027d8:	461a      	mov	r2, r3
 80027da:	2301      	movs	r3, #1
 80027dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d132      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80027e6:	6879      	ldr	r1, [r7, #4]
 80027e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ea:	4613      	mov	r3, r2
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4413      	add	r3, r2
 80027f0:	009b      	lsls	r3, r3, #2
 80027f2:	440b      	add	r3, r1
 80027f4:	334c      	adds	r3, #76	; 0x4c
 80027f6:	6819      	ldr	r1, [r3, #0]
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027fc:	4613      	mov	r3, r2
 80027fe:	00db      	lsls	r3, r3, #3
 8002800:	4413      	add	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4403      	add	r3, r0
 8002806:	3348      	adds	r3, #72	; 0x48
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4419      	add	r1, r3
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002810:	4613      	mov	r3, r2
 8002812:	00db      	lsls	r3, r3, #3
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4403      	add	r3, r0
 800281a:	334c      	adds	r3, #76	; 0x4c
 800281c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800281e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002820:	2b00      	cmp	r3, #0
 8002822:	d113      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
 8002824:	6879      	ldr	r1, [r7, #4]
 8002826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002828:	4613      	mov	r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	440b      	add	r3, r1
 8002832:	3354      	adds	r3, #84	; 0x54
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d108      	bne.n	800284c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6818      	ldr	r0, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002844:	461a      	mov	r2, r3
 8002846:	2101      	movs	r1, #1
 8002848:	f003 f810 	bl	800586c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800284c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284e:	b2db      	uxtb	r3, r3
 8002850:	4619      	mov	r1, r3
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f005 fa41 	bl	8007cda <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	f003 0308 	and.w	r3, r3, #8
 800285e:	2b00      	cmp	r3, #0
 8002860:	d008      	beq.n	8002874 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	4413      	add	r3, r2
 800286a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800286e:	461a      	mov	r2, r3
 8002870:	2308      	movs	r3, #8
 8002872:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	f003 0310 	and.w	r3, r3, #16
 800287a:	2b00      	cmp	r3, #0
 800287c:	d008      	beq.n	8002890 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800287e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002880:	015a      	lsls	r2, r3, #5
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	4413      	add	r3, r2
 8002886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800288a:	461a      	mov	r2, r3
 800288c:	2310      	movs	r3, #16
 800288e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028a6:	461a      	mov	r2, r3
 80028a8:	2340      	movs	r3, #64	; 0x40
 80028aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d023      	beq.n	80028fe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80028b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028b8:	6a38      	ldr	r0, [r7, #32]
 80028ba:	f001 fef1 	bl	80046a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4613      	mov	r3, r2
 80028c2:	00db      	lsls	r3, r3, #3
 80028c4:	4413      	add	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	3338      	adds	r3, #56	; 0x38
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	4413      	add	r3, r2
 80028ce:	3304      	adds	r3, #4
 80028d0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	78db      	ldrb	r3, [r3, #3]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	2200      	movs	r2, #0
 80028de:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	4619      	mov	r1, r3
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f005 fa8e 	bl	8007e08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	015a      	lsls	r2, r3, #5
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028f8:	461a      	mov	r2, r3
 80028fa:	2302      	movs	r3, #2
 80028fc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002908:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 fcdb 	bl	80032c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002912:	3301      	adds	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002918:	085b      	lsrs	r3, r3, #1
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291e:	2b00      	cmp	r3, #0
 8002920:	f47f af2e 	bne.w	8002780 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4618      	mov	r0, r3
 800292a:	f002 fedb 	bl	80056e4 <USB_ReadInterrupts>
 800292e:	4603      	mov	r3, r0
 8002930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002938:	d122      	bne.n	8002980 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	69fa      	ldr	r2, [r7, #28]
 8002944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002954:	2b01      	cmp	r3, #1
 8002956:	d108      	bne.n	800296a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002960:	2100      	movs	r1, #0
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 fec2 	bl	80036ec <HAL_PCDEx_LPM_Callback>
 8002968:	e002      	b.n	8002970 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f005 fa2c 	bl	8007dc8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800297e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4618      	mov	r0, r3
 8002986:	f002 fead 	bl	80056e4 <USB_ReadInterrupts>
 800298a:	4603      	mov	r3, r0
 800298c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002990:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002994:	d112      	bne.n	80029bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 0301 	and.w	r3, r3, #1
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d102      	bne.n	80029ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f005 f9e8 	bl	8007d7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80029ba:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fe8f 	bl	80056e4 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d0:	f040 80b7 	bne.w	8002b42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2110      	movs	r1, #16
 80029ee:	4618      	mov	r0, r3
 80029f0:	f001 fe56 	bl	80046a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029f4:	2300      	movs	r3, #0
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f8:	e046      	b.n	8002a88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	015a      	lsls	r2, r3, #5
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	4413      	add	r3, r2
 8002a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a06:	461a      	mov	r2, r3
 8002a08:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	015a      	lsls	r2, r3, #5
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a1e:	0151      	lsls	r1, r2, #5
 8002a20:	69fa      	ldr	r2, [r7, #28]
 8002a22:	440a      	add	r2, r1
 8002a24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002a28:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	015a      	lsls	r2, r3, #5
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	4413      	add	r3, r2
 8002a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002a40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a44:	015a      	lsls	r2, r3, #5
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	4413      	add	r3, r2
 8002a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	0151      	lsls	r1, r2, #5
 8002a54:	69fa      	ldr	r2, [r7, #28]
 8002a56:	440a      	add	r2, r1
 8002a58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002a60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a64:	015a      	lsls	r2, r3, #5
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	4413      	add	r3, r2
 8002a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a72:	0151      	lsls	r1, r2, #5
 8002a74:	69fa      	ldr	r2, [r7, #28]
 8002a76:	440a      	add	r2, r1
 8002a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002a7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002a80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a84:	3301      	adds	r3, #1
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d3b3      	bcc.n	80029fa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	69fa      	ldr	r2, [r7, #28]
 8002a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aa0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002aa4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d016      	beq.n	8002adc <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ab8:	69fa      	ldr	r2, [r7, #28]
 8002aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002abe:	f043 030b 	orr.w	r3, r3, #11
 8002ac2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ace:	69fa      	ldr	r2, [r7, #28]
 8002ad0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ad4:	f043 030b 	orr.w	r3, r3, #11
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	e015      	b.n	8002b08 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	69fa      	ldr	r2, [r7, #28]
 8002ae6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002aea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002aee:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002af2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	69fa      	ldr	r2, [r7, #28]
 8002afe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b02:	f043 030b 	orr.w	r3, r3, #11
 8002b06:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b16:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002b1a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6818      	ldr	r0, [r3, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	f002 fe9d 	bl	800586c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695a      	ldr	r2, [r3, #20]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002b40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f002 fdcc 	bl	80056e4 <USB_ReadInterrupts>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b56:	d124      	bne.n	8002ba2 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f002 fe62 	bl	8005826 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4618      	mov	r0, r3
 8002b68:	f001 fe17 	bl	800479a <USB_GetDevSpeed>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	461a      	mov	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681c      	ldr	r4, [r3, #0]
 8002b78:	f001 fa28 	bl	8003fcc <HAL_RCC_GetHCLKFreq>
 8002b7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002b82:	b2db      	uxtb	r3, r3
 8002b84:	461a      	mov	r2, r3
 8002b86:	4620      	mov	r0, r4
 8002b88:	f001 fb16 	bl	80041b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f005 f8cc 	bl	8007d2a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695a      	ldr	r2, [r3, #20]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f002 fd9c 	bl	80056e4 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d10a      	bne.n	8002bcc <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f005 f8a9 	bl	8007d0e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	695a      	ldr	r2, [r3, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f002 0208 	and.w	r2, r2, #8
 8002bca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f002 fd87 	bl	80056e4 <USB_ReadInterrupts>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d122      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002bec:	2301      	movs	r3, #1
 8002bee:	627b      	str	r3, [r7, #36]	; 0x24
 8002bf0:	e014      	b.n	8002c1c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	00db      	lsls	r3, r3, #3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d105      	bne.n	8002c16 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	4619      	mov	r1, r3
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fb27 	bl	8003264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c18:	3301      	adds	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d3e5      	bcc.n	8002bf2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f002 fd5a 	bl	80056e4 <USB_ReadInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c3a:	d13b      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002c40:	e02b      	b.n	8002c9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	015a      	lsls	r2, r3, #5
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	3340      	adds	r3, #64	; 0x40
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d115      	bne.n	8002c94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002c68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	da12      	bge.n	8002c94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	4613      	mov	r3, r2
 8002c74:	00db      	lsls	r3, r3, #3
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	333f      	adds	r3, #63	; 0x3f
 8002c7e:	2201      	movs	r2, #1
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 fae8 	bl	8003264 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d3ce      	bcc.n	8002c42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002cb2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f002 fd13 	bl	80056e4 <USB_ReadInterrupts>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cc8:	d155      	bne.n	8002d76 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002cca:	2301      	movs	r3, #1
 8002ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8002cce:	e045      	b.n	8002d5c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	4413      	add	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	440b      	add	r3, r1
 8002cee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d12e      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002cf8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	da2b      	bge.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002d0a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d121      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	695b      	ldr	r3, [r3, #20]
 8002d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10a      	bne.n	8002d56 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	69fa      	ldr	r2, [r7, #28]
 8002d4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	6053      	str	r3, [r2, #4]
            break;
 8002d54:	e007      	b.n	8002d66 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d58:	3301      	adds	r3, #1
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d3b4      	bcc.n	8002cd0 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695a      	ldr	r2, [r3, #20]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d74:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f002 fcb2 	bl	80056e4 <USB_ReadInterrupts>
 8002d80:	4603      	mov	r3, r0
 8002d82:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8a:	d10a      	bne.n	8002da2 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f005 f84d 	bl	8007e2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695a      	ldr	r2, [r3, #20]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002da0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f002 fc9c 	bl	80056e4 <USB_ReadInterrupts>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f003 0304 	and.w	r3, r3, #4
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d115      	bne.n	8002de2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f005 f83d 	bl	8007e48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6859      	ldr	r1, [r3, #4]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	605a      	str	r2, [r3, #4]
 8002dde:	e000      	b.n	8002de2 <HAL_PCD_IRQHandler+0x938>
      return;
 8002de0:	bf00      	nop
    }
  }
}
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd90      	pop	{r4, r7, pc}

08002de8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	460b      	mov	r3, r1
 8002df2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_PCD_SetAddress+0x1a>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e013      	b.n	8002e2a <HAL_PCD_SetAddress+0x42>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2201      	movs	r2, #1
 8002e06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	78fa      	ldrb	r2, [r7, #3]
 8002e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f002 fbfa 	bl	8005614 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3708      	adds	r7, #8
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}

08002e32 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b084      	sub	sp, #16
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
 8002e3a:	4608      	mov	r0, r1
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4603      	mov	r3, r0
 8002e42:	70fb      	strb	r3, [r7, #3]
 8002e44:	460b      	mov	r3, r1
 8002e46:	803b      	strh	r3, [r7, #0]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002e50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da0f      	bge.n	8002e78 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	f003 020f 	and.w	r2, r3, #15
 8002e5e:	4613      	mov	r3, r2
 8002e60:	00db      	lsls	r3, r3, #3
 8002e62:	4413      	add	r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	3338      	adds	r3, #56	; 0x38
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	705a      	strb	r2, [r3, #1]
 8002e76:	e00f      	b.n	8002e98 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	f003 020f 	and.w	r2, r3, #15
 8002e7e:	4613      	mov	r3, r2
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3304      	adds	r3, #4
 8002e90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002e98:	78fb      	ldrb	r3, [r7, #3]
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002ea4:	883a      	ldrh	r2, [r7, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	78ba      	ldrb	r2, [r7, #2]
 8002eae:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	785b      	ldrb	r3, [r3, #1]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002ec2:	78bb      	ldrb	r3, [r7, #2]
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d102      	bne.n	8002ece <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_PCD_EP_Open+0xaa>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e00e      	b.n	8002efa <HAL_PCD_EP_Open+0xc8>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	68f9      	ldr	r1, [r7, #12]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f001 fc7a 	bl	80047e4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002ef8:	7afb      	ldrb	r3, [r7, #11]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b084      	sub	sp, #16
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	da0f      	bge.n	8002f36 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f16:	78fb      	ldrb	r3, [r7, #3]
 8002f18:	f003 020f 	and.w	r2, r3, #15
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	00db      	lsls	r3, r3, #3
 8002f20:	4413      	add	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	3338      	adds	r3, #56	; 0x38
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	4413      	add	r3, r2
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	2201      	movs	r2, #1
 8002f32:	705a      	strb	r2, [r3, #1]
 8002f34:	e00f      	b.n	8002f56 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	f003 020f 	and.w	r2, r3, #15
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	00db      	lsls	r3, r3, #3
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3304      	adds	r3, #4
 8002f4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2200      	movs	r2, #0
 8002f54:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	f003 030f 	and.w	r3, r3, #15
 8002f5c:	b2da      	uxtb	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_PCD_EP_Close+0x6e>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e00e      	b.n	8002f8e <HAL_PCD_EP_Close+0x8c>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68f9      	ldr	r1, [r7, #12]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f001 fcb8 	bl	80048f4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b086      	sub	sp, #24
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	607a      	str	r2, [r7, #4]
 8002fa0:	603b      	str	r3, [r7, #0]
 8002fa2:	460b      	mov	r3, r1
 8002fa4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fa6:	7afb      	ldrb	r3, [r7, #11]
 8002fa8:	f003 020f 	and.w	r2, r3, #15
 8002fac:	4613      	mov	r3, r2
 8002fae:	00db      	lsls	r3, r3, #3
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	4413      	add	r3, r2
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002fd8:	7afb      	ldrb	r3, [r7, #11]
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ff2:	7afb      	ldrb	r3, [r7, #11]
 8002ff4:	f003 030f 	and.w	r3, r3, #15
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d109      	bne.n	8003010 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6818      	ldr	r0, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	461a      	mov	r2, r3
 8003008:	6979      	ldr	r1, [r7, #20]
 800300a:	f001 ff97 	bl	8004f3c <USB_EP0StartXfer>
 800300e:	e008      	b.n	8003022 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6818      	ldr	r0, [r3, #0]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	b2db      	uxtb	r3, r3
 800301a:	461a      	mov	r2, r3
 800301c:	6979      	ldr	r1, [r7, #20]
 800301e:	f001 fd45 	bl	8004aac <USB_EPStartXfer>
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003038:	78fb      	ldrb	r3, [r7, #3]
 800303a:	f003 020f 	and.w	r2, r3, #15
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4413      	add	r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800304e:	681b      	ldr	r3, [r3, #0]
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b086      	sub	sp, #24
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	607a      	str	r2, [r7, #4]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	460b      	mov	r3, r1
 800306a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800306c:	7afb      	ldrb	r3, [r7, #11]
 800306e:	f003 020f 	and.w	r2, r3, #15
 8003072:	4613      	mov	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	3338      	adds	r3, #56	; 0x38
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	2200      	movs	r2, #0
 8003094:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	2201      	movs	r2, #1
 800309a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800309c:	7afb      	ldrb	r3, [r7, #11]
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d102      	bne.n	80030b6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	f003 030f 	and.w	r3, r3, #15
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d109      	bne.n	80030d4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6818      	ldr	r0, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	461a      	mov	r2, r3
 80030cc:	6979      	ldr	r1, [r7, #20]
 80030ce:	f001 ff35 	bl	8004f3c <USB_EP0StartXfer>
 80030d2:	e008      	b.n	80030e6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	461a      	mov	r2, r3
 80030e0:	6979      	ldr	r1, [r7, #20]
 80030e2:	f001 fce3 	bl	8004aac <USB_EPStartXfer>
  }

  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	460b      	mov	r3, r1
 80030fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80030fc:	78fb      	ldrb	r3, [r7, #3]
 80030fe:	f003 020f 	and.w	r2, r3, #15
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	429a      	cmp	r2, r3
 8003108:	d901      	bls.n	800310e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e050      	b.n	80031b0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800310e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003112:	2b00      	cmp	r3, #0
 8003114:	da0f      	bge.n	8003136 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	f003 020f 	and.w	r2, r3, #15
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	3338      	adds	r3, #56	; 0x38
 8003126:	687a      	ldr	r2, [r7, #4]
 8003128:	4413      	add	r3, r2
 800312a:	3304      	adds	r3, #4
 800312c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2201      	movs	r2, #1
 8003132:	705a      	strb	r2, [r3, #1]
 8003134:	e00d      	b.n	8003152 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	4613      	mov	r3, r2
 800313a:	00db      	lsls	r3, r3, #3
 800313c:	4413      	add	r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	4413      	add	r3, r2
 8003148:	3304      	adds	r3, #4
 800314a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2200      	movs	r2, #0
 8003150:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2201      	movs	r2, #1
 8003156:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	b2da      	uxtb	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_PCD_EP_SetStall+0x82>
 800316e:	2302      	movs	r3, #2
 8003170:	e01e      	b.n	80031b0 <HAL_PCD_EP_SetStall+0xc0>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68f9      	ldr	r1, [r7, #12]
 8003180:	4618      	mov	r0, r3
 8003182:	f002 f973 	bl	800546c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003186:	78fb      	ldrb	r3, [r7, #3]
 8003188:	f003 030f 	and.w	r3, r3, #15
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10a      	bne.n	80031a6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6818      	ldr	r0, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	b2d9      	uxtb	r1, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80031a0:	461a      	mov	r2, r3
 80031a2:	f002 fb63 	bl	800586c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b084      	sub	sp, #16
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	460b      	mov	r3, r1
 80031c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	f003 020f 	and.w	r2, r3, #15
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d901      	bls.n	80031d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e042      	b.n	800325c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80031d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	da0f      	bge.n	80031fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031de:	78fb      	ldrb	r3, [r7, #3]
 80031e0:	f003 020f 	and.w	r2, r3, #15
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	3338      	adds	r3, #56	; 0x38
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	4413      	add	r3, r2
 80031f2:	3304      	adds	r3, #4
 80031f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	705a      	strb	r2, [r3, #1]
 80031fc:	e00f      	b.n	800321e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	f003 020f 	and.w	r2, r3, #15
 8003204:	4613      	mov	r3, r2
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	4413      	add	r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	4413      	add	r3, r2
 8003214:	3304      	adds	r3, #4
 8003216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003224:	78fb      	ldrb	r3, [r7, #3]
 8003226:	f003 030f 	and.w	r3, r3, #15
 800322a:	b2da      	uxtb	r2, r3
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_PCD_EP_ClrStall+0x86>
 800323a:	2302      	movs	r3, #2
 800323c:	e00e      	b.n	800325c <HAL_PCD_EP_ClrStall+0xa4>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	68f9      	ldr	r1, [r7, #12]
 800324c:	4618      	mov	r0, r3
 800324e:	f002 f97b 	bl	8005548 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	460b      	mov	r3, r1
 800326e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003270:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003274:	2b00      	cmp	r3, #0
 8003276:	da0c      	bge.n	8003292 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	f003 020f 	and.w	r2, r3, #15
 800327e:	4613      	mov	r3, r2
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	4413      	add	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	3338      	adds	r3, #56	; 0x38
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4413      	add	r3, r2
 800328c:	3304      	adds	r3, #4
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e00c      	b.n	80032ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	f003 020f 	and.w	r2, r3, #15
 8003298:	4613      	mov	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	4413      	add	r3, r2
 80032a8:	3304      	adds	r3, #4
 80032aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68f9      	ldr	r1, [r7, #12]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f001 ff9a 	bl	80051ec <USB_EPStopXfer>
 80032b8:	4603      	mov	r3, r0
 80032ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80032bc:	7afb      	ldrb	r3, [r7, #11]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b08a      	sub	sp, #40	; 0x28
 80032ca:	af02      	add	r7, sp, #8
 80032cc:	6078      	str	r0, [r7, #4]
 80032ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	4413      	add	r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	3338      	adds	r3, #56	; 0x38
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	4413      	add	r3, r2
 80032ea:	3304      	adds	r3, #4
 80032ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6a1a      	ldr	r2, [r3, #32]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	d901      	bls.n	80032fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06c      	b.n	80033d8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	69fa      	ldr	r2, [r7, #28]
 8003310:	429a      	cmp	r2, r3
 8003312:	d902      	bls.n	800331a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	3303      	adds	r3, #3
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003322:	e02b      	b.n	800337c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	69fa      	ldr	r2, [r7, #28]
 8003336:	429a      	cmp	r2, r3
 8003338:	d902      	bls.n	8003340 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	3303      	adds	r3, #3
 8003344:	089b      	lsrs	r3, r3, #2
 8003346:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6919      	ldr	r1, [r3, #16]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	b2da      	uxtb	r2, r3
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003358:	b2db      	uxtb	r3, r3
 800335a:	9300      	str	r3, [sp, #0]
 800335c:	4603      	mov	r3, r0
 800335e:	6978      	ldr	r0, [r7, #20]
 8003360:	f001 ffee 	bl	8005340 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691a      	ldr	r2, [r3, #16]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	441a      	add	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6a1a      	ldr	r2, [r3, #32]
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	441a      	add	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	b29b      	uxth	r3, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	429a      	cmp	r2, r3
 8003390:	d809      	bhi.n	80033a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800339a:	429a      	cmp	r2, r3
 800339c:	d203      	bcs.n	80033a6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d1be      	bne.n	8003324 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	699a      	ldr	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a1b      	ldr	r3, [r3, #32]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d811      	bhi.n	80033d6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	2201      	movs	r2, #1
 80033ba:	fa02 f303 	lsl.w	r3, r2, r3
 80033be:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	43db      	mvns	r3, r3
 80033cc:	6939      	ldr	r1, [r7, #16]
 80033ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033d2:	4013      	ands	r3, r2
 80033d4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3720      	adds	r7, #32
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b088      	sub	sp, #32
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	333c      	adds	r3, #60	; 0x3c
 80033f8:	3304      	adds	r3, #4
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	015a      	lsls	r2, r3, #5
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	4413      	add	r3, r2
 8003406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d17b      	bne.n	800350e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d015      	beq.n	800344c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	4a61      	ldr	r2, [pc, #388]	; (80035a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003424:	4293      	cmp	r3, r2
 8003426:	f240 80b9 	bls.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003430:	2b00      	cmp	r3, #0
 8003432:	f000 80b3 	beq.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	015a      	lsls	r2, r3, #5
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	4413      	add	r3, r2
 800343e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003442:	461a      	mov	r2, r3
 8003444:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003448:	6093      	str	r3, [r2, #8]
 800344a:	e0a7      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	f003 0320 	and.w	r3, r3, #32
 8003452:	2b00      	cmp	r3, #0
 8003454:	d009      	beq.n	800346a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	015a      	lsls	r2, r3, #5
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	4413      	add	r3, r2
 800345e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003462:	461a      	mov	r2, r3
 8003464:	2320      	movs	r3, #32
 8003466:	6093      	str	r3, [r2, #8]
 8003468:	e098      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	f040 8093 	bne.w	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	4a4b      	ldr	r2, [pc, #300]	; (80035a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d90f      	bls.n	800349e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	015a      	lsls	r2, r3, #5
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	4413      	add	r3, r2
 8003490:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003494:	461a      	mov	r2, r3
 8003496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349a:	6093      	str	r3, [r2, #8]
 800349c:	e07e      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800349e:	683a      	ldr	r2, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	00db      	lsls	r3, r3, #3
 80034a4:	4413      	add	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	4413      	add	r3, r2
 80034b0:	3304      	adds	r3, #4
 80034b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	0159      	lsls	r1, r3, #5
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	440b      	add	r3, r1
 80034c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ca:	1ad2      	subs	r2, r2, r3
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d109      	bne.n	80034f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6818      	ldr	r0, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034e8:	461a      	mov	r2, r3
 80034ea:	2101      	movs	r1, #1
 80034ec:	f002 f9be 	bl	800586c <USB_EP0_OutStart>
 80034f0:	e006      	b.n	8003500 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	441a      	add	r2, r3
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	4619      	mov	r1, r3
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f004 fbcc 	bl	8007ca4 <HAL_PCD_DataOutStageCallback>
 800350c:	e046      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800350e:	697b      	ldr	r3, [r7, #20]
 8003510:	4a26      	ldr	r2, [pc, #152]	; (80035ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d124      	bne.n	8003560 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352c:	461a      	mov	r2, r3
 800352e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003532:	6093      	str	r3, [r2, #8]
 8003534:	e032      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	f003 0320 	and.w	r3, r3, #32
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800354c:	461a      	mov	r2, r3
 800354e:	2320      	movs	r3, #32
 8003550:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	b2db      	uxtb	r3, r3
 8003556:	4619      	mov	r1, r3
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f004 fba3 	bl	8007ca4 <HAL_PCD_DataOutStageCallback>
 800355e:	e01d      	b.n	800359c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d114      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d108      	bne.n	8003590 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003588:	461a      	mov	r2, r3
 800358a:	2100      	movs	r1, #0
 800358c:	f002 f96e 	bl	800586c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	b2db      	uxtb	r3, r3
 8003594:	4619      	mov	r1, r3
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f004 fb84 	bl	8007ca4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800359c:	2300      	movs	r3, #0
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3720      	adds	r7, #32
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	4f54300a 	.word	0x4f54300a
 80035ac:	4f54310a 	.word	0x4f54310a

080035b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	333c      	adds	r3, #60	; 0x3c
 80035c8:	3304      	adds	r3, #4
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	4a15      	ldr	r2, [pc, #84]	; (8003638 <PCD_EP_OutSetupPacket_int+0x88>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d90e      	bls.n	8003604 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003602:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f004 fb3b 	bl	8007c80 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <PCD_EP_OutSetupPacket_int+0x88>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d90c      	bls.n	800362c <PCD_EP_OutSetupPacket_int+0x7c>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d108      	bne.n	800362c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003624:	461a      	mov	r2, r3
 8003626:	2101      	movs	r1, #1
 8003628:	f002 f920 	bl	800586c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	4f54300a 	.word	0x4f54300a

0800363c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
 8003648:	4613      	mov	r3, r2
 800364a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003652:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003654:	78fb      	ldrb	r3, [r7, #3]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d107      	bne.n	800366a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800365a:	883b      	ldrh	r3, [r7, #0]
 800365c:	0419      	lsls	r1, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68ba      	ldr	r2, [r7, #8]
 8003664:	430a      	orrs	r2, r1
 8003666:	629a      	str	r2, [r3, #40]	; 0x28
 8003668:	e028      	b.n	80036bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003670:	0c1b      	lsrs	r3, r3, #16
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	4413      	add	r3, r2
 8003676:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003678:	2300      	movs	r3, #0
 800367a:	73fb      	strb	r3, [r7, #15]
 800367c:	e00d      	b.n	800369a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	7bfb      	ldrb	r3, [r7, #15]
 8003684:	3340      	adds	r3, #64	; 0x40
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	4413      	add	r3, r2
 8003692:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003694:	7bfb      	ldrb	r3, [r7, #15]
 8003696:	3301      	adds	r3, #1
 8003698:	73fb      	strb	r3, [r7, #15]
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	78fb      	ldrb	r3, [r7, #3]
 800369e:	3b01      	subs	r3, #1
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d3ec      	bcc.n	800367e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80036a4:	883b      	ldrh	r3, [r7, #0]
 80036a6:	0418      	lsls	r0, r3, #16
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6819      	ldr	r1, [r3, #0]
 80036ac:	78fb      	ldrb	r3, [r7, #3]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	4302      	orrs	r2, r0
 80036b4:	3340      	adds	r3, #64	; 0x40
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr

080036ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
 80036d2:	460b      	mov	r3, r1
 80036d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	460b      	mov	r3, r1
 80036f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b086      	sub	sp, #24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d101      	bne.n	8003716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e267      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d075      	beq.n	800380e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003722:	4b88      	ldr	r3, [pc, #544]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	f003 030c 	and.w	r3, r3, #12
 800372a:	2b04      	cmp	r3, #4
 800372c:	d00c      	beq.n	8003748 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800372e:	4b85      	ldr	r3, [pc, #532]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003736:	2b08      	cmp	r3, #8
 8003738:	d112      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800373a:	4b82      	ldr	r3, [pc, #520]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003742:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003746:	d10b      	bne.n	8003760 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003748:	4b7e      	ldr	r3, [pc, #504]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d05b      	beq.n	800380c <HAL_RCC_OscConfig+0x108>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d157      	bne.n	800380c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e242      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003768:	d106      	bne.n	8003778 <HAL_RCC_OscConfig+0x74>
 800376a:	4b76      	ldr	r3, [pc, #472]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a75      	ldr	r2, [pc, #468]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003774:	6013      	str	r3, [r2, #0]
 8003776:	e01d      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	685b      	ldr	r3, [r3, #4]
 800377c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003780:	d10c      	bne.n	800379c <HAL_RCC_OscConfig+0x98>
 8003782:	4b70      	ldr	r3, [pc, #448]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a6f      	ldr	r2, [pc, #444]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003788:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800378c:	6013      	str	r3, [r2, #0]
 800378e:	4b6d      	ldr	r3, [pc, #436]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a6c      	ldr	r2, [pc, #432]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003798:	6013      	str	r3, [r2, #0]
 800379a:	e00b      	b.n	80037b4 <HAL_RCC_OscConfig+0xb0>
 800379c:	4b69      	ldr	r3, [pc, #420]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a68      	ldr	r2, [pc, #416]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	4b66      	ldr	r3, [pc, #408]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a65      	ldr	r2, [pc, #404]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d013      	beq.n	80037e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fd fe12 	bl	80013e4 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fd fe0e 	bl	80013e4 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e207      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d6:	4b5b      	ldr	r3, [pc, #364]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d0f0      	beq.n	80037c4 <HAL_RCC_OscConfig+0xc0>
 80037e2:	e014      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fd fdfe 	bl	80013e4 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ec:	f7fd fdfa 	bl	80013e4 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b64      	cmp	r3, #100	; 0x64
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e1f3      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037fe:	4b51      	ldr	r3, [pc, #324]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0xe8>
 800380a:	e000      	b.n	800380e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d063      	beq.n	80038e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800381a:	4b4a      	ldr	r3, [pc, #296]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 030c 	and.w	r3, r3, #12
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00b      	beq.n	800383e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800382e:	2b08      	cmp	r3, #8
 8003830:	d11c      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003832:	4b44      	ldr	r3, [pc, #272]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d116      	bne.n	800386c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383e:	4b41      	ldr	r3, [pc, #260]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d005      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d001      	beq.n	8003856 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e1c7      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b3b      	ldr	r3, [pc, #236]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	00db      	lsls	r3, r3, #3
 8003864:	4937      	ldr	r1, [pc, #220]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003866:	4313      	orrs	r3, r2
 8003868:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800386a:	e03a      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d020      	beq.n	80038b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003874:	4b34      	ldr	r3, [pc, #208]	; (8003948 <HAL_RCC_OscConfig+0x244>)
 8003876:	2201      	movs	r2, #1
 8003878:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387a:	f7fd fdb3 	bl	80013e4 <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003882:	f7fd fdaf 	bl	80013e4 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e1a8      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003894:	4b2b      	ldr	r3, [pc, #172]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038a0:	4b28      	ldr	r3, [pc, #160]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	00db      	lsls	r3, r3, #3
 80038ae:	4925      	ldr	r1, [pc, #148]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038b0:	4313      	orrs	r3, r2
 80038b2:	600b      	str	r3, [r1, #0]
 80038b4:	e015      	b.n	80038e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038b6:	4b24      	ldr	r3, [pc, #144]	; (8003948 <HAL_RCC_OscConfig+0x244>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fd fd92 	bl	80013e4 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038c4:	f7fd fd8e 	bl	80013e4 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e187      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1f0      	bne.n	80038c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d036      	beq.n	800395c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d016      	beq.n	8003924 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_RCC_OscConfig+0x248>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fd fd72 	bl	80013e4 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003904:	f7fd fd6e 	bl	80013e4 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e167      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_OscConfig+0x240>)
 8003918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0f0      	beq.n	8003904 <HAL_RCC_OscConfig+0x200>
 8003922:	e01b      	b.n	800395c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003924:	4b09      	ldr	r3, [pc, #36]	; (800394c <HAL_RCC_OscConfig+0x248>)
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800392a:	f7fd fd5b 	bl	80013e4 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	e00e      	b.n	8003950 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003932:	f7fd fd57 	bl	80013e4 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d907      	bls.n	8003950 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e150      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003944:	40023800 	.word	0x40023800
 8003948:	42470000 	.word	0x42470000
 800394c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003950:	4b88      	ldr	r3, [pc, #544]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1ea      	bne.n	8003932 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8097 	beq.w	8003a98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800396a:	2300      	movs	r3, #0
 800396c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800396e:	4b81      	ldr	r3, [pc, #516]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10f      	bne.n	800399a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800397a:	2300      	movs	r3, #0
 800397c:	60bb      	str	r3, [r7, #8]
 800397e:	4b7d      	ldr	r3, [pc, #500]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	4a7c      	ldr	r2, [pc, #496]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003988:	6413      	str	r3, [r2, #64]	; 0x40
 800398a:	4b7a      	ldr	r3, [pc, #488]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003992:	60bb      	str	r3, [r7, #8]
 8003994:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003996:	2301      	movs	r3, #1
 8003998:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399a:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d118      	bne.n	80039d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039a6:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a73      	ldr	r2, [pc, #460]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039b2:	f7fd fd17 	bl	80013e4 <HAL_GetTick>
 80039b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039b8:	e008      	b.n	80039cc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ba:	f7fd fd13 	bl	80013e4 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d901      	bls.n	80039cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80039c8:	2303      	movs	r3, #3
 80039ca:	e10c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039cc:	4b6a      	ldr	r3, [pc, #424]	; (8003b78 <HAL_RCC_OscConfig+0x474>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d0f0      	beq.n	80039ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d106      	bne.n	80039ee <HAL_RCC_OscConfig+0x2ea>
 80039e0:	4b64      	ldr	r3, [pc, #400]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	4a63      	ldr	r2, [pc, #396]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	; 0x70
 80039ec:	e01c      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2b05      	cmp	r3, #5
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x30c>
 80039f6:	4b5f      	ldr	r3, [pc, #380]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fa:	4a5e      	ldr	r2, [pc, #376]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	6713      	str	r3, [r2, #112]	; 0x70
 8003a02:	4b5c      	ldr	r3, [pc, #368]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	4a5b      	ldr	r2, [pc, #364]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0x324>
 8003a10:	4b58      	ldr	r3, [pc, #352]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a14:	4a57      	ldr	r2, [pc, #348]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a16:	f023 0301 	bic.w	r3, r3, #1
 8003a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a1c:	4b55      	ldr	r3, [pc, #340]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a20:	4a54      	ldr	r2, [pc, #336]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a22:	f023 0304 	bic.w	r3, r3, #4
 8003a26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d015      	beq.n	8003a5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a30:	f7fd fcd8 	bl	80013e4 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a36:	e00a      	b.n	8003a4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a38:	f7fd fcd4 	bl	80013e4 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e0cb      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4e:	4b49      	ldr	r3, [pc, #292]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0ee      	beq.n	8003a38 <HAL_RCC_OscConfig+0x334>
 8003a5a:	e014      	b.n	8003a86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5c:	f7fd fcc2 	bl	80013e4 <HAL_GetTick>
 8003a60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a62:	e00a      	b.n	8003a7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a64:	f7fd fcbe 	bl	80013e4 <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e0b5      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a7a:	4b3e      	ldr	r3, [pc, #248]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	f003 0302 	and.w	r3, r3, #2
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1ee      	bne.n	8003a64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a86:	7dfb      	ldrb	r3, [r7, #23]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d105      	bne.n	8003a98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8c:	4b39      	ldr	r3, [pc, #228]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a90:	4a38      	ldr	r2, [pc, #224]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	f000 80a1 	beq.w	8003be4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003aa2:	4b34      	ldr	r3, [pc, #208]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d05c      	beq.n	8003b68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	699b      	ldr	r3, [r3, #24]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d141      	bne.n	8003b3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab6:	4b31      	ldr	r3, [pc, #196]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003abc:	f7fd fc92 	bl	80013e4 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ac4:	f7fd fc8e 	bl	80013e4 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e087      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	4b27      	ldr	r3, [pc, #156]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f0      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69da      	ldr	r2, [r3, #28]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	431a      	orrs	r2, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	019b      	lsls	r3, r3, #6
 8003af2:	431a      	orrs	r2, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	041b      	lsls	r3, r3, #16
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	491b      	ldr	r1, [pc, #108]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b0e:	2201      	movs	r2, #1
 8003b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b12:	f7fd fc67 	bl	80013e4 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b18:	e008      	b.n	8003b2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b1a:	f7fd fc63 	bl	80013e4 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d901      	bls.n	8003b2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003b28:	2303      	movs	r3, #3
 8003b2a:	e05c      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b2c:	4b11      	ldr	r3, [pc, #68]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d0f0      	beq.n	8003b1a <HAL_RCC_OscConfig+0x416>
 8003b38:	e054      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b3a:	4b10      	ldr	r3, [pc, #64]	; (8003b7c <HAL_RCC_OscConfig+0x478>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b40:	f7fd fc50 	bl	80013e4 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b46:	e008      	b.n	8003b5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b48:	f7fd fc4c 	bl	80013e4 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d901      	bls.n	8003b5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e045      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <HAL_RCC_OscConfig+0x470>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1f0      	bne.n	8003b48 <HAL_RCC_OscConfig+0x444>
 8003b66:	e03d      	b.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e038      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
 8003b74:	40023800 	.word	0x40023800
 8003b78:	40007000 	.word	0x40007000
 8003b7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <HAL_RCC_OscConfig+0x4ec>)
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d028      	beq.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d121      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d11a      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003bb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d111      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e000      	b.n	8003be6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800

08003bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e0cc      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c08:	4b68      	ldr	r3, [pc, #416]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0307 	and.w	r3, r3, #7
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d90c      	bls.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c16:	4b65      	ldr	r3, [pc, #404]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	683a      	ldr	r2, [r7, #0]
 8003c1a:	b2d2      	uxtb	r2, r2
 8003c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c1e:	4b63      	ldr	r3, [pc, #396]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0307 	and.w	r3, r3, #7
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d001      	beq.n	8003c30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0b8      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d020      	beq.n	8003c7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c48:	4b59      	ldr	r3, [pc, #356]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	4a58      	ldr	r2, [pc, #352]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c52:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d005      	beq.n	8003c6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c60:	4b53      	ldr	r3, [pc, #332]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	4a52      	ldr	r2, [pc, #328]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c66:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6c:	4b50      	ldr	r3, [pc, #320]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	494d      	ldr	r1, [pc, #308]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d044      	beq.n	8003d14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d107      	bne.n	8003ca2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c92:	4b47      	ldr	r3, [pc, #284]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d119      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e07f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d107      	bne.n	8003cc2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cb2:	4b3f      	ldr	r3, [pc, #252]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d109      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e06f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc2:	4b3b      	ldr	r3, [pc, #236]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d101      	bne.n	8003cd2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e067      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cd2:	4b37      	ldr	r3, [pc, #220]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f023 0203 	bic.w	r2, r3, #3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	4934      	ldr	r1, [pc, #208]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ce4:	f7fd fb7e 	bl	80013e4 <HAL_GetTick>
 8003ce8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cea:	e00a      	b.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cec:	f7fd fb7a 	bl	80013e4 <HAL_GetTick>
 8003cf0:	4602      	mov	r2, r0
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d901      	bls.n	8003d02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e04f      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d02:	4b2b      	ldr	r3, [pc, #172]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 020c 	and.w	r2, r3, #12
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d1eb      	bne.n	8003cec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d14:	4b25      	ldr	r3, [pc, #148]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d20c      	bcs.n	8003d3c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d22:	4b22      	ldr	r3, [pc, #136]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d24:	683a      	ldr	r2, [r7, #0]
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d2a:	4b20      	ldr	r3, [pc, #128]	; (8003dac <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0307 	and.w	r3, r3, #7
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d001      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e032      	b.n	8003da2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0304 	and.w	r3, r3, #4
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d48:	4b19      	ldr	r3, [pc, #100]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	4916      	ldr	r1, [pc, #88]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d66:	4b12      	ldr	r3, [pc, #72]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	490e      	ldr	r1, [pc, #56]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d76:	4313      	orrs	r3, r2
 8003d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003d7a:	f000 f821 	bl	8003dc0 <HAL_RCC_GetSysClockFreq>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	4b0b      	ldr	r3, [pc, #44]	; (8003db0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	091b      	lsrs	r3, r3, #4
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	490a      	ldr	r1, [pc, #40]	; (8003db4 <HAL_RCC_ClockConfig+0x1c0>)
 8003d8c:	5ccb      	ldrb	r3, [r1, r3]
 8003d8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d92:	4a09      	ldr	r2, [pc, #36]	; (8003db8 <HAL_RCC_ClockConfig+0x1c4>)
 8003d94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003d96:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <HAL_RCC_ClockConfig+0x1c8>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fd fade 	bl	800135c <HAL_InitTick>

  return HAL_OK;
 8003da0:	2300      	movs	r3, #0
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3710      	adds	r7, #16
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40023c00 	.word	0x40023c00
 8003db0:	40023800 	.word	0x40023800
 8003db4:	080082b8 	.word	0x080082b8
 8003db8:	20000000 	.word	0x20000000
 8003dbc:	20000004 	.word	0x20000004

08003dc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dc4:	b094      	sub	sp, #80	; 0x50
 8003dc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	647b      	str	r3, [r7, #68]	; 0x44
 8003dcc:	2300      	movs	r3, #0
 8003dce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dd8:	4b79      	ldr	r3, [pc, #484]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 030c 	and.w	r3, r3, #12
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	d00d      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x40>
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	f200 80e1 	bhi.w	8003fac <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d002      	beq.n	8003df4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d003      	beq.n	8003dfa <HAL_RCC_GetSysClockFreq+0x3a>
 8003df2:	e0db      	b.n	8003fac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b73      	ldr	r3, [pc, #460]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003df6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003df8:	e0db      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dfa:	4b73      	ldr	r3, [pc, #460]	; (8003fc8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dfc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dfe:	e0d8      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e00:	4b6f      	ldr	r3, [pc, #444]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e08:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e0a:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d063      	beq.n	8003ede <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e16:	4b6a      	ldr	r3, [pc, #424]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e20:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e28:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e2e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e32:	4622      	mov	r2, r4
 8003e34:	462b      	mov	r3, r5
 8003e36:	f04f 0000 	mov.w	r0, #0
 8003e3a:	f04f 0100 	mov.w	r1, #0
 8003e3e:	0159      	lsls	r1, r3, #5
 8003e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e44:	0150      	lsls	r0, r2, #5
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4621      	mov	r1, r4
 8003e4c:	1a51      	subs	r1, r2, r1
 8003e4e:	6139      	str	r1, [r7, #16]
 8003e50:	4629      	mov	r1, r5
 8003e52:	eb63 0301 	sbc.w	r3, r3, r1
 8003e56:	617b      	str	r3, [r7, #20]
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e64:	4659      	mov	r1, fp
 8003e66:	018b      	lsls	r3, r1, #6
 8003e68:	4651      	mov	r1, sl
 8003e6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e6e:	4651      	mov	r1, sl
 8003e70:	018a      	lsls	r2, r1, #6
 8003e72:	4651      	mov	r1, sl
 8003e74:	ebb2 0801 	subs.w	r8, r2, r1
 8003e78:	4659      	mov	r1, fp
 8003e7a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e7e:	f04f 0200 	mov.w	r2, #0
 8003e82:	f04f 0300 	mov.w	r3, #0
 8003e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e92:	4690      	mov	r8, r2
 8003e94:	4699      	mov	r9, r3
 8003e96:	4623      	mov	r3, r4
 8003e98:	eb18 0303 	adds.w	r3, r8, r3
 8003e9c:	60bb      	str	r3, [r7, #8]
 8003e9e:	462b      	mov	r3, r5
 8003ea0:	eb49 0303 	adc.w	r3, r9, r3
 8003ea4:	60fb      	str	r3, [r7, #12]
 8003ea6:	f04f 0200 	mov.w	r2, #0
 8003eaa:	f04f 0300 	mov.w	r3, #0
 8003eae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003eb2:	4629      	mov	r1, r5
 8003eb4:	024b      	lsls	r3, r1, #9
 8003eb6:	4621      	mov	r1, r4
 8003eb8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ebc:	4621      	mov	r1, r4
 8003ebe:	024a      	lsls	r2, r1, #9
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003eca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ecc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ed0:	f7fc fd98 	bl	8000a04 <__aeabi_uldivmod>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	460b      	mov	r3, r1
 8003ed8:	4613      	mov	r3, r2
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003edc:	e058      	b.n	8003f90 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ede:	4b38      	ldr	r3, [pc, #224]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	099b      	lsrs	r3, r3, #6
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	4611      	mov	r1, r2
 8003eea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003eee:	623b      	str	r3, [r7, #32]
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ef8:	4642      	mov	r2, r8
 8003efa:	464b      	mov	r3, r9
 8003efc:	f04f 0000 	mov.w	r0, #0
 8003f00:	f04f 0100 	mov.w	r1, #0
 8003f04:	0159      	lsls	r1, r3, #5
 8003f06:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f0a:	0150      	lsls	r0, r2, #5
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4641      	mov	r1, r8
 8003f12:	ebb2 0a01 	subs.w	sl, r2, r1
 8003f16:	4649      	mov	r1, r9
 8003f18:	eb63 0b01 	sbc.w	fp, r3, r1
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003f28:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003f2c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f30:	ebb2 040a 	subs.w	r4, r2, sl
 8003f34:	eb63 050b 	sbc.w	r5, r3, fp
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	f04f 0300 	mov.w	r3, #0
 8003f40:	00eb      	lsls	r3, r5, #3
 8003f42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f46:	00e2      	lsls	r2, r4, #3
 8003f48:	4614      	mov	r4, r2
 8003f4a:	461d      	mov	r5, r3
 8003f4c:	4643      	mov	r3, r8
 8003f4e:	18e3      	adds	r3, r4, r3
 8003f50:	603b      	str	r3, [r7, #0]
 8003f52:	464b      	mov	r3, r9
 8003f54:	eb45 0303 	adc.w	r3, r5, r3
 8003f58:	607b      	str	r3, [r7, #4]
 8003f5a:	f04f 0200 	mov.w	r2, #0
 8003f5e:	f04f 0300 	mov.w	r3, #0
 8003f62:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f66:	4629      	mov	r1, r5
 8003f68:	028b      	lsls	r3, r1, #10
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f70:	4621      	mov	r1, r4
 8003f72:	028a      	lsls	r2, r1, #10
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	61fa      	str	r2, [r7, #28]
 8003f80:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f84:	f7fc fd3e 	bl	8000a04 <__aeabi_uldivmod>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	460b      	mov	r3, r1
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f90:	4b0b      	ldr	r3, [pc, #44]	; (8003fc0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	0c1b      	lsrs	r3, r3, #16
 8003f96:	f003 0303 	and.w	r3, r3, #3
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003faa:	e002      	b.n	8003fb2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fac:	4b05      	ldr	r3, [pc, #20]	; (8003fc4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003fae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003fb0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3750      	adds	r7, #80	; 0x50
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	00f42400 	.word	0x00f42400
 8003fc8:	007a1200 	.word	0x007a1200

08003fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	20000000 	.word	0x20000000

08003fe4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d101      	bne.n	8003ff6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e07b      	b.n	80040ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d108      	bne.n	8004010 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004006:	d009      	beq.n	800401c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	61da      	str	r2, [r3, #28]
 800400e:	e005      	b.n	800401c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d106      	bne.n	800403c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd f8b6 	bl	80011a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004052:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	695b      	ldr	r3, [r3, #20]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	431a      	orrs	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800408c:	431a      	orrs	r2, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004096:	431a      	orrs	r2, r3
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a0:	ea42 0103 	orr.w	r1, r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	0c1b      	lsrs	r3, r3, #16
 80040ba:	f003 0104 	and.w	r1, r3, #4
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	f003 0210 	and.w	r2, r3, #16
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	430a      	orrs	r2, r1
 80040cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69da      	ldr	r2, [r3, #28]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2200      	movs	r2, #0
 80040e2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80040ec:	2300      	movs	r3, #0
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040f6:	b084      	sub	sp, #16
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b084      	sub	sp, #16
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
 8004100:	f107 001c 	add.w	r0, r7, #28
 8004104:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800410a:	2b01      	cmp	r3, #1
 800410c:	d122      	bne.n	8004154 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004112:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004122:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004136:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f001 fbed 	bl	8005928 <USB_CoreReset>
 800414e:	4603      	mov	r3, r0
 8004150:	73fb      	strb	r3, [r7, #15]
 8004152:	e01a      	b.n	800418a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004160:	6878      	ldr	r0, [r7, #4]
 8004162:	f001 fbe1 	bl	8005928 <USB_CoreReset>
 8004166:	4603      	mov	r3, r0
 8004168:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800416a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d106      	bne.n	800417e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38
 800417c:	e005      	b.n	800418a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004182:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10b      	bne.n	80041a8 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f043 0206 	orr.w	r2, r3, #6
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f043 0220 	orr.w	r2, r3, #32
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041b4:	b004      	add	sp, #16
 80041b6:	4770      	bx	lr

080041b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	4613      	mov	r3, r2
 80041c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80041c6:	79fb      	ldrb	r3, [r7, #7]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d165      	bne.n	8004298 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4a41      	ldr	r2, [pc, #260]	; (80042d4 <USB_SetTurnaroundTime+0x11c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d906      	bls.n	80041e2 <USB_SetTurnaroundTime+0x2a>
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	4a40      	ldr	r2, [pc, #256]	; (80042d8 <USB_SetTurnaroundTime+0x120>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d202      	bcs.n	80041e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80041dc:	230f      	movs	r3, #15
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	e062      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	4a3c      	ldr	r2, [pc, #240]	; (80042d8 <USB_SetTurnaroundTime+0x120>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d306      	bcc.n	80041f8 <USB_SetTurnaroundTime+0x40>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4a3b      	ldr	r2, [pc, #236]	; (80042dc <USB_SetTurnaroundTime+0x124>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d202      	bcs.n	80041f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80041f2:	230e      	movs	r3, #14
 80041f4:	617b      	str	r3, [r7, #20]
 80041f6:	e057      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	4a38      	ldr	r2, [pc, #224]	; (80042dc <USB_SetTurnaroundTime+0x124>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d306      	bcc.n	800420e <USB_SetTurnaroundTime+0x56>
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	4a37      	ldr	r2, [pc, #220]	; (80042e0 <USB_SetTurnaroundTime+0x128>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d202      	bcs.n	800420e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004208:	230d      	movs	r3, #13
 800420a:	617b      	str	r3, [r7, #20]
 800420c:	e04c      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4a33      	ldr	r2, [pc, #204]	; (80042e0 <USB_SetTurnaroundTime+0x128>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d306      	bcc.n	8004224 <USB_SetTurnaroundTime+0x6c>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	4a32      	ldr	r2, [pc, #200]	; (80042e4 <USB_SetTurnaroundTime+0x12c>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d802      	bhi.n	8004224 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800421e:	230c      	movs	r3, #12
 8004220:	617b      	str	r3, [r7, #20]
 8004222:	e041      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4a2f      	ldr	r2, [pc, #188]	; (80042e4 <USB_SetTurnaroundTime+0x12c>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d906      	bls.n	800423a <USB_SetTurnaroundTime+0x82>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4a2e      	ldr	r2, [pc, #184]	; (80042e8 <USB_SetTurnaroundTime+0x130>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d802      	bhi.n	800423a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004234:	230b      	movs	r3, #11
 8004236:	617b      	str	r3, [r7, #20]
 8004238:	e036      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	4a2a      	ldr	r2, [pc, #168]	; (80042e8 <USB_SetTurnaroundTime+0x130>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d906      	bls.n	8004250 <USB_SetTurnaroundTime+0x98>
 8004242:	68bb      	ldr	r3, [r7, #8]
 8004244:	4a29      	ldr	r2, [pc, #164]	; (80042ec <USB_SetTurnaroundTime+0x134>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d802      	bhi.n	8004250 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800424a:	230a      	movs	r3, #10
 800424c:	617b      	str	r3, [r7, #20]
 800424e:	e02b      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	4a26      	ldr	r2, [pc, #152]	; (80042ec <USB_SetTurnaroundTime+0x134>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d906      	bls.n	8004266 <USB_SetTurnaroundTime+0xae>
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	4a25      	ldr	r2, [pc, #148]	; (80042f0 <USB_SetTurnaroundTime+0x138>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d202      	bcs.n	8004266 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004260:	2309      	movs	r3, #9
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	e020      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	4a21      	ldr	r2, [pc, #132]	; (80042f0 <USB_SetTurnaroundTime+0x138>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d306      	bcc.n	800427c <USB_SetTurnaroundTime+0xc4>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	4a20      	ldr	r2, [pc, #128]	; (80042f4 <USB_SetTurnaroundTime+0x13c>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d802      	bhi.n	800427c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004276:	2308      	movs	r3, #8
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	e015      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4a1d      	ldr	r2, [pc, #116]	; (80042f4 <USB_SetTurnaroundTime+0x13c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d906      	bls.n	8004292 <USB_SetTurnaroundTime+0xda>
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <USB_SetTurnaroundTime+0x140>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d202      	bcs.n	8004292 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800428c:	2307      	movs	r3, #7
 800428e:	617b      	str	r3, [r7, #20]
 8004290:	e00a      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004292:	2306      	movs	r3, #6
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	e007      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d102      	bne.n	80042a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800429e:	2309      	movs	r3, #9
 80042a0:	617b      	str	r3, [r7, #20]
 80042a2:	e001      	b.n	80042a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80042a4:	2309      	movs	r3, #9
 80042a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68da      	ldr	r2, [r3, #12]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	029b      	lsls	r3, r3, #10
 80042bc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80042c0:	431a      	orrs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	371c      	adds	r7, #28
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr
 80042d4:	00d8acbf 	.word	0x00d8acbf
 80042d8:	00e4e1c0 	.word	0x00e4e1c0
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	01067380 	.word	0x01067380
 80042e4:	011a499f 	.word	0x011a499f
 80042e8:	01312cff 	.word	0x01312cff
 80042ec:	014ca43f 	.word	0x014ca43f
 80042f0:	016e3600 	.word	0x016e3600
 80042f4:	01a6ab1f 	.word	0x01a6ab1f
 80042f8:	01e84800 	.word	0x01e84800

080042fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	f043 0201 	orr.w	r2, r3, #1
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 0201 	bic.w	r2, r3, #1
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004332:	2300      	movs	r3, #0
}
 8004334:	4618      	mov	r0, r3
 8004336:	370c      	adds	r7, #12
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr

08004340 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d115      	bne.n	800438e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800436e:	2001      	movs	r0, #1
 8004370:	f7fd f844 	bl	80013fc <HAL_Delay>
      ms++;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3301      	adds	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 fa45 	bl	800580a <USB_GetMode>
 8004380:	4603      	mov	r3, r0
 8004382:	2b01      	cmp	r3, #1
 8004384:	d01e      	beq.n	80043c4 <USB_SetCurrentMode+0x84>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2b31      	cmp	r3, #49	; 0x31
 800438a:	d9f0      	bls.n	800436e <USB_SetCurrentMode+0x2e>
 800438c:	e01a      	b.n	80043c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800438e:	78fb      	ldrb	r3, [r7, #3]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d115      	bne.n	80043c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68db      	ldr	r3, [r3, #12]
 8004398:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80043a0:	2001      	movs	r0, #1
 80043a2:	f7fd f82b 	bl	80013fc <HAL_Delay>
      ms++;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3301      	adds	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f001 fa2c 	bl	800580a <USB_GetMode>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <USB_SetCurrentMode+0x84>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b31      	cmp	r3, #49	; 0x31
 80043bc:	d9f0      	bls.n	80043a0 <USB_SetCurrentMode+0x60>
 80043be:	e001      	b.n	80043c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e005      	b.n	80043d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2b32      	cmp	r3, #50	; 0x32
 80043c8:	d101      	bne.n	80043ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e000      	b.n	80043d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80043ce:	2300      	movs	r3, #0
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3710      	adds	r7, #16
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}

080043d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043d8:	b084      	sub	sp, #16
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
 80043e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80043e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80043f2:	2300      	movs	r3, #0
 80043f4:	613b      	str	r3, [r7, #16]
 80043f6:	e009      	b.n	800440c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	3340      	adds	r3, #64	; 0x40
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	4413      	add	r3, r2
 8004402:	2200      	movs	r2, #0
 8004404:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	3301      	adds	r3, #1
 800440a:	613b      	str	r3, [r7, #16]
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	2b0e      	cmp	r3, #14
 8004410:	d9f2      	bls.n	80043f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	2b00      	cmp	r3, #0
 8004416:	d11c      	bne.n	8004452 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	68fa      	ldr	r2, [r7, #12]
 8004422:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004426:	f043 0302 	orr.w	r3, r3, #2
 800442a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004430:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	639a      	str	r2, [r3, #56]	; 0x38
 8004450:	e00b      	b.n	800446a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004462:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004470:	461a      	mov	r2, r3
 8004472:	2300      	movs	r3, #0
 8004474:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447c:	4619      	mov	r1, r3
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004484:	461a      	mov	r2, r3
 8004486:	680b      	ldr	r3, [r1, #0]
 8004488:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800448a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448c:	2b01      	cmp	r3, #1
 800448e:	d10c      	bne.n	80044aa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004492:	2b00      	cmp	r3, #0
 8004494:	d104      	bne.n	80044a0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004496:	2100      	movs	r1, #0
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f000 f965 	bl	8004768 <USB_SetDevSpeed>
 800449e:	e008      	b.n	80044b2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80044a0:	2101      	movs	r1, #1
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f960 	bl	8004768 <USB_SetDevSpeed>
 80044a8:	e003      	b.n	80044b2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80044aa:	2103      	movs	r1, #3
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f95b 	bl	8004768 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80044b2:	2110      	movs	r1, #16
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f000 f8f3 	bl	80046a0 <USB_FlushTxFifo>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d001      	beq.n	80044c4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 f91f 	bl	8004708 <USB_FlushRxFifo>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044da:	461a      	mov	r2, r3
 80044dc:	2300      	movs	r3, #0
 80044de:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	461a      	mov	r2, r3
 80044e8:	2300      	movs	r3, #0
 80044ea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044f2:	461a      	mov	r2, r3
 80044f4:	2300      	movs	r3, #0
 80044f6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
 80044fc:	e043      	b.n	8004586 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004510:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004514:	d118      	bne.n	8004548 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d10a      	bne.n	8004532 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004528:	461a      	mov	r2, r3
 800452a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	e013      	b.n	800455a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453e:	461a      	mov	r2, r3
 8004540:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	e008      	b.n	800455a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004554:	461a      	mov	r2, r3
 8004556:	2300      	movs	r3, #0
 8004558:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	015a      	lsls	r2, r3, #5
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	4413      	add	r3, r2
 8004562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004566:	461a      	mov	r2, r3
 8004568:	2300      	movs	r3, #0
 800456a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	461a      	mov	r2, r3
 800457a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800457e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	3301      	adds	r3, #1
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004588:	693a      	ldr	r2, [r7, #16]
 800458a:	429a      	cmp	r2, r3
 800458c:	d3b7      	bcc.n	80044fe <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800458e:	2300      	movs	r3, #0
 8004590:	613b      	str	r3, [r7, #16]
 8004592:	e043      	b.n	800461c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045aa:	d118      	bne.n	80045de <USB_DevInit+0x206>
    {
      if (i == 0U)
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d10a      	bne.n	80045c8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	461a      	mov	r2, r3
 80045c0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80045c4:	6013      	str	r3, [r2, #0]
 80045c6:	e013      	b.n	80045f0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	015a      	lsls	r2, r3, #5
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045d4:	461a      	mov	r2, r3
 80045d6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80045da:	6013      	str	r3, [r2, #0]
 80045dc:	e008      	b.n	80045f0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ea:	461a      	mov	r2, r3
 80045ec:	2300      	movs	r3, #0
 80045ee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	015a      	lsls	r2, r3, #5
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	4413      	add	r3, r2
 80045f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045fc:	461a      	mov	r2, r3
 80045fe:	2300      	movs	r3, #0
 8004600:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004602:	693b      	ldr	r3, [r7, #16]
 8004604:	015a      	lsls	r2, r3, #5
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	4413      	add	r3, r2
 800460a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800460e:	461a      	mov	r2, r3
 8004610:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004614:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	3301      	adds	r3, #1
 800461a:	613b      	str	r3, [r7, #16]
 800461c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	429a      	cmp	r2, r3
 8004622:	d3b7      	bcc.n	8004594 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004632:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004636:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004644:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004648:	2b00      	cmp	r3, #0
 800464a:	d105      	bne.n	8004658 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	f043 0210 	orr.w	r2, r3, #16
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699a      	ldr	r2, [r3, #24]
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <USB_DevInit+0x2c4>)
 800465e:	4313      	orrs	r3, r2
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	f043 0208 	orr.w	r2, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004676:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d107      	bne.n	800468c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004684:	f043 0304 	orr.w	r3, r3, #4
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800468c:	7dfb      	ldrb	r3, [r7, #23]
}
 800468e:	4618      	mov	r0, r3
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004698:	b004      	add	sp, #16
 800469a:	4770      	bx	lr
 800469c:	803c3800 	.word	0x803c3800

080046a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b085      	sub	sp, #20
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	3301      	adds	r3, #1
 80046b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a13      	ldr	r2, [pc, #76]	; (8004704 <USB_FlushTxFifo+0x64>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d901      	bls.n	80046c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e01b      	b.n	80046f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	daf2      	bge.n	80046ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	019b      	lsls	r3, r3, #6
 80046d0:	f043 0220 	orr.w	r2, r3, #32
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3301      	adds	r3, #1
 80046dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a08      	ldr	r2, [pc, #32]	; (8004704 <USB_FlushTxFifo+0x64>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d901      	bls.n	80046ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e006      	b.n	80046f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0320 	and.w	r3, r3, #32
 80046f2:	2b20      	cmp	r3, #32
 80046f4:	d0f0      	beq.n	80046d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	00030d40 	.word	0x00030d40

08004708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004708:	b480      	push	{r7}
 800470a:	b085      	sub	sp, #20
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	3301      	adds	r3, #1
 8004718:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4a11      	ldr	r2, [pc, #68]	; (8004764 <USB_FlushRxFifo+0x5c>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e018      	b.n	8004758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	2b00      	cmp	r3, #0
 800472c:	daf2      	bge.n	8004714 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2210      	movs	r2, #16
 8004736:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3301      	adds	r3, #1
 800473c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a08      	ldr	r2, [pc, #32]	; (8004764 <USB_FlushRxFifo+0x5c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d901      	bls.n	800474a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e006      	b.n	8004758 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0310 	and.w	r3, r3, #16
 8004752:	2b10      	cmp	r3, #16
 8004754:	d0f0      	beq.n	8004738 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	00030d40 	.word	0x00030d40

08004768 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	460b      	mov	r3, r1
 8004772:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477e:	681a      	ldr	r2, [r3, #0]
 8004780:	78fb      	ldrb	r3, [r7, #3]
 8004782:	68f9      	ldr	r1, [r7, #12]
 8004784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004788:	4313      	orrs	r3, r2
 800478a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800478c:	2300      	movs	r3, #0
}
 800478e:	4618      	mov	r0, r3
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800479a:	b480      	push	{r7}
 800479c:	b087      	sub	sp, #28
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	f003 0306 	and.w	r3, r3, #6
 80047b2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d102      	bne.n	80047c0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80047ba:	2300      	movs	r3, #0
 80047bc:	75fb      	strb	r3, [r7, #23]
 80047be:	e00a      	b.n	80047d6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b02      	cmp	r3, #2
 80047c4:	d002      	beq.n	80047cc <USB_GetDevSpeed+0x32>
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2b06      	cmp	r3, #6
 80047ca:	d102      	bne.n	80047d2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80047cc:	2302      	movs	r3, #2
 80047ce:	75fb      	strb	r3, [r7, #23]
 80047d0:	e001      	b.n	80047d6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80047d2:	230f      	movs	r3, #15
 80047d4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80047d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	371c      	adds	r7, #28
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	785b      	ldrb	r3, [r3, #1]
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d13a      	bne.n	8004876 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f003 030f 	and.w	r3, r3, #15
 8004810:	2101      	movs	r1, #1
 8004812:	fa01 f303 	lsl.w	r3, r1, r3
 8004816:	b29b      	uxth	r3, r3
 8004818:	68f9      	ldr	r1, [r7, #12]
 800481a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800481e:	4313      	orrs	r3, r2
 8004820:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d155      	bne.n	80048e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	791b      	ldrb	r3, [r3, #4]
 8004852:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004854:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	059b      	lsls	r3, r3, #22
 800485a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800485c:	4313      	orrs	r3, r2
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800486a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800486e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004872:	6013      	str	r3, [r2, #0]
 8004874:	e036      	b.n	80048e4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800487c:	69da      	ldr	r2, [r3, #28]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f003 030f 	and.w	r3, r3, #15
 8004886:	2101      	movs	r1, #1
 8004888:	fa01 f303 	lsl.w	r3, r1, r3
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	015a      	lsls	r2, r3, #5
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4413      	add	r3, r2
 80048a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d11a      	bne.n	80048e4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	015a      	lsls	r2, r3, #5
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	4413      	add	r3, r2
 80048b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80048ca:	430b      	orrs	r3, r1
 80048cc:	4313      	orrs	r3, r2
 80048ce:	68ba      	ldr	r2, [r7, #8]
 80048d0:	0151      	lsls	r1, r2, #5
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	440a      	add	r2, r1
 80048d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3714      	adds	r7, #20
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr
	...

080048f4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b085      	sub	sp, #20
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	785b      	ldrb	r3, [r3, #1]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d161      	bne.n	80049d4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004922:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004926:	d11f      	bne.n	8004968 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	015a      	lsls	r2, r3, #5
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	4413      	add	r3, r2
 8004930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	0151      	lsls	r1, r2, #5
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	440a      	add	r2, r1
 800493e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004946:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	015a      	lsls	r2, r3, #5
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	68ba      	ldr	r2, [r7, #8]
 8004958:	0151      	lsls	r1, r2, #5
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	440a      	add	r2, r1
 800495e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004962:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004966:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	2101      	movs	r1, #1
 800497a:	fa01 f303 	lsl.w	r3, r1, r3
 800497e:	b29b      	uxth	r3, r3
 8004980:	43db      	mvns	r3, r3
 8004982:	68f9      	ldr	r1, [r7, #12]
 8004984:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004988:	4013      	ands	r3, r2
 800498a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004992:	69da      	ldr	r2, [r3, #28]
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	f003 030f 	and.w	r3, r3, #15
 800499c:	2101      	movs	r1, #1
 800499e:	fa01 f303 	lsl.w	r3, r1, r3
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	68f9      	ldr	r1, [r7, #12]
 80049a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ac:	4013      	ands	r3, r2
 80049ae:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	015a      	lsls	r2, r3, #5
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4413      	add	r3, r2
 80049b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	0159      	lsls	r1, r3, #5
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	440b      	add	r3, r1
 80049c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ca:	4619      	mov	r1, r3
 80049cc:	4b35      	ldr	r3, [pc, #212]	; (8004aa4 <USB_DeactivateEndpoint+0x1b0>)
 80049ce:	4013      	ands	r3, r2
 80049d0:	600b      	str	r3, [r1, #0]
 80049d2:	e060      	b.n	8004a96 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049ea:	d11f      	bne.n	8004a2c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	015a      	lsls	r2, r3, #5
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	4413      	add	r3, r2
 80049f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	0151      	lsls	r1, r2, #5
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	440a      	add	r2, r1
 8004a02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a06:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a0a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	015a      	lsls	r2, r3, #5
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	4413      	add	r3, r2
 8004a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a2a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f003 030f 	and.w	r3, r3, #15
 8004a3c:	2101      	movs	r1, #1
 8004a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a42:	041b      	lsls	r3, r3, #16
 8004a44:	43db      	mvns	r3, r3
 8004a46:	68f9      	ldr	r1, [r7, #12]
 8004a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a4c:	4013      	ands	r3, r2
 8004a4e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a56:	69da      	ldr	r2, [r3, #28]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	f003 030f 	and.w	r3, r3, #15
 8004a60:	2101      	movs	r1, #1
 8004a62:	fa01 f303 	lsl.w	r3, r1, r3
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	68f9      	ldr	r1, [r7, #12]
 8004a6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a70:	4013      	ands	r3, r2
 8004a72:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	0159      	lsls	r1, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	440b      	add	r3, r1
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	4619      	mov	r1, r3
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <USB_DeactivateEndpoint+0x1b4>)
 8004a92:	4013      	ands	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3714      	adds	r7, #20
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr
 8004aa4:	ec337800 	.word	0xec337800
 8004aa8:	eff37800 	.word	0xeff37800

08004aac <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af02      	add	r7, sp, #8
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	785b      	ldrb	r3, [r3, #1]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	f040 815c 	bne.w	8004d86 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d132      	bne.n	8004b3c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	69ba      	ldr	r2, [r7, #24]
 8004ae6:	0151      	lsls	r1, r2, #5
 8004ae8:	69fa      	ldr	r2, [r7, #28]
 8004aea:	440a      	add	r2, r1
 8004aec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004af0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004af4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004af8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b06:	691b      	ldr	r3, [r3, #16]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	0151      	lsls	r1, r2, #5
 8004b0c:	69fa      	ldr	r2, [r7, #28]
 8004b0e:	440a      	add	r2, r1
 8004b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	691b      	ldr	r3, [r3, #16]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	0151      	lsls	r1, r2, #5
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	440a      	add	r2, r1
 8004b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b34:	0cdb      	lsrs	r3, r3, #19
 8004b36:	04db      	lsls	r3, r3, #19
 8004b38:	6113      	str	r3, [r2, #16]
 8004b3a:	e074      	b.n	8004c26 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	0151      	lsls	r1, r2, #5
 8004b4e:	69fa      	ldr	r2, [r7, #28]
 8004b50:	440a      	add	r2, r1
 8004b52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b56:	0cdb      	lsrs	r3, r3, #19
 8004b58:	04db      	lsls	r3, r3, #19
 8004b5a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	69fb      	ldr	r3, [r7, #28]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	0151      	lsls	r1, r2, #5
 8004b6e:	69fa      	ldr	r2, [r7, #28]
 8004b70:	440a      	add	r2, r1
 8004b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b76:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004b7a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004b7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b8c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	6999      	ldr	r1, [r3, #24]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	440b      	add	r3, r1
 8004b98:	1e59      	subs	r1, r3, #1
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ba2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ba4:	4b9d      	ldr	r3, [pc, #628]	; (8004e1c <USB_EPStartXfer+0x370>)
 8004ba6:	400b      	ands	r3, r1
 8004ba8:	69b9      	ldr	r1, [r7, #24]
 8004baa:	0148      	lsls	r0, r1, #5
 8004bac:	69f9      	ldr	r1, [r7, #28]
 8004bae:	4401      	add	r1, r0
 8004bb0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004bb8:	69bb      	ldr	r3, [r7, #24]
 8004bba:	015a      	lsls	r2, r3, #5
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	699b      	ldr	r3, [r3, #24]
 8004bca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bce:	69b9      	ldr	r1, [r7, #24]
 8004bd0:	0148      	lsls	r0, r1, #5
 8004bd2:	69f9      	ldr	r1, [r7, #28]
 8004bd4:	4401      	add	r1, r0
 8004bd6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	791b      	ldrb	r3, [r3, #4]
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d11f      	bne.n	8004c26 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	69fa      	ldr	r2, [r7, #28]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c00:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004c04:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004c06:	69bb      	ldr	r3, [r7, #24]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	69ba      	ldr	r2, [r7, #24]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	69fa      	ldr	r2, [r7, #28]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c24:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004c26:	79fb      	ldrb	r3, [r7, #7]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d14b      	bne.n	8004cc4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	695b      	ldr	r3, [r3, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d009      	beq.n	8004c48 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	015a      	lsls	r2, r3, #5
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	4413      	add	r3, r2
 8004c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c40:	461a      	mov	r2, r3
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	791b      	ldrb	r3, [r3, #4]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d128      	bne.n	8004ca2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d110      	bne.n	8004c82 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	015a      	lsls	r2, r3, #5
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	4413      	add	r3, r2
 8004c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69ba      	ldr	r2, [r7, #24]
 8004c70:	0151      	lsls	r1, r2, #5
 8004c72:	69fa      	ldr	r2, [r7, #28]
 8004c74:	440a      	add	r2, r1
 8004c76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c7e:	6013      	str	r3, [r2, #0]
 8004c80:	e00f      	b.n	8004ca2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	0151      	lsls	r1, r2, #5
 8004c94:	69fa      	ldr	r2, [r7, #28]
 8004c96:	440a      	add	r2, r1
 8004c98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ca0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ca2:	69bb      	ldr	r3, [r7, #24]
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	69ba      	ldr	r2, [r7, #24]
 8004cb2:	0151      	lsls	r1, r2, #5
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	440a      	add	r2, r1
 8004cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cbc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004cc0:	6013      	str	r3, [r2, #0]
 8004cc2:	e133      	b.n	8004f2c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	015a      	lsls	r2, r3, #5
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	4413      	add	r3, r2
 8004ccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	69ba      	ldr	r2, [r7, #24]
 8004cd4:	0151      	lsls	r1, r2, #5
 8004cd6:	69fa      	ldr	r2, [r7, #28]
 8004cd8:	440a      	add	r2, r1
 8004cda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ce2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	791b      	ldrb	r3, [r3, #4]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d015      	beq.n	8004d18 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004cec:	68bb      	ldr	r3, [r7, #8]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 811b 	beq.w	8004f2c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	2101      	movs	r1, #1
 8004d08:	fa01 f303 	lsl.w	r3, r1, r3
 8004d0c:	69f9      	ldr	r1, [r7, #28]
 8004d0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d12:	4313      	orrs	r3, r2
 8004d14:	634b      	str	r3, [r1, #52]	; 0x34
 8004d16:	e109      	b.n	8004f2c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d110      	bne.n	8004d4a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	015a      	lsls	r2, r3, #5
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69ba      	ldr	r2, [r7, #24]
 8004d38:	0151      	lsls	r1, r2, #5
 8004d3a:	69fa      	ldr	r2, [r7, #28]
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d46:	6013      	str	r3, [r2, #0]
 8004d48:	e00f      	b.n	8004d6a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	015a      	lsls	r2, r3, #5
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69ba      	ldr	r2, [r7, #24]
 8004d5a:	0151      	lsls	r1, r2, #5
 8004d5c:	69fa      	ldr	r2, [r7, #28]
 8004d5e:	440a      	add	r2, r1
 8004d60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	6919      	ldr	r1, [r3, #16]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	781a      	ldrb	r2, [r3, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	699b      	ldr	r3, [r3, #24]
 8004d76:	b298      	uxth	r0, r3
 8004d78:	79fb      	ldrb	r3, [r7, #7]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f000 fade 	bl	8005340 <USB_WritePacket>
 8004d84:	e0d2      	b.n	8004f2c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	015a      	lsls	r2, r3, #5
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	0151      	lsls	r1, r2, #5
 8004d98:	69fa      	ldr	r2, [r7, #28]
 8004d9a:	440a      	add	r2, r1
 8004d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004da0:	0cdb      	lsrs	r3, r3, #19
 8004da2:	04db      	lsls	r3, r3, #19
 8004da4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004da6:	69bb      	ldr	r3, [r7, #24]
 8004da8:	015a      	lsls	r2, r3, #5
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	4413      	add	r3, r2
 8004dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004db2:	691b      	ldr	r3, [r3, #16]
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	0151      	lsls	r1, r2, #5
 8004db8:	69fa      	ldr	r2, [r7, #28]
 8004dba:	440a      	add	r2, r1
 8004dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dc0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dc4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dc8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	699b      	ldr	r3, [r3, #24]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d126      	bne.n	8004e20 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de8:	69b9      	ldr	r1, [r7, #24]
 8004dea:	0148      	lsls	r0, r1, #5
 8004dec:	69f9      	ldr	r1, [r7, #28]
 8004dee:	4401      	add	r1, r0
 8004df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004df4:	4313      	orrs	r3, r2
 8004df6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004df8:	69bb      	ldr	r3, [r7, #24]
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	69ba      	ldr	r2, [r7, #24]
 8004e08:	0151      	lsls	r1, r2, #5
 8004e0a:	69fa      	ldr	r2, [r7, #28]
 8004e0c:	440a      	add	r2, r1
 8004e0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e12:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e16:	6113      	str	r3, [r2, #16]
 8004e18:	e03a      	b.n	8004e90 <USB_EPStartXfer+0x3e4>
 8004e1a:	bf00      	nop
 8004e1c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	699a      	ldr	r2, [r3, #24]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	4413      	add	r3, r2
 8004e2a:	1e5a      	subs	r2, r3, #1
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e34:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	8afa      	ldrh	r2, [r7, #22]
 8004e3c:	fb03 f202 	mul.w	r2, r3, r2
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	015a      	lsls	r2, r3, #5
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	4413      	add	r3, r2
 8004e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e50:	691a      	ldr	r2, [r3, #16]
 8004e52:	8afb      	ldrh	r3, [r7, #22]
 8004e54:	04d9      	lsls	r1, r3, #19
 8004e56:	4b38      	ldr	r3, [pc, #224]	; (8004f38 <USB_EPStartXfer+0x48c>)
 8004e58:	400b      	ands	r3, r1
 8004e5a:	69b9      	ldr	r1, [r7, #24]
 8004e5c:	0148      	lsls	r0, r1, #5
 8004e5e:	69f9      	ldr	r1, [r7, #28]
 8004e60:	4401      	add	r1, r0
 8004e62:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e66:	4313      	orrs	r3, r2
 8004e68:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004e6a:	69bb      	ldr	r3, [r7, #24]
 8004e6c:	015a      	lsls	r2, r3, #5
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	4413      	add	r3, r2
 8004e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e76:	691a      	ldr	r2, [r3, #16]
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	69db      	ldr	r3, [r3, #28]
 8004e7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e80:	69b9      	ldr	r1, [r7, #24]
 8004e82:	0148      	lsls	r0, r1, #5
 8004e84:	69f9      	ldr	r1, [r7, #28]
 8004e86:	4401      	add	r1, r0
 8004e88:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10d      	bne.n	8004eb2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	6919      	ldr	r1, [r3, #16]
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eae:	460a      	mov	r2, r1
 8004eb0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	791b      	ldrb	r3, [r3, #4]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d128      	bne.n	8004f0c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d110      	bne.n	8004eec <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	e00f      	b.n	8004f0c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	015a      	lsls	r2, r3, #5
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69ba      	ldr	r2, [r7, #24]
 8004efc:	0151      	lsls	r1, r2, #5
 8004efe:	69fa      	ldr	r2, [r7, #28]
 8004f00:	440a      	add	r2, r1
 8004f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	015a      	lsls	r2, r3, #5
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	4413      	add	r3, r2
 8004f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	0151      	lsls	r1, r2, #5
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	440a      	add	r2, r1
 8004f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f26:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3720      	adds	r7, #32
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	1ff80000 	.word	0x1ff80000

08004f3c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b087      	sub	sp, #28
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	4613      	mov	r3, r2
 8004f48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	f040 80ce 	bne.w	80050fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d132      	bne.n	8004fcc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	0151      	lsls	r1, r2, #5
 8004f78:	697a      	ldr	r2, [r7, #20]
 8004f7a:	440a      	add	r2, r1
 8004f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f80:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f84:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f96:	691b      	ldr	r3, [r3, #16]
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	0151      	lsls	r1, r2, #5
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	440a      	add	r2, r1
 8004fa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fa8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	693a      	ldr	r2, [r7, #16]
 8004fba:	0151      	lsls	r1, r2, #5
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	440a      	add	r2, r1
 8004fc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc4:	0cdb      	lsrs	r3, r3, #19
 8004fc6:	04db      	lsls	r3, r3, #19
 8004fc8:	6113      	str	r3, [r2, #16]
 8004fca:	e04e      	b.n	800506a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	015a      	lsls	r2, r3, #5
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	0151      	lsls	r1, r2, #5
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	440a      	add	r2, r1
 8004fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fe6:	0cdb      	lsrs	r3, r3, #19
 8004fe8:	04db      	lsls	r3, r3, #19
 8004fea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff8:	691b      	ldr	r3, [r3, #16]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	0151      	lsls	r1, r2, #5
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	440a      	add	r2, r1
 8005002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005006:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800500a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800500e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	699a      	ldr	r2, [r3, #24]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	429a      	cmp	r2, r3
 800501a:	d903      	bls.n	8005024 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	68da      	ldr	r2, [r3, #12]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	697a      	ldr	r2, [r7, #20]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005042:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	015a      	lsls	r2, r3, #5
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	4413      	add	r3, r2
 800504c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800505a:	6939      	ldr	r1, [r7, #16]
 800505c:	0148      	lsls	r0, r1, #5
 800505e:	6979      	ldr	r1, [r7, #20]
 8005060:	4401      	add	r1, r0
 8005062:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005066:	4313      	orrs	r3, r2
 8005068:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	2b01      	cmp	r3, #1
 800506e:	d11e      	bne.n	80050ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	695b      	ldr	r3, [r3, #20]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d009      	beq.n	800508c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	4413      	add	r3, r2
 8005080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005084:	461a      	mov	r2, r3
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	015a      	lsls	r2, r3, #5
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	4413      	add	r3, r2
 8005094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	0151      	lsls	r1, r2, #5
 800509e:	697a      	ldr	r2, [r7, #20]
 80050a0:	440a      	add	r2, r1
 80050a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050aa:	6013      	str	r3, [r2, #0]
 80050ac:	e097      	b.n	80051de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	015a      	lsls	r2, r3, #5
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	4413      	add	r3, r2
 80050b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	0151      	lsls	r1, r2, #5
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	440a      	add	r2, r1
 80050c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	699b      	ldr	r3, [r3, #24]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 8083 	beq.w	80051de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	f003 030f 	and.w	r3, r3, #15
 80050e8:	2101      	movs	r1, #1
 80050ea:	fa01 f303 	lsl.w	r3, r1, r3
 80050ee:	6979      	ldr	r1, [r7, #20]
 80050f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050f4:	4313      	orrs	r3, r2
 80050f6:	634b      	str	r3, [r1, #52]	; 0x34
 80050f8:	e071      	b.n	80051de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	015a      	lsls	r2, r3, #5
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	4413      	add	r3, r2
 8005102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	693a      	ldr	r2, [r7, #16]
 800510a:	0151      	lsls	r1, r2, #5
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	440a      	add	r2, r1
 8005110:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005114:	0cdb      	lsrs	r3, r3, #19
 8005116:	04db      	lsls	r3, r3, #19
 8005118:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	015a      	lsls	r2, r3, #5
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	4413      	add	r3, r2
 8005122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	0151      	lsls	r1, r2, #5
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	440a      	add	r2, r1
 8005130:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005134:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005138:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800513c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	699b      	ldr	r3, [r3, #24]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	68da      	ldr	r2, [r3, #12]
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005174:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	69db      	ldr	r3, [r3, #28]
 8005188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800518c:	6939      	ldr	r1, [r7, #16]
 800518e:	0148      	lsls	r0, r1, #5
 8005190:	6979      	ldr	r1, [r7, #20]
 8005192:	4401      	add	r1, r0
 8005194:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005198:	4313      	orrs	r3, r2
 800519a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800519c:	79fb      	ldrb	r3, [r7, #7]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d10d      	bne.n	80051be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d009      	beq.n	80051be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	6919      	ldr	r1, [r3, #16]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	015a      	lsls	r2, r3, #5
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ba:	460a      	mov	r2, r1
 80051bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	015a      	lsls	r2, r3, #5
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	4413      	add	r3, r2
 80051c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	693a      	ldr	r2, [r7, #16]
 80051ce:	0151      	lsls	r1, r2, #5
 80051d0:	697a      	ldr	r2, [r7, #20]
 80051d2:	440a      	add	r2, r1
 80051d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	371c      	adds	r7, #28
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80051fa:	2300      	movs	r3, #0
 80051fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	785b      	ldrb	r3, [r3, #1]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d14a      	bne.n	80052a0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800521e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005222:	f040 8086 	bne.w	8005332 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	683a      	ldr	r2, [r7, #0]
 8005238:	7812      	ldrb	r2, [r2, #0]
 800523a:	0151      	lsls	r1, r2, #5
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	440a      	add	r2, r1
 8005240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005244:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005248:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	015a      	lsls	r2, r3, #5
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	4413      	add	r3, r2
 8005254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	0151      	lsls	r1, r2, #5
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	440a      	add	r2, r1
 8005264:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005268:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800526c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	3301      	adds	r3, #1
 8005272:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f242 7210 	movw	r2, #10000	; 0x2710
 800527a:	4293      	cmp	r3, r2
 800527c:	d902      	bls.n	8005284 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	75fb      	strb	r3, [r7, #23]
          break;
 8005282:	e056      	b.n	8005332 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005298:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800529c:	d0e7      	beq.n	800526e <USB_EPStopXfer+0x82>
 800529e:	e048      	b.n	8005332 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80052b8:	d13b      	bne.n	8005332 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	7812      	ldrb	r2, [r2, #0]
 80052ce:	0151      	lsls	r1, r2, #5
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	440a      	add	r2, r1
 80052d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80052dc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	015a      	lsls	r2, r3, #5
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	4413      	add	r3, r2
 80052e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	683a      	ldr	r2, [r7, #0]
 80052f0:	7812      	ldrb	r2, [r2, #0]
 80052f2:	0151      	lsls	r1, r2, #5
 80052f4:	693a      	ldr	r2, [r7, #16]
 80052f6:	440a      	add	r2, r1
 80052f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005300:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	3301      	adds	r3, #1
 8005306:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f242 7210 	movw	r2, #10000	; 0x2710
 800530e:	4293      	cmp	r3, r2
 8005310:	d902      	bls.n	8005318 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
          break;
 8005316:	e00c      	b.n	8005332 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	015a      	lsls	r2, r3, #5
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	4413      	add	r3, r2
 8005322:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800532c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005330:	d0e7      	beq.n	8005302 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005332:	7dfb      	ldrb	r3, [r7, #23]
}
 8005334:	4618      	mov	r0, r3
 8005336:	371c      	adds	r7, #28
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005340:	b480      	push	{r7}
 8005342:	b089      	sub	sp, #36	; 0x24
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	4611      	mov	r1, r2
 800534c:	461a      	mov	r2, r3
 800534e:	460b      	mov	r3, r1
 8005350:	71fb      	strb	r3, [r7, #7]
 8005352:	4613      	mov	r3, r2
 8005354:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800535e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005362:	2b00      	cmp	r3, #0
 8005364:	d123      	bne.n	80053ae <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005366:	88bb      	ldrh	r3, [r7, #4]
 8005368:	3303      	adds	r3, #3
 800536a:	089b      	lsrs	r3, r3, #2
 800536c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	61bb      	str	r3, [r7, #24]
 8005372:	e018      	b.n	80053a6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	031a      	lsls	r2, r3, #12
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	4413      	add	r3, r2
 800537c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005380:	461a      	mov	r2, r3
 8005382:	69fb      	ldr	r3, [r7, #28]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	3301      	adds	r3, #1
 800538c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	3301      	adds	r3, #1
 8005392:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	3301      	adds	r3, #1
 8005398:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800539a:	69fb      	ldr	r3, [r7, #28]
 800539c:	3301      	adds	r3, #1
 800539e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	3301      	adds	r3, #1
 80053a4:	61bb      	str	r3, [r7, #24]
 80053a6:	69ba      	ldr	r2, [r7, #24]
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d3e2      	bcc.n	8005374 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80053ae:	2300      	movs	r3, #0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3724      	adds	r7, #36	; 0x24
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80053bc:	b480      	push	{r7}
 80053be:	b08b      	sub	sp, #44	; 0x2c
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	4613      	mov	r3, r2
 80053c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80053d2:	88fb      	ldrh	r3, [r7, #6]
 80053d4:	089b      	lsrs	r3, r3, #2
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80053e2:	2300      	movs	r3, #0
 80053e4:	623b      	str	r3, [r7, #32]
 80053e6:	e014      	b.n	8005412 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80053e8:	69bb      	ldr	r3, [r7, #24]
 80053ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	601a      	str	r2, [r3, #0]
    pDest++;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f6:	3301      	adds	r3, #1
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80053fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fc:	3301      	adds	r3, #1
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005402:	3301      	adds	r3, #1
 8005404:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	3301      	adds	r3, #1
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800540c:	6a3b      	ldr	r3, [r7, #32]
 800540e:	3301      	adds	r3, #1
 8005410:	623b      	str	r3, [r7, #32]
 8005412:	6a3a      	ldr	r2, [r7, #32]
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	429a      	cmp	r2, r3
 8005418:	d3e6      	bcc.n	80053e8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800541a:	8bfb      	ldrh	r3, [r7, #30]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01e      	beq.n	800545e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800542a:	461a      	mov	r2, r3
 800542c:	f107 0310 	add.w	r3, r7, #16
 8005430:	6812      	ldr	r2, [r2, #0]
 8005432:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	b2db      	uxtb	r3, r3
 800543a:	00db      	lsls	r3, r3, #3
 800543c:	fa22 f303 	lsr.w	r3, r2, r3
 8005440:	b2da      	uxtb	r2, r3
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	701a      	strb	r2, [r3, #0]
      i++;
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	3301      	adds	r3, #1
 800544a:	623b      	str	r3, [r7, #32]
      pDest++;
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	3301      	adds	r3, #1
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005452:	8bfb      	ldrh	r3, [r7, #30]
 8005454:	3b01      	subs	r3, #1
 8005456:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005458:	8bfb      	ldrh	r3, [r7, #30]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1ea      	bne.n	8005434 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800545e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005460:	4618      	mov	r0, r3
 8005462:	372c      	adds	r7, #44	; 0x2c
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	785b      	ldrb	r3, [r3, #1]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d12c      	bne.n	80054e2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	015a      	lsls	r2, r3, #5
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4413      	add	r3, r2
 8005490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b00      	cmp	r3, #0
 8005498:	db12      	blt.n	80054c0 <USB_EPSetStall+0x54>
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00f      	beq.n	80054c0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	015a      	lsls	r2, r3, #5
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	4413      	add	r3, r2
 80054a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	0151      	lsls	r1, r2, #5
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	440a      	add	r2, r1
 80054b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80054be:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	0151      	lsls	r1, r2, #5
 80054d2:	68fa      	ldr	r2, [r7, #12]
 80054d4:	440a      	add	r2, r1
 80054d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	e02b      	b.n	800553a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	db12      	blt.n	800551a <USB_EPSetStall+0xae>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00f      	beq.n	800551a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	0151      	lsls	r1, r2, #5
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	440a      	add	r2, r1
 8005510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005514:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005518:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4413      	add	r3, r2
 8005522:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	440a      	add	r2, r1
 8005530:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005534:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005538:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800553a:	2300      	movs	r3, #0
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005548:	b480      	push	{r7}
 800554a:	b085      	sub	sp, #20
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	785b      	ldrb	r3, [r3, #1]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d128      	bne.n	80055b6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	68ba      	ldr	r2, [r7, #8]
 8005574:	0151      	lsls	r1, r2, #5
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	440a      	add	r2, r1
 800557a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800557e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005582:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	791b      	ldrb	r3, [r3, #4]
 8005588:	2b03      	cmp	r3, #3
 800558a:	d003      	beq.n	8005594 <USB_EPClearStall+0x4c>
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	791b      	ldrb	r3, [r3, #4]
 8005590:	2b02      	cmp	r3, #2
 8005592:	d138      	bne.n	8005606 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	015a      	lsls	r2, r3, #5
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	0151      	lsls	r1, r2, #5
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	440a      	add	r2, r1
 80055aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	e027      	b.n	8005606 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	015a      	lsls	r2, r3, #5
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	4413      	add	r3, r2
 80055be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055d4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	791b      	ldrb	r3, [r3, #4]
 80055da:	2b03      	cmp	r3, #3
 80055dc:	d003      	beq.n	80055e6 <USB_EPClearStall+0x9e>
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	791b      	ldrb	r3, [r3, #4]
 80055e2:	2b02      	cmp	r3, #2
 80055e4:	d10f      	bne.n	8005606 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	0151      	lsls	r1, r2, #5
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	440a      	add	r2, r1
 80055fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005606:	2300      	movs	r3, #0
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	460b      	mov	r3, r1
 800561e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005632:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005636:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	011b      	lsls	r3, r3, #4
 8005644:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005648:	68f9      	ldr	r1, [r7, #12]
 800564a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800564e:	4313      	orrs	r3, r2
 8005650:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005652:	2300      	movs	r3, #0
}
 8005654:	4618      	mov	r0, r3
 8005656:	3714      	adds	r7, #20
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005660:	b480      	push	{r7}
 8005662:	b085      	sub	sp, #20
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800567a:	f023 0303 	bic.w	r3, r3, #3
 800567e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	68fa      	ldr	r2, [r7, #12]
 800568a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800568e:	f023 0302 	bic.w	r3, r3, #2
 8005692:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005694:	2300      	movs	r3, #0
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr

080056a2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80056bc:	f023 0303 	bic.w	r3, r3, #3
 80056c0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056d0:	f043 0302 	orr.w	r3, r3, #2
 80056d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	699b      	ldr	r3, [r3, #24]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4013      	ands	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80056fc:	68fb      	ldr	r3, [r7, #12]
}
 80056fe:	4618      	mov	r0, r3
 8005700:	3714      	adds	r7, #20
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005726:	69db      	ldr	r3, [r3, #28]
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	4013      	ands	r3, r2
 800572c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	0c1b      	lsrs	r3, r3, #16
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005750:	699b      	ldr	r3, [r3, #24]
 8005752:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	68ba      	ldr	r2, [r7, #8]
 800575e:	4013      	ands	r3, r2
 8005760:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	b29b      	uxth	r3, r3
}
 8005766:	4618      	mov	r0, r3
 8005768:	3714      	adds	r7, #20
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005772:	b480      	push	{r7}
 8005774:	b085      	sub	sp, #20
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
 800577a:	460b      	mov	r3, r1
 800577c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005782:	78fb      	ldrb	r3, [r7, #3]
 8005784:	015a      	lsls	r2, r3, #5
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4013      	ands	r3, r2
 800579e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057a0:	68bb      	ldr	r3, [r7, #8]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
 80057b6:	460b      	mov	r3, r1
 80057b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	f003 030f 	and.w	r3, r3, #15
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	fa22 f303 	lsr.w	r3, r2, r3
 80057de:	01db      	lsls	r3, r3, #7
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	693a      	ldr	r2, [r7, #16]
 80057e4:	4313      	orrs	r3, r2
 80057e6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4013      	ands	r3, r2
 80057fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80057fc:	68bb      	ldr	r3, [r7, #8]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	371c      	adds	r7, #28
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800580a:	b480      	push	{r7}
 800580c:	b083      	sub	sp, #12
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0301 	and.w	r3, r3, #1
}
 800581a:	4618      	mov	r0, r3
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr

08005826 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005826:	b480      	push	{r7}
 8005828:	b085      	sub	sp, #20
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005840:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005844:	f023 0307 	bic.w	r3, r3, #7
 8005848:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800585c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800586c:	b480      	push	{r7}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	460b      	mov	r3, r1
 8005876:	607a      	str	r2, [r7, #4]
 8005878:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	333c      	adds	r3, #60	; 0x3c
 8005882:	3304      	adds	r3, #4
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	4a26      	ldr	r2, [pc, #152]	; (8005924 <USB_EP0_OutStart+0xb8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d90a      	bls.n	80058a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800589c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a0:	d101      	bne.n	80058a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80058a2:	2300      	movs	r3, #0
 80058a4:	e037      	b.n	8005916 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ac:	461a      	mov	r2, r3
 80058ae:	2300      	movs	r3, #0
 80058b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	697a      	ldr	r2, [r7, #20]
 80058bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d4:	f043 0318 	orr.w	r3, r3, #24
 80058d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058e8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80058ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80058ee:	7afb      	ldrb	r3, [r7, #11]
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d10f      	bne.n	8005914 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058fa:	461a      	mov	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	697a      	ldr	r2, [r7, #20]
 800590a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800590e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
 8005922:	bf00      	nop
 8005924:	4f54300a 	.word	0x4f54300a

08005928 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005928:	b480      	push	{r7}
 800592a:	b085      	sub	sp, #20
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005930:	2300      	movs	r3, #0
 8005932:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	3301      	adds	r3, #1
 8005938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4a13      	ldr	r2, [pc, #76]	; (800598c <USB_CoreReset+0x64>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d901      	bls.n	8005946 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005942:	2303      	movs	r3, #3
 8005944:	e01b      	b.n	800597e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	691b      	ldr	r3, [r3, #16]
 800594a:	2b00      	cmp	r3, #0
 800594c:	daf2      	bge.n	8005934 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800594e:	2300      	movs	r3, #0
 8005950:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	691b      	ldr	r3, [r3, #16]
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	3301      	adds	r3, #1
 8005962:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a09      	ldr	r2, [pc, #36]	; (800598c <USB_CoreReset+0x64>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d901      	bls.n	8005970 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e006      	b.n	800597e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b01      	cmp	r3, #1
 800597a:	d0f0      	beq.n	800595e <USB_CoreReset+0x36>

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3714      	adds	r7, #20
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	00030d40 	.word	0x00030d40

08005990 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	460b      	mov	r3, r1
 800599a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800599c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80059a0:	f002 fbea 	bl	8008178 <USBD_static_malloc>
 80059a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	32b0      	adds	r2, #176	; 0xb0
 80059b6:	2100      	movs	r1, #0
 80059b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80059bc:	2302      	movs	r3, #2
 80059be:	e0d4      	b.n	8005b6a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80059c0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80059c4:	2100      	movs	r1, #0
 80059c6:	68f8      	ldr	r0, [r7, #12]
 80059c8:	f002 fc3e 	bl	8008248 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	32b0      	adds	r2, #176	; 0xb0
 80059d6:	68f9      	ldr	r1, [r7, #12]
 80059d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	32b0      	adds	r2, #176	; 0xb0
 80059e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	7c1b      	ldrb	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d138      	bne.n	8005a6a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80059f8:	4b5e      	ldr	r3, [pc, #376]	; (8005b74 <USBD_CDC_Init+0x1e4>)
 80059fa:	7819      	ldrb	r1, [r3, #0]
 80059fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a00:	2202      	movs	r2, #2
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f002 fa95 	bl	8007f32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a08:	4b5a      	ldr	r3, [pc, #360]	; (8005b74 <USBD_CDC_Init+0x1e4>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	f003 020f 	and.w	r2, r3, #15
 8005a10:	6879      	ldr	r1, [r7, #4]
 8005a12:	4613      	mov	r3, r2
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	4413      	add	r3, r2
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	440b      	add	r3, r1
 8005a1c:	3324      	adds	r3, #36	; 0x24
 8005a1e:	2201      	movs	r2, #1
 8005a20:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a22:	4b55      	ldr	r3, [pc, #340]	; (8005b78 <USBD_CDC_Init+0x1e8>)
 8005a24:	7819      	ldrb	r1, [r3, #0]
 8005a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a2a:	2202      	movs	r2, #2
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f002 fa80 	bl	8007f32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005a32:	4b51      	ldr	r3, [pc, #324]	; (8005b78 <USBD_CDC_Init+0x1e8>)
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f003 020f 	and.w	r2, r3, #15
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	4413      	add	r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005a4e:	4b4b      	ldr	r3, [pc, #300]	; (8005b7c <USBD_CDC_Init+0x1ec>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	f003 020f 	and.w	r2, r3, #15
 8005a56:	6879      	ldr	r1, [r7, #4]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	009b      	lsls	r3, r3, #2
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	440b      	add	r3, r1
 8005a62:	3326      	adds	r3, #38	; 0x26
 8005a64:	2210      	movs	r2, #16
 8005a66:	801a      	strh	r2, [r3, #0]
 8005a68:	e035      	b.n	8005ad6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005a6a:	4b42      	ldr	r3, [pc, #264]	; (8005b74 <USBD_CDC_Init+0x1e4>)
 8005a6c:	7819      	ldrb	r1, [r3, #0]
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	2202      	movs	r2, #2
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f002 fa5d 	bl	8007f32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005a78:	4b3e      	ldr	r3, [pc, #248]	; (8005b74 <USBD_CDC_Init+0x1e4>)
 8005a7a:	781b      	ldrb	r3, [r3, #0]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	6879      	ldr	r1, [r7, #4]
 8005a82:	4613      	mov	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	3324      	adds	r3, #36	; 0x24
 8005a8e:	2201      	movs	r2, #1
 8005a90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005a92:	4b39      	ldr	r3, [pc, #228]	; (8005b78 <USBD_CDC_Init+0x1e8>)
 8005a94:	7819      	ldrb	r1, [r3, #0]
 8005a96:	2340      	movs	r3, #64	; 0x40
 8005a98:	2202      	movs	r2, #2
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f002 fa49 	bl	8007f32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005aa0:	4b35      	ldr	r3, [pc, #212]	; (8005b78 <USBD_CDC_Init+0x1e8>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	f003 020f 	and.w	r2, r3, #15
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	4413      	add	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	440b      	add	r3, r1
 8005ab4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ab8:	2201      	movs	r2, #1
 8005aba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005abc:	4b2f      	ldr	r3, [pc, #188]	; (8005b7c <USBD_CDC_Init+0x1ec>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	f003 020f 	and.w	r2, r3, #15
 8005ac4:	6879      	ldr	r1, [r7, #4]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	440b      	add	r3, r1
 8005ad0:	3326      	adds	r3, #38	; 0x26
 8005ad2:	2210      	movs	r2, #16
 8005ad4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <USBD_CDC_Init+0x1ec>)
 8005ad8:	7819      	ldrb	r1, [r3, #0]
 8005ada:	2308      	movs	r3, #8
 8005adc:	2203      	movs	r2, #3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f002 fa27 	bl	8007f32 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ae4:	4b25      	ldr	r3, [pc, #148]	; (8005b7c <USBD_CDC_Init+0x1ec>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	6879      	ldr	r1, [r7, #4]
 8005aee:	4613      	mov	r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	440b      	add	r3, r1
 8005af8:	3324      	adds	r3, #36	; 0x24
 8005afa:	2201      	movs	r2, #1
 8005afc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	33b0      	adds	r3, #176	; 0xb0
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005b34:	2302      	movs	r3, #2
 8005b36:	e018      	b.n	8005b6a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	7c1b      	ldrb	r3, [r3, #16]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b40:	4b0d      	ldr	r3, [pc, #52]	; (8005b78 <USBD_CDC_Init+0x1e8>)
 8005b42:	7819      	ldrb	r1, [r3, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f002 fade 	bl	8008110 <USBD_LL_PrepareReceive>
 8005b54:	e008      	b.n	8005b68 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005b56:	4b08      	ldr	r3, [pc, #32]	; (8005b78 <USBD_CDC_Init+0x1e8>)
 8005b58:	7819      	ldrb	r1, [r3, #0]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b60:	2340      	movs	r3, #64	; 0x40
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f002 fad4 	bl	8008110 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005b68:	2300      	movs	r3, #0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	20000093 	.word	0x20000093
 8005b78:	20000094 	.word	0x20000094
 8005b7c:	20000095 	.word	0x20000095

08005b80 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b082      	sub	sp, #8
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	460b      	mov	r3, r1
 8005b8a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005b8c:	4b3a      	ldr	r3, [pc, #232]	; (8005c78 <USBD_CDC_DeInit+0xf8>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	4619      	mov	r1, r3
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f002 f9f3 	bl	8007f7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005b98:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <USBD_CDC_DeInit+0xf8>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	f003 020f 	and.w	r2, r3, #15
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	440b      	add	r3, r1
 8005bac:	3324      	adds	r3, #36	; 0x24
 8005bae:	2200      	movs	r2, #0
 8005bb0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005bb2:	4b32      	ldr	r3, [pc, #200]	; (8005c7c <USBD_CDC_DeInit+0xfc>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	4619      	mov	r1, r3
 8005bb8:	6878      	ldr	r0, [r7, #4]
 8005bba:	f002 f9e0 	bl	8007f7e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005bbe:	4b2f      	ldr	r3, [pc, #188]	; (8005c7c <USBD_CDC_DeInit+0xfc>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	f003 020f 	and.w	r2, r3, #15
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	009b      	lsls	r3, r3, #2
 8005bcc:	4413      	add	r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <USBD_CDC_DeInit+0x100>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f002 f9cc 	bl	8007f7e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005be6:	4b26      	ldr	r3, [pc, #152]	; (8005c80 <USBD_CDC_DeInit+0x100>)
 8005be8:	781b      	ldrb	r3, [r3, #0]
 8005bea:	f003 020f 	and.w	r2, r3, #15
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	4413      	add	r3, r2
 8005bf6:	009b      	lsls	r3, r3, #2
 8005bf8:	440b      	add	r3, r1
 8005bfa:	3324      	adds	r3, #36	; 0x24
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005c00:	4b1f      	ldr	r3, [pc, #124]	; (8005c80 <USBD_CDC_DeInit+0x100>)
 8005c02:	781b      	ldrb	r3, [r3, #0]
 8005c04:	f003 020f 	and.w	r2, r3, #15
 8005c08:	6879      	ldr	r1, [r7, #4]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4413      	add	r3, r2
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	440b      	add	r3, r1
 8005c14:	3326      	adds	r3, #38	; 0x26
 8005c16:	2200      	movs	r2, #0
 8005c18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	32b0      	adds	r2, #176	; 0xb0
 8005c24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d01f      	beq.n	8005c6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	33b0      	adds	r3, #176	; 0xb0
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	32b0      	adds	r2, #176	; 0xb0
 8005c4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f002 faa0 	bl	8008194 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	32b0      	adds	r2, #176	; 0xb0
 8005c5e:	2100      	movs	r1, #0
 8005c60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	20000093 	.word	0x20000093
 8005c7c:	20000094 	.word	0x20000094
 8005c80:	20000095 	.word	0x20000095

08005c84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b086      	sub	sp, #24
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	32b0      	adds	r2, #176	; 0xb0
 8005c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005cb0:	2303      	movs	r3, #3
 8005cb2:	e0bf      	b.n	8005e34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d050      	beq.n	8005d62 <USBD_CDC_Setup+0xde>
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	f040 80af 	bne.w	8005e24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	88db      	ldrh	r3, [r3, #6]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d03a      	beq.n	8005d44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	b25b      	sxtb	r3, r3
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	da1b      	bge.n	8005d10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	33b0      	adds	r3, #176	; 0xb0
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	689b      	ldr	r3, [r3, #8]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005cee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005cf0:	683a      	ldr	r2, [r7, #0]
 8005cf2:	88d2      	ldrh	r2, [r2, #6]
 8005cf4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	88db      	ldrh	r3, [r3, #6]
 8005cfa:	2b07      	cmp	r3, #7
 8005cfc:	bf28      	it	cs
 8005cfe:	2307      	movcs	r3, #7
 8005d00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	89fa      	ldrh	r2, [r7, #14]
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f001 fd0d 	bl	8007728 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005d0e:	e090      	b.n	8005e32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	785a      	ldrb	r2, [r3, #1]
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	88db      	ldrh	r3, [r3, #6]
 8005d1e:	2b3f      	cmp	r3, #63	; 0x3f
 8005d20:	d803      	bhi.n	8005d2a <USBD_CDC_Setup+0xa6>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	88db      	ldrh	r3, [r3, #6]
 8005d26:	b2da      	uxtb	r2, r3
 8005d28:	e000      	b.n	8005d2c <USBD_CDC_Setup+0xa8>
 8005d2a:	2240      	movs	r2, #64	; 0x40
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005d32:	6939      	ldr	r1, [r7, #16]
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8005d3a:	461a      	mov	r2, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fd1f 	bl	8007780 <USBD_CtlPrepareRx>
      break;
 8005d42:	e076      	b.n	8005e32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005d4a:	687a      	ldr	r2, [r7, #4]
 8005d4c:	33b0      	adds	r3, #176	; 0xb0
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	7850      	ldrb	r0, [r2, #1]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	4798      	blx	r3
      break;
 8005d60:	e067      	b.n	8005e32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	785b      	ldrb	r3, [r3, #1]
 8005d66:	2b0b      	cmp	r3, #11
 8005d68:	d851      	bhi.n	8005e0e <USBD_CDC_Setup+0x18a>
 8005d6a:	a201      	add	r2, pc, #4	; (adr r2, 8005d70 <USBD_CDC_Setup+0xec>)
 8005d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d70:	08005da1 	.word	0x08005da1
 8005d74:	08005e1d 	.word	0x08005e1d
 8005d78:	08005e0f 	.word	0x08005e0f
 8005d7c:	08005e0f 	.word	0x08005e0f
 8005d80:	08005e0f 	.word	0x08005e0f
 8005d84:	08005e0f 	.word	0x08005e0f
 8005d88:	08005e0f 	.word	0x08005e0f
 8005d8c:	08005e0f 	.word	0x08005e0f
 8005d90:	08005e0f 	.word	0x08005e0f
 8005d94:	08005e0f 	.word	0x08005e0f
 8005d98:	08005dcb 	.word	0x08005dcb
 8005d9c:	08005df5 	.word	0x08005df5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b03      	cmp	r3, #3
 8005daa:	d107      	bne.n	8005dbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005dac:	f107 030a 	add.w	r3, r7, #10
 8005db0:	2202      	movs	r2, #2
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f001 fcb7 	bl	8007728 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dba:	e032      	b.n	8005e22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f001 fc41 	bl	8007646 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dc4:	2303      	movs	r3, #3
 8005dc6:	75fb      	strb	r3, [r7, #23]
          break;
 8005dc8:	e02b      	b.n	8005e22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d107      	bne.n	8005de6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005dd6:	f107 030d 	add.w	r3, r7, #13
 8005dda:	2201      	movs	r2, #1
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f001 fca2 	bl	8007728 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005de4:	e01d      	b.n	8005e22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005de6:	6839      	ldr	r1, [r7, #0]
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f001 fc2c 	bl	8007646 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dee:	2303      	movs	r3, #3
 8005df0:	75fb      	strb	r3, [r7, #23]
          break;
 8005df2:	e016      	b.n	8005e22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dfa:	b2db      	uxtb	r3, r3
 8005dfc:	2b03      	cmp	r3, #3
 8005dfe:	d00f      	beq.n	8005e20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f001 fc1f 	bl	8007646 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005e0c:	e008      	b.n	8005e20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e0e:	6839      	ldr	r1, [r7, #0]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 fc18 	bl	8007646 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e16:	2303      	movs	r3, #3
 8005e18:	75fb      	strb	r3, [r7, #23]
          break;
 8005e1a:	e002      	b.n	8005e22 <USBD_CDC_Setup+0x19e>
          break;
 8005e1c:	bf00      	nop
 8005e1e:	e008      	b.n	8005e32 <USBD_CDC_Setup+0x1ae>
          break;
 8005e20:	bf00      	nop
      }
      break;
 8005e22:	e006      	b.n	8005e32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8005e24:	6839      	ldr	r1, [r7, #0]
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f001 fc0d 	bl	8007646 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	75fb      	strb	r3, [r7, #23]
      break;
 8005e30:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	460b      	mov	r3, r1
 8005e46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005e4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	32b0      	adds	r2, #176	; 0xb0
 8005e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005e62:	2303      	movs	r3, #3
 8005e64:	e065      	b.n	8005f32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	32b0      	adds	r2, #176	; 0xb0
 8005e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	f003 020f 	and.w	r2, r3, #15
 8005e7c:	6879      	ldr	r1, [r7, #4]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	440b      	add	r3, r1
 8005e88:	3318      	adds	r3, #24
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02f      	beq.n	8005ef0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005e90:	78fb      	ldrb	r3, [r7, #3]
 8005e92:	f003 020f 	and.w	r2, r3, #15
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3318      	adds	r3, #24
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	f003 010f 	and.w	r1, r3, #15
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	460b      	mov	r3, r1
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	440b      	add	r3, r1
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	4403      	add	r3, r0
 8005eb8:	3348      	adds	r3, #72	; 0x48
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	fbb2 f1f3 	udiv	r1, r2, r3
 8005ec0:	fb01 f303 	mul.w	r3, r1, r3
 8005ec4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d112      	bne.n	8005ef0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005eca:	78fb      	ldrb	r3, [r7, #3]
 8005ecc:	f003 020f 	and.w	r2, r3, #15
 8005ed0:	6879      	ldr	r1, [r7, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	440b      	add	r3, r1
 8005edc:	3318      	adds	r3, #24
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005ee2:	78f9      	ldrb	r1, [r7, #3]
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f002 f8f0 	bl	80080ce <USBD_LL_Transmit>
 8005eee:	e01f      	b.n	8005f30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	33b0      	adds	r3, #176	; 0xb0
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	4413      	add	r3, r2
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d010      	beq.n	8005f30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	33b0      	adds	r3, #176	; 0xb0
 8005f18:	009b      	lsls	r3, r3, #2
 8005f1a:	4413      	add	r3, r2
 8005f1c:	685b      	ldr	r3, [r3, #4]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005f2c:	78fa      	ldrb	r2, [r7, #3]
 8005f2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005f30:	2300      	movs	r3, #0
}
 8005f32:	4618      	mov	r0, r3
 8005f34:	3710      	adds	r7, #16
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b084      	sub	sp, #16
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
 8005f42:	460b      	mov	r3, r1
 8005f44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	32b0      	adds	r2, #176	; 0xb0
 8005f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	32b0      	adds	r2, #176	; 0xb0
 8005f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d101      	bne.n	8005f6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e01a      	b.n	8005fa2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005f6c:	78fb      	ldrb	r3, [r7, #3]
 8005f6e:	4619      	mov	r1, r3
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f002 f8ee 	bl	8008152 <USBD_LL_GetRxDataSize>
 8005f76:	4602      	mov	r2, r0
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	33b0      	adds	r3, #176	; 0xb0
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4413      	add	r3, r2
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	32b0      	adds	r2, #176	; 0xb0
 8005fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e025      	b.n	8006018 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	33b0      	adds	r3, #176	; 0xb0
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d01a      	beq.n	8006016 <USBD_CDC_EP0_RxReady+0x6c>
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005fe6:	2bff      	cmp	r3, #255	; 0xff
 8005fe8:	d015      	beq.n	8006016 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	33b0      	adds	r3, #176	; 0xb0
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	4413      	add	r3, r2
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8006002:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8006004:	68fa      	ldr	r2, [r7, #12]
 8006006:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800600a:	b292      	uxth	r2, r2
 800600c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	22ff      	movs	r2, #255	; 0xff
 8006012:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8006016:	2300      	movs	r3, #0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3710      	adds	r7, #16
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b086      	sub	sp, #24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006028:	2182      	movs	r1, #130	; 0x82
 800602a:	4818      	ldr	r0, [pc, #96]	; (800608c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800602c:	f000 fcd2 	bl	80069d4 <USBD_GetEpDesc>
 8006030:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006032:	2101      	movs	r1, #1
 8006034:	4815      	ldr	r0, [pc, #84]	; (800608c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006036:	f000 fccd 	bl	80069d4 <USBD_GetEpDesc>
 800603a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800603c:	2181      	movs	r1, #129	; 0x81
 800603e:	4813      	ldr	r0, [pc, #76]	; (800608c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006040:	f000 fcc8 	bl	80069d4 <USBD_GetEpDesc>
 8006044:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	2210      	movs	r2, #16
 8006050:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d006      	beq.n	8006066 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2200      	movs	r2, #0
 800605c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006060:	711a      	strb	r2, [r3, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d006      	beq.n	800607a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006074:	711a      	strb	r2, [r3, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2243      	movs	r2, #67	; 0x43
 800607e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006080:	4b02      	ldr	r3, [pc, #8]	; (800608c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	20000050 	.word	0x20000050

08006090 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006098:	2182      	movs	r1, #130	; 0x82
 800609a:	4818      	ldr	r0, [pc, #96]	; (80060fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800609c:	f000 fc9a 	bl	80069d4 <USBD_GetEpDesc>
 80060a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80060a2:	2101      	movs	r1, #1
 80060a4:	4815      	ldr	r0, [pc, #84]	; (80060fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060a6:	f000 fc95 	bl	80069d4 <USBD_GetEpDesc>
 80060aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80060ac:	2181      	movs	r1, #129	; 0x81
 80060ae:	4813      	ldr	r0, [pc, #76]	; (80060fc <USBD_CDC_GetHSCfgDesc+0x6c>)
 80060b0:	f000 fc90 	bl	80069d4 <USBD_GetEpDesc>
 80060b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2210      	movs	r2, #16
 80060c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d006      	beq.n	80060d6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	2200      	movs	r2, #0
 80060cc:	711a      	strb	r2, [r3, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f042 0202 	orr.w	r2, r2, #2
 80060d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d006      	beq.n	80060ea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	711a      	strb	r2, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f042 0202 	orr.w	r2, r2, #2
 80060e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2243      	movs	r2, #67	; 0x43
 80060ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80060f0:	4b02      	ldr	r3, [pc, #8]	; (80060fc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	3718      	adds	r7, #24
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	20000050 	.word	0x20000050

08006100 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006108:	2182      	movs	r1, #130	; 0x82
 800610a:	4818      	ldr	r0, [pc, #96]	; (800616c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800610c:	f000 fc62 	bl	80069d4 <USBD_GetEpDesc>
 8006110:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006112:	2101      	movs	r1, #1
 8006114:	4815      	ldr	r0, [pc, #84]	; (800616c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006116:	f000 fc5d 	bl	80069d4 <USBD_GetEpDesc>
 800611a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800611c:	2181      	movs	r1, #129	; 0x81
 800611e:	4813      	ldr	r0, [pc, #76]	; (800616c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006120:	f000 fc58 	bl	80069d4 <USBD_GetEpDesc>
 8006124:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	2210      	movs	r2, #16
 8006130:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d006      	beq.n	8006146 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2200      	movs	r2, #0
 800613c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006140:	711a      	strb	r2, [r3, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d006      	beq.n	800615a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2200      	movs	r2, #0
 8006150:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006154:	711a      	strb	r2, [r3, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2243      	movs	r2, #67	; 0x43
 800615e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006160:	4b02      	ldr	r3, [pc, #8]	; (800616c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	20000050 	.word	0x20000050

08006170 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	220a      	movs	r2, #10
 800617c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800617e:	4b03      	ldr	r3, [pc, #12]	; (800618c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	2000000c 	.word	0x2000000c

08006190 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d101      	bne.n	80061a4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80061a0:	2303      	movs	r3, #3
 80061a2:	e009      	b.n	80061b8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	33b0      	adds	r3, #176	; 0xb0
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4413      	add	r3, r2
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80061b6:	2300      	movs	r3, #0
}
 80061b8:	4618      	mov	r0, r3
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c2:	4770      	bx	lr

080061c4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	32b0      	adds	r2, #176	; 0xb0
 80061da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061de:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80061e6:	2303      	movs	r3, #3
 80061e8:	e008      	b.n	80061fc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	687a      	ldr	r2, [r7, #4]
 80061f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80061fa:	2300      	movs	r3, #0
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	371c      	adds	r7, #28
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	32b0      	adds	r2, #176	; 0xb0
 800621c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006220:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d101      	bne.n	800622c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006228:	2303      	movs	r3, #3
 800622a:	e004      	b.n	8006236 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr

08006242 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b086      	sub	sp, #24
 8006246:	af00      	add	r7, sp, #0
 8006248:	60f8      	str	r0, [r7, #12]
 800624a:	60b9      	str	r1, [r7, #8]
 800624c:	4613      	mov	r3, r2
 800624e:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d101      	bne.n	800625a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006256:	2303      	movs	r3, #3
 8006258:	e01f      	b.n	800629a <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2200      	movs	r2, #0
 8006266:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	79fa      	ldrb	r2, [r7, #7]
 800628c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f001 fde8 	bl	8007e64 <USBD_LL_Init>
 8006294:	4603      	mov	r3, r0
 8006296:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006298:	7dfb      	ldrb	r3, [r7, #23]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3718      	adds	r7, #24
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b084      	sub	sp, #16
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
 80062aa:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062ac:	2300      	movs	r3, #0
 80062ae:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e025      	b.n	8006306 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	683a      	ldr	r2, [r7, #0]
 80062be:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	32ae      	adds	r2, #174	; 0xae
 80062cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d00f      	beq.n	80062f6 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	32ae      	adds	r2, #174	; 0xae
 80062e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e6:	f107 020e 	add.w	r2, r7, #14
 80062ea:	4610      	mov	r0, r2
 80062ec:	4798      	blx	r3
 80062ee:	4602      	mov	r2, r0
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80062fc:	1c5a      	adds	r2, r3, #1
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f001 fdf0 	bl	8007efc <USBD_LL_Start>
 800631c:	4603      	mov	r3, r0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3708      	adds	r7, #8
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800632e:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006330:	4618      	mov	r0, r3
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	460b      	mov	r3, r1
 8006346:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006352:	2b00      	cmp	r3, #0
 8006354:	d009      	beq.n	800636a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	78fa      	ldrb	r2, [r7, #3]
 8006360:	4611      	mov	r1, r2
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	4798      	blx	r3
 8006366:	4603      	mov	r3, r0
 8006368:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800636a:	7bfb      	ldrb	r3, [r7, #15]
}
 800636c:	4618      	mov	r0, r3
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}

08006374 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006380:	2300      	movs	r3, #0
 8006382:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	78fa      	ldrb	r2, [r7, #3]
 800638e:	4611      	mov	r1, r2
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	4798      	blx	r3
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d001      	beq.n	800639e <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800639a:	2303      	movs	r3, #3
 800639c:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063b8:	6839      	ldr	r1, [r7, #0]
 80063ba:	4618      	mov	r0, r3
 80063bc:	f001 f909 	bl	80075d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80063ce:	461a      	mov	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80063dc:	f003 031f 	and.w	r3, r3, #31
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d01a      	beq.n	800641a <USBD_LL_SetupStage+0x72>
 80063e4:	2b02      	cmp	r3, #2
 80063e6:	d822      	bhi.n	800642e <USBD_LL_SetupStage+0x86>
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <USBD_LL_SetupStage+0x4a>
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d00a      	beq.n	8006406 <USBD_LL_SetupStage+0x5e>
 80063f0:	e01d      	b.n	800642e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fb60 	bl	8006ac0 <USBD_StdDevReq>
 8006400:	4603      	mov	r3, r0
 8006402:	73fb      	strb	r3, [r7, #15]
      break;
 8006404:	e020      	b.n	8006448 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fbc8 	bl	8006ba4 <USBD_StdItfReq>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
      break;
 8006418:	e016      	b.n	8006448 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fc2a 	bl	8006c7c <USBD_StdEPReq>
 8006428:	4603      	mov	r3, r0
 800642a:	73fb      	strb	r3, [r7, #15]
      break;
 800642c:	e00c      	b.n	8006448 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006434:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006438:	b2db      	uxtb	r3, r3
 800643a:	4619      	mov	r1, r3
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f001 fdbd 	bl	8007fbc <USBD_LL_StallEP>
 8006442:	4603      	mov	r3, r0
 8006444:	73fb      	strb	r3, [r7, #15]
      break;
 8006446:	bf00      	nop
  }

  return ret;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006452:	b580      	push	{r7, lr}
 8006454:	b086      	sub	sp, #24
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	460b      	mov	r3, r1
 800645c:	607a      	str	r2, [r7, #4]
 800645e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006460:	2300      	movs	r3, #0
 8006462:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006464:	7afb      	ldrb	r3, [r7, #11]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d16e      	bne.n	8006548 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006470:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006478:	2b03      	cmp	r3, #3
 800647a:	f040 8098 	bne.w	80065ae <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	429a      	cmp	r2, r3
 8006488:	d913      	bls.n	80064b2 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	689a      	ldr	r2, [r3, #8]
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	1ad2      	subs	r2, r2, r3
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	68da      	ldr	r2, [r3, #12]
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	4293      	cmp	r3, r2
 80064a2:	bf28      	it	cs
 80064a4:	4613      	movcs	r3, r2
 80064a6:	461a      	mov	r2, r3
 80064a8:	6879      	ldr	r1, [r7, #4]
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f001 f985 	bl	80077ba <USBD_CtlContinueRx>
 80064b0:	e07d      	b.n	80065ae <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064b8:	f003 031f 	and.w	r3, r3, #31
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d014      	beq.n	80064ea <USBD_LL_DataOutStage+0x98>
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d81d      	bhi.n	8006500 <USBD_LL_DataOutStage+0xae>
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d002      	beq.n	80064ce <USBD_LL_DataOutStage+0x7c>
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d003      	beq.n	80064d4 <USBD_LL_DataOutStage+0x82>
 80064cc:	e018      	b.n	8006500 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	75bb      	strb	r3, [r7, #22]
            break;
 80064d2:	e018      	b.n	8006506 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	4619      	mov	r1, r3
 80064de:	68f8      	ldr	r0, [r7, #12]
 80064e0:	f000 fa5e 	bl	80069a0 <USBD_CoreFindIF>
 80064e4:	4603      	mov	r3, r0
 80064e6:	75bb      	strb	r3, [r7, #22]
            break;
 80064e8:	e00d      	b.n	8006506 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	4619      	mov	r1, r3
 80064f4:	68f8      	ldr	r0, [r7, #12]
 80064f6:	f000 fa60 	bl	80069ba <USBD_CoreFindEP>
 80064fa:	4603      	mov	r3, r0
 80064fc:	75bb      	strb	r3, [r7, #22]
            break;
 80064fe:	e002      	b.n	8006506 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	75bb      	strb	r3, [r7, #22]
            break;
 8006504:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006506:	7dbb      	ldrb	r3, [r7, #22]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d119      	bne.n	8006540 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b03      	cmp	r3, #3
 8006516:	d113      	bne.n	8006540 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006518:	7dba      	ldrb	r2, [r7, #22]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	32ae      	adds	r2, #174	; 0xae
 800651e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006522:	691b      	ldr	r3, [r3, #16]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d00b      	beq.n	8006540 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006528:	7dba      	ldrb	r2, [r7, #22]
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006530:	7dba      	ldrb	r2, [r7, #22]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	32ae      	adds	r2, #174	; 0xae
 8006536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f001 f94b 	bl	80077dc <USBD_CtlSendStatus>
 8006546:	e032      	b.n	80065ae <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006548:	7afb      	ldrb	r3, [r7, #11]
 800654a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800654e:	b2db      	uxtb	r3, r3
 8006550:	4619      	mov	r1, r3
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fa31 	bl	80069ba <USBD_CoreFindEP>
 8006558:	4603      	mov	r3, r0
 800655a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800655c:	7dbb      	ldrb	r3, [r7, #22]
 800655e:	2bff      	cmp	r3, #255	; 0xff
 8006560:	d025      	beq.n	80065ae <USBD_LL_DataOutStage+0x15c>
 8006562:	7dbb      	ldrb	r3, [r7, #22]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d122      	bne.n	80065ae <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b03      	cmp	r3, #3
 8006572:	d117      	bne.n	80065a4 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006574:	7dba      	ldrb	r2, [r7, #22]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	32ae      	adds	r2, #174	; 0xae
 800657a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800657e:	699b      	ldr	r3, [r3, #24]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00f      	beq.n	80065a4 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006584:	7dba      	ldrb	r2, [r7, #22]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800658c:	7dba      	ldrb	r2, [r7, #22]
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	32ae      	adds	r2, #174	; 0xae
 8006592:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	7afa      	ldrb	r2, [r7, #11]
 800659a:	4611      	mov	r1, r2
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	4798      	blx	r3
 80065a0:	4603      	mov	r3, r0
 80065a2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	e000      	b.n	80065b0 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	460b      	mov	r3, r1
 80065c2:	607a      	str	r2, [r7, #4]
 80065c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065c6:	7afb      	ldrb	r3, [r7, #11]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d16f      	bne.n	80066ac <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	3314      	adds	r3, #20
 80065d0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d15a      	bne.n	8006692 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	689a      	ldr	r2, [r3, #8]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	68db      	ldr	r3, [r3, #12]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d914      	bls.n	8006612 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	68db      	ldr	r3, [r3, #12]
 80065f0:	1ad2      	subs	r2, r2, r3
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	689b      	ldr	r3, [r3, #8]
 80065fa:	461a      	mov	r2, r3
 80065fc:	6879      	ldr	r1, [r7, #4]
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f001 f8ad 	bl	800775e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006604:	2300      	movs	r3, #0
 8006606:	2200      	movs	r2, #0
 8006608:	2100      	movs	r1, #0
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f001 fd80 	bl	8008110 <USBD_LL_PrepareReceive>
 8006610:	e03f      	b.n	8006692 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	68da      	ldr	r2, [r3, #12]
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	429a      	cmp	r2, r3
 800661c:	d11c      	bne.n	8006658 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006626:	429a      	cmp	r2, r3
 8006628:	d316      	bcc.n	8006658 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	685a      	ldr	r2, [r3, #4]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006634:	429a      	cmp	r2, r3
 8006636:	d20f      	bcs.n	8006658 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006638:	2200      	movs	r2, #0
 800663a:	2100      	movs	r1, #0
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f001 f88e 	bl	800775e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800664a:	2300      	movs	r3, #0
 800664c:	2200      	movs	r2, #0
 800664e:	2100      	movs	r1, #0
 8006650:	68f8      	ldr	r0, [r7, #12]
 8006652:	f001 fd5d 	bl	8008110 <USBD_LL_PrepareReceive>
 8006656:	e01c      	b.n	8006692 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800665e:	b2db      	uxtb	r3, r3
 8006660:	2b03      	cmp	r3, #3
 8006662:	d10f      	bne.n	8006684 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2200      	movs	r2, #0
 8006674:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006684:	2180      	movs	r1, #128	; 0x80
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f001 fc98 	bl	8007fbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f001 f8b8 	bl	8007802 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d03a      	beq.n	8006712 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f7ff fe42 	bl	8006326 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066aa:	e032      	b.n	8006712 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	4619      	mov	r1, r3
 80066b6:	68f8      	ldr	r0, [r7, #12]
 80066b8:	f000 f97f 	bl	80069ba <USBD_CoreFindEP>
 80066bc:	4603      	mov	r3, r0
 80066be:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	2bff      	cmp	r3, #255	; 0xff
 80066c4:	d025      	beq.n	8006712 <USBD_LL_DataInStage+0x15a>
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d122      	bne.n	8006712 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b03      	cmp	r3, #3
 80066d6:	d11c      	bne.n	8006712 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80066d8:	7dfa      	ldrb	r2, [r7, #23]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	32ae      	adds	r2, #174	; 0xae
 80066de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d014      	beq.n	8006712 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80066e8:	7dfa      	ldrb	r2, [r7, #23]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80066f0:	7dfa      	ldrb	r2, [r7, #23]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	32ae      	adds	r2, #174	; 0xae
 80066f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066fa:	695b      	ldr	r3, [r3, #20]
 80066fc:	7afa      	ldrb	r2, [r7, #11]
 80066fe:	4611      	mov	r1, r2
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	4798      	blx	r3
 8006704:	4603      	mov	r3, r0
 8006706:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006708:	7dbb      	ldrb	r3, [r7, #22]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d001      	beq.n	8006712 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800670e:	7dbb      	ldrb	r3, [r7, #22]
 8006710:	e000      	b.n	8006714 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2201      	movs	r2, #1
 800672c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2200      	movs	r2, #0
 800674a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006754:	2b00      	cmp	r3, #0
 8006756:	d014      	beq.n	8006782 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00e      	beq.n	8006782 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	687a      	ldr	r2, [r7, #4]
 800676e:	6852      	ldr	r2, [r2, #4]
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	4611      	mov	r1, r2
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	4798      	blx	r3
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800677e:	2303      	movs	r3, #3
 8006780:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006782:	2340      	movs	r3, #64	; 0x40
 8006784:	2200      	movs	r2, #0
 8006786:	2100      	movs	r1, #0
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f001 fbd2 	bl	8007f32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2240      	movs	r2, #64	; 0x40
 800679a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800679e:	2340      	movs	r3, #64	; 0x40
 80067a0:	2200      	movs	r2, #0
 80067a2:	2180      	movs	r1, #128	; 0x80
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f001 fbc4 	bl	8007f32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2201      	movs	r2, #1
 80067ae:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2240      	movs	r2, #64	; 0x40
 80067b4:	621a      	str	r2, [r3, #32]

  return ret;
 80067b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	3710      	adds	r7, #16
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}

080067c0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	460b      	mov	r3, r1
 80067ca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	78fa      	ldrb	r2, [r7, #3]
 80067d0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	370c      	adds	r7, #12
 80067d8:	46bd      	mov	sp, r7
 80067da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067de:	4770      	bx	lr

080067e0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b083      	sub	sp, #12
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067ee:	b2da      	uxtb	r2, r3
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2204      	movs	r2, #4
 80067fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80067fe:	2300      	movs	r3, #0
}
 8006800:	4618      	mov	r0, r3
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800681a:	b2db      	uxtb	r3, r3
 800681c:	2b04      	cmp	r3, #4
 800681e:	d106      	bne.n	800682e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006826:	b2da      	uxtb	r2, r3
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800682e:	2300      	movs	r3, #0
}
 8006830:	4618      	mov	r0, r3
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800683c:	b580      	push	{r7, lr}
 800683e:	b082      	sub	sp, #8
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b03      	cmp	r3, #3
 800684e:	d110      	bne.n	8006872 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00b      	beq.n	8006872 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d005      	beq.n	8006872 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3708      	adds	r7, #8
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b082      	sub	sp, #8
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	460b      	mov	r3, r1
 8006886:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	32ae      	adds	r2, #174	; 0xae
 8006892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d101      	bne.n	800689e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800689a:	2303      	movs	r3, #3
 800689c:	e01c      	b.n	80068d8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b03      	cmp	r3, #3
 80068a8:	d115      	bne.n	80068d6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	32ae      	adds	r2, #174	; 0xae
 80068b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068b8:	6a1b      	ldr	r3, [r3, #32]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00b      	beq.n	80068d6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	32ae      	adds	r2, #174	; 0xae
 80068c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	78fa      	ldrb	r2, [r7, #3]
 80068d0:	4611      	mov	r1, r2
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80068d6:	2300      	movs	r3, #0
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3708      	adds	r7, #8
 80068dc:	46bd      	mov	sp, r7
 80068de:	bd80      	pop	{r7, pc}

080068e0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	460b      	mov	r3, r1
 80068ea:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	32ae      	adds	r2, #174	; 0xae
 80068f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80068fe:	2303      	movs	r3, #3
 8006900:	e01c      	b.n	800693c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006908:	b2db      	uxtb	r3, r3
 800690a:	2b03      	cmp	r3, #3
 800690c:	d115      	bne.n	800693a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	32ae      	adds	r2, #174	; 0xae
 8006918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800691e:	2b00      	cmp	r3, #0
 8006920:	d00b      	beq.n	800693a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	32ae      	adds	r2, #174	; 0xae
 800692c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006932:	78fa      	ldrb	r2, [r7, #3]
 8006934:	4611      	mov	r1, r2
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800694c:	2300      	movs	r3, #0
}
 800694e:	4618      	mov	r0, r3
 8006950:	370c      	adds	r7, #12
 8006952:	46bd      	mov	sp, r7
 8006954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006958:	4770      	bx	lr

0800695a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800695a:	b580      	push	{r7, lr}
 800695c:	b084      	sub	sp, #16
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00e      	beq.n	8006996 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	687a      	ldr	r2, [r7, #4]
 8006982:	6852      	ldr	r2, [r2, #4]
 8006984:	b2d2      	uxtb	r2, r2
 8006986:	4611      	mov	r1, r2
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	4798      	blx	r3
 800698c:	4603      	mov	r3, r0
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006992:	2303      	movs	r3, #3
 8006994:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006996:	7bfb      	ldrb	r3, [r7, #15]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3710      	adds	r7, #16
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	460b      	mov	r3, r1
 80069aa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069ac:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr

080069ba <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069ba:	b480      	push	{r7}
 80069bc:	b083      	sub	sp, #12
 80069be:	af00      	add	r7, sp, #0
 80069c0:	6078      	str	r0, [r7, #4]
 80069c2:	460b      	mov	r3, r1
 80069c4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069c6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	370c      	adds	r7, #12
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80069e8:	2300      	movs	r3, #0
 80069ea:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	885b      	ldrh	r3, [r3, #2]
 80069f0:	b29a      	uxth	r2, r3
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d920      	bls.n	8006a3e <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	b29b      	uxth	r3, r3
 8006a02:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a04:	e013      	b.n	8006a2e <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a06:	f107 030a 	add.w	r3, r7, #10
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	6978      	ldr	r0, [r7, #20]
 8006a0e:	f000 f81b 	bl	8006a48 <USBD_GetNextDesc>
 8006a12:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b05      	cmp	r3, #5
 8006a1a:	d108      	bne.n	8006a2e <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	789b      	ldrb	r3, [r3, #2]
 8006a24:	78fa      	ldrb	r2, [r7, #3]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d008      	beq.n	8006a3c <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	885b      	ldrh	r3, [r3, #2]
 8006a32:	b29a      	uxth	r2, r3
 8006a34:	897b      	ldrh	r3, [r7, #10]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d8e5      	bhi.n	8006a06 <USBD_GetEpDesc+0x32>
 8006a3a:	e000      	b.n	8006a3e <USBD_GetEpDesc+0x6a>
          break;
 8006a3c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a3e:	693b      	ldr	r3, [r7, #16]
}
 8006a40:	4618      	mov	r0, r3
 8006a42:	3718      	adds	r7, #24
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	881a      	ldrh	r2, [r3, #0]
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	4413      	add	r3, r2
 8006a62:	b29a      	uxth	r2, r3
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4413      	add	r3, r2
 8006a72:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006a74:	68fb      	ldr	r3, [r7, #12]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b087      	sub	sp, #28
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	3301      	adds	r3, #1
 8006a98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006aa0:	8a3b      	ldrh	r3, [r7, #16]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	b21a      	sxth	r2, r3
 8006aa6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	b21b      	sxth	r3, r3
 8006aae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ab0:	89fb      	ldrh	r3, [r7, #14]
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	371c      	adds	r7, #28
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
	...

08006ac0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b084      	sub	sp, #16
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aca:	2300      	movs	r3, #0
 8006acc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ad6:	2b40      	cmp	r3, #64	; 0x40
 8006ad8:	d005      	beq.n	8006ae6 <USBD_StdDevReq+0x26>
 8006ada:	2b40      	cmp	r3, #64	; 0x40
 8006adc:	d857      	bhi.n	8006b8e <USBD_StdDevReq+0xce>
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00f      	beq.n	8006b02 <USBD_StdDevReq+0x42>
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d153      	bne.n	8006b8e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	32ae      	adds	r2, #174	; 0xae
 8006af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	4798      	blx	r3
 8006afc:	4603      	mov	r3, r0
 8006afe:	73fb      	strb	r3, [r7, #15]
      break;
 8006b00:	e04a      	b.n	8006b98 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	d83b      	bhi.n	8006b82 <USBD_StdDevReq+0xc2>
 8006b0a:	a201      	add	r2, pc, #4	; (adr r2, 8006b10 <USBD_StdDevReq+0x50>)
 8006b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b10:	08006b65 	.word	0x08006b65
 8006b14:	08006b79 	.word	0x08006b79
 8006b18:	08006b83 	.word	0x08006b83
 8006b1c:	08006b6f 	.word	0x08006b6f
 8006b20:	08006b83 	.word	0x08006b83
 8006b24:	08006b43 	.word	0x08006b43
 8006b28:	08006b39 	.word	0x08006b39
 8006b2c:	08006b83 	.word	0x08006b83
 8006b30:	08006b5b 	.word	0x08006b5b
 8006b34:	08006b4d 	.word	0x08006b4d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa3c 	bl	8006fb8 <USBD_GetDescriptor>
          break;
 8006b40:	e024      	b.n	8006b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b42:	6839      	ldr	r1, [r7, #0]
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f000 fba1 	bl	800728c <USBD_SetAddress>
          break;
 8006b4a:	e01f      	b.n	8006b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b4c:	6839      	ldr	r1, [r7, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fbe0 	bl	8007314 <USBD_SetConfig>
 8006b54:	4603      	mov	r3, r0
 8006b56:	73fb      	strb	r3, [r7, #15]
          break;
 8006b58:	e018      	b.n	8006b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f000 fc83 	bl	8007468 <USBD_GetConfig>
          break;
 8006b62:	e013      	b.n	8006b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b64:	6839      	ldr	r1, [r7, #0]
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 fcb4 	bl	80074d4 <USBD_GetStatus>
          break;
 8006b6c:	e00e      	b.n	8006b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 fce3 	bl	800753c <USBD_SetFeature>
          break;
 8006b76:	e009      	b.n	8006b8c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006b78:	6839      	ldr	r1, [r7, #0]
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fd07 	bl	800758e <USBD_ClrFeature>
          break;
 8006b80:	e004      	b.n	8006b8c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006b82:	6839      	ldr	r1, [r7, #0]
 8006b84:	6878      	ldr	r0, [r7, #4]
 8006b86:	f000 fd5e 	bl	8007646 <USBD_CtlError>
          break;
 8006b8a:	bf00      	nop
      }
      break;
 8006b8c:	e004      	b.n	8006b98 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006b8e:	6839      	ldr	r1, [r7, #0]
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f000 fd58 	bl	8007646 <USBD_CtlError>
      break;
 8006b96:	bf00      	nop
  }

  return ret;
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3710      	adds	r7, #16
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop

08006ba4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bba:	2b40      	cmp	r3, #64	; 0x40
 8006bbc:	d005      	beq.n	8006bca <USBD_StdItfReq+0x26>
 8006bbe:	2b40      	cmp	r3, #64	; 0x40
 8006bc0:	d852      	bhi.n	8006c68 <USBD_StdItfReq+0xc4>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <USBD_StdItfReq+0x26>
 8006bc6:	2b20      	cmp	r3, #32
 8006bc8:	d14e      	bne.n	8006c68 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d840      	bhi.n	8006c5a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	889b      	ldrh	r3, [r3, #4]
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d836      	bhi.n	8006c50 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	889b      	ldrh	r3, [r3, #4]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff fed8 	bl	80069a0 <USBD_CoreFindIF>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006bf4:	7bbb      	ldrb	r3, [r7, #14]
 8006bf6:	2bff      	cmp	r3, #255	; 0xff
 8006bf8:	d01d      	beq.n	8006c36 <USBD_StdItfReq+0x92>
 8006bfa:	7bbb      	ldrb	r3, [r7, #14]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d11a      	bne.n	8006c36 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c00:	7bba      	ldrb	r2, [r7, #14]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	32ae      	adds	r2, #174	; 0xae
 8006c06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00f      	beq.n	8006c30 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c10:	7bba      	ldrb	r2, [r7, #14]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c18:	7bba      	ldrb	r2, [r7, #14]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	32ae      	adds	r2, #174	; 0xae
 8006c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	6839      	ldr	r1, [r7, #0]
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c2e:	e004      	b.n	8006c3a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c30:	2303      	movs	r3, #3
 8006c32:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c34:	e001      	b.n	8006c3a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c36:	2303      	movs	r3, #3
 8006c38:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	88db      	ldrh	r3, [r3, #6]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d110      	bne.n	8006c64 <USBD_StdItfReq+0xc0>
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d10d      	bne.n	8006c64 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 fdc7 	bl	80077dc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c4e:	e009      	b.n	8006c64 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c50:	6839      	ldr	r1, [r7, #0]
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fcf7 	bl	8007646 <USBD_CtlError>
          break;
 8006c58:	e004      	b.n	8006c64 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 fcf2 	bl	8007646 <USBD_CtlError>
          break;
 8006c62:	e000      	b.n	8006c66 <USBD_StdItfReq+0xc2>
          break;
 8006c64:	bf00      	nop
      }
      break;
 8006c66:	e004      	b.n	8006c72 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fceb 	bl	8007646 <USBD_CtlError>
      break;
 8006c70:	bf00      	nop
  }

  return ret;
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3710      	adds	r7, #16
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006c86:	2300      	movs	r3, #0
 8006c88:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	889b      	ldrh	r3, [r3, #4]
 8006c8e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	781b      	ldrb	r3, [r3, #0]
 8006c94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c98:	2b40      	cmp	r3, #64	; 0x40
 8006c9a:	d007      	beq.n	8006cac <USBD_StdEPReq+0x30>
 8006c9c:	2b40      	cmp	r3, #64	; 0x40
 8006c9e:	f200 817f 	bhi.w	8006fa0 <USBD_StdEPReq+0x324>
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d02a      	beq.n	8006cfc <USBD_StdEPReq+0x80>
 8006ca6:	2b20      	cmp	r3, #32
 8006ca8:	f040 817a 	bne.w	8006fa0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cac:	7bbb      	ldrb	r3, [r7, #14]
 8006cae:	4619      	mov	r1, r3
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff fe82 	bl	80069ba <USBD_CoreFindEP>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cba:	7b7b      	ldrb	r3, [r7, #13]
 8006cbc:	2bff      	cmp	r3, #255	; 0xff
 8006cbe:	f000 8174 	beq.w	8006faa <USBD_StdEPReq+0x32e>
 8006cc2:	7b7b      	ldrb	r3, [r7, #13]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f040 8170 	bne.w	8006faa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006cca:	7b7a      	ldrb	r2, [r7, #13]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006cd2:	7b7a      	ldrb	r2, [r7, #13]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	32ae      	adds	r2, #174	; 0xae
 8006cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8163 	beq.w	8006faa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006ce4:	7b7a      	ldrb	r2, [r7, #13]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	32ae      	adds	r2, #174	; 0xae
 8006cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	4798      	blx	r3
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006cfa:	e156      	b.n	8006faa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	785b      	ldrb	r3, [r3, #1]
 8006d00:	2b03      	cmp	r3, #3
 8006d02:	d008      	beq.n	8006d16 <USBD_StdEPReq+0x9a>
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	f300 8145 	bgt.w	8006f94 <USBD_StdEPReq+0x318>
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 809b 	beq.w	8006e46 <USBD_StdEPReq+0x1ca>
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d03c      	beq.n	8006d8e <USBD_StdEPReq+0x112>
 8006d14:	e13e      	b.n	8006f94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d1c:	b2db      	uxtb	r3, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d002      	beq.n	8006d28 <USBD_StdEPReq+0xac>
 8006d22:	2b03      	cmp	r3, #3
 8006d24:	d016      	beq.n	8006d54 <USBD_StdEPReq+0xd8>
 8006d26:	e02c      	b.n	8006d82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d28:	7bbb      	ldrb	r3, [r7, #14]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00d      	beq.n	8006d4a <USBD_StdEPReq+0xce>
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	2b80      	cmp	r3, #128	; 0x80
 8006d32:	d00a      	beq.n	8006d4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f001 f93f 	bl	8007fbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d3e:	2180      	movs	r1, #128	; 0x80
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	f001 f93b 	bl	8007fbc <USBD_LL_StallEP>
 8006d46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d48:	e020      	b.n	8006d8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 fc7a 	bl	8007646 <USBD_CtlError>
              break;
 8006d52:	e01b      	b.n	8006d8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	885b      	ldrh	r3, [r3, #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10e      	bne.n	8006d7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <USBD_StdEPReq+0xfe>
 8006d62:	7bbb      	ldrb	r3, [r7, #14]
 8006d64:	2b80      	cmp	r3, #128	; 0x80
 8006d66:	d008      	beq.n	8006d7a <USBD_StdEPReq+0xfe>
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	88db      	ldrh	r3, [r3, #6]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d104      	bne.n	8006d7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d70:	7bbb      	ldrb	r3, [r7, #14]
 8006d72:	4619      	mov	r1, r3
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f001 f921 	bl	8007fbc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 fd2e 	bl	80077dc <USBD_CtlSendStatus>

              break;
 8006d80:	e004      	b.n	8006d8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006d82:	6839      	ldr	r1, [r7, #0]
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc5e 	bl	8007646 <USBD_CtlError>
              break;
 8006d8a:	bf00      	nop
          }
          break;
 8006d8c:	e107      	b.n	8006f9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d94:	b2db      	uxtb	r3, r3
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d002      	beq.n	8006da0 <USBD_StdEPReq+0x124>
 8006d9a:	2b03      	cmp	r3, #3
 8006d9c:	d016      	beq.n	8006dcc <USBD_StdEPReq+0x150>
 8006d9e:	e04b      	b.n	8006e38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d00d      	beq.n	8006dc2 <USBD_StdEPReq+0x146>
 8006da6:	7bbb      	ldrb	r3, [r7, #14]
 8006da8:	2b80      	cmp	r3, #128	; 0x80
 8006daa:	d00a      	beq.n	8006dc2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dac:	7bbb      	ldrb	r3, [r7, #14]
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f001 f903 	bl	8007fbc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006db6:	2180      	movs	r1, #128	; 0x80
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f001 f8ff 	bl	8007fbc <USBD_LL_StallEP>
 8006dbe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dc0:	e040      	b.n	8006e44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006dc2:	6839      	ldr	r1, [r7, #0]
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 fc3e 	bl	8007646 <USBD_CtlError>
              break;
 8006dca:	e03b      	b.n	8006e44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	885b      	ldrh	r3, [r3, #2]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d136      	bne.n	8006e42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006dd4:	7bbb      	ldrb	r3, [r7, #14]
 8006dd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d004      	beq.n	8006de8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006dde:	7bbb      	ldrb	r3, [r7, #14]
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f001 f909 	bl	8007ffa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fcf7 	bl	80077dc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006dee:	7bbb      	ldrb	r3, [r7, #14]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f7ff fde1 	bl	80069ba <USBD_CoreFindEP>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006dfc:	7b7b      	ldrb	r3, [r7, #13]
 8006dfe:	2bff      	cmp	r3, #255	; 0xff
 8006e00:	d01f      	beq.n	8006e42 <USBD_StdEPReq+0x1c6>
 8006e02:	7b7b      	ldrb	r3, [r7, #13]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d11c      	bne.n	8006e42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e08:	7b7a      	ldrb	r2, [r7, #13]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e10:	7b7a      	ldrb	r2, [r7, #13]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	32ae      	adds	r2, #174	; 0xae
 8006e16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d010      	beq.n	8006e42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e20:	7b7a      	ldrb	r2, [r7, #13]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	32ae      	adds	r2, #174	; 0xae
 8006e26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	6839      	ldr	r1, [r7, #0]
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	4798      	blx	r3
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e36:	e004      	b.n	8006e42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e38:	6839      	ldr	r1, [r7, #0]
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 fc03 	bl	8007646 <USBD_CtlError>
              break;
 8006e40:	e000      	b.n	8006e44 <USBD_StdEPReq+0x1c8>
              break;
 8006e42:	bf00      	nop
          }
          break;
 8006e44:	e0ab      	b.n	8006f9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	2b02      	cmp	r3, #2
 8006e50:	d002      	beq.n	8006e58 <USBD_StdEPReq+0x1dc>
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d032      	beq.n	8006ebc <USBD_StdEPReq+0x240>
 8006e56:	e097      	b.n	8006f88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e58:	7bbb      	ldrb	r3, [r7, #14]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d007      	beq.n	8006e6e <USBD_StdEPReq+0x1f2>
 8006e5e:	7bbb      	ldrb	r3, [r7, #14]
 8006e60:	2b80      	cmp	r3, #128	; 0x80
 8006e62:	d004      	beq.n	8006e6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fbed 	bl	8007646 <USBD_CtlError>
                break;
 8006e6c:	e091      	b.n	8006f92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	da0b      	bge.n	8006e8e <USBD_StdEPReq+0x212>
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	009b      	lsls	r3, r3, #2
 8006e84:	3310      	adds	r3, #16
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	4413      	add	r3, r2
 8006e8a:	3304      	adds	r3, #4
 8006e8c:	e00b      	b.n	8006ea6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2202      	movs	r2, #2
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 fc37 	bl	8007728 <USBD_CtlSendData>
              break;
 8006eba:	e06a      	b.n	8006f92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ebc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	da11      	bge.n	8006ee8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ec4:	7bbb      	ldrb	r3, [r7, #14]
 8006ec6:	f003 020f 	and.w	r2, r3, #15
 8006eca:	6879      	ldr	r1, [r7, #4]
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	3324      	adds	r3, #36	; 0x24
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d117      	bne.n	8006f0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fbb0 	bl	8007646 <USBD_CtlError>
                  break;
 8006ee6:	e054      	b.n	8006f92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ee8:	7bbb      	ldrb	r3, [r7, #14]
 8006eea:	f003 020f 	and.w	r2, r3, #15
 8006eee:	6879      	ldr	r1, [r7, #4]
 8006ef0:	4613      	mov	r3, r2
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4413      	add	r3, r2
 8006ef6:	009b      	lsls	r3, r3, #2
 8006ef8:	440b      	add	r3, r1
 8006efa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006efe:	881b      	ldrh	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d104      	bne.n	8006f0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f04:	6839      	ldr	r1, [r7, #0]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fb9d 	bl	8007646 <USBD_CtlError>
                  break;
 8006f0c:	e041      	b.n	8006f92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	da0b      	bge.n	8006f2e <USBD_StdEPReq+0x2b2>
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	3310      	adds	r3, #16
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	4413      	add	r3, r2
 8006f2a:	3304      	adds	r3, #4
 8006f2c:	e00b      	b.n	8006f46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f2e:	7bbb      	ldrb	r3, [r7, #14]
 8006f30:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f34:	4613      	mov	r3, r2
 8006f36:	009b      	lsls	r3, r3, #2
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	3304      	adds	r3, #4
 8006f46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f48:	7bbb      	ldrb	r3, [r7, #14]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d002      	beq.n	8006f54 <USBD_StdEPReq+0x2d8>
 8006f4e:	7bbb      	ldrb	r3, [r7, #14]
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d103      	bne.n	8006f5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	e00e      	b.n	8006f7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f5c:	7bbb      	ldrb	r3, [r7, #14]
 8006f5e:	4619      	mov	r1, r3
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f001 f869 	bl	8008038 <USBD_LL_IsStallEP>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d003      	beq.n	8006f74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e002      	b.n	8006f7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	2200      	movs	r2, #0
 8006f78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fbd1 	bl	8007728 <USBD_CtlSendData>
              break;
 8006f86:	e004      	b.n	8006f92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fb5b 	bl	8007646 <USBD_CtlError>
              break;
 8006f90:	bf00      	nop
          }
          break;
 8006f92:	e004      	b.n	8006f9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006f94:	6839      	ldr	r1, [r7, #0]
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb55 	bl	8007646 <USBD_CtlError>
          break;
 8006f9c:	bf00      	nop
      }
      break;
 8006f9e:	e005      	b.n	8006fac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fa0:	6839      	ldr	r1, [r7, #0]
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f000 fb4f 	bl	8007646 <USBD_CtlError>
      break;
 8006fa8:	e000      	b.n	8006fac <USBD_StdEPReq+0x330>
      break;
 8006faa:	bf00      	nop
  }

  return ret;
 8006fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3710      	adds	r7, #16
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	885b      	ldrh	r3, [r3, #2]
 8006fd2:	0a1b      	lsrs	r3, r3, #8
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	2b06      	cmp	r3, #6
 8006fda:	f200 8128 	bhi.w	800722e <USBD_GetDescriptor+0x276>
 8006fde:	a201      	add	r2, pc, #4	; (adr r2, 8006fe4 <USBD_GetDescriptor+0x2c>)
 8006fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fe4:	08007001 	.word	0x08007001
 8006fe8:	08007019 	.word	0x08007019
 8006fec:	08007059 	.word	0x08007059
 8006ff0:	0800722f 	.word	0x0800722f
 8006ff4:	0800722f 	.word	0x0800722f
 8006ff8:	080071cf 	.word	0x080071cf
 8006ffc:	080071fb 	.word	0x080071fb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7c12      	ldrb	r2, [r2, #16]
 800700c:	f107 0108 	add.w	r1, r7, #8
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
      break;
 8007016:	e112      	b.n	800723e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	7c1b      	ldrb	r3, [r3, #16]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d10d      	bne.n	800703c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007028:	f107 0208 	add.w	r2, r7, #8
 800702c:	4610      	mov	r0, r2
 800702e:	4798      	blx	r3
 8007030:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	3301      	adds	r3, #1
 8007036:	2202      	movs	r2, #2
 8007038:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800703a:	e100      	b.n	800723e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007044:	f107 0208 	add.w	r2, r7, #8
 8007048:	4610      	mov	r0, r2
 800704a:	4798      	blx	r3
 800704c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3301      	adds	r3, #1
 8007052:	2202      	movs	r2, #2
 8007054:	701a      	strb	r2, [r3, #0]
      break;
 8007056:	e0f2      	b.n	800723e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	885b      	ldrh	r3, [r3, #2]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b05      	cmp	r3, #5
 8007060:	f200 80ac 	bhi.w	80071bc <USBD_GetDescriptor+0x204>
 8007064:	a201      	add	r2, pc, #4	; (adr r2, 800706c <USBD_GetDescriptor+0xb4>)
 8007066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706a:	bf00      	nop
 800706c:	08007085 	.word	0x08007085
 8007070:	080070b9 	.word	0x080070b9
 8007074:	080070ed 	.word	0x080070ed
 8007078:	08007121 	.word	0x08007121
 800707c:	08007155 	.word	0x08007155
 8007080:	08007189 	.word	0x08007189
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	7c12      	ldrb	r2, [r2, #16]
 800709c:	f107 0108 	add.w	r1, r7, #8
 80070a0:	4610      	mov	r0, r2
 80070a2:	4798      	blx	r3
 80070a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070a6:	e091      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 facb 	bl	8007646 <USBD_CtlError>
            err++;
 80070b0:	7afb      	ldrb	r3, [r7, #11]
 80070b2:	3301      	adds	r3, #1
 80070b4:	72fb      	strb	r3, [r7, #11]
          break;
 80070b6:	e089      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d00b      	beq.n	80070dc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	7c12      	ldrb	r2, [r2, #16]
 80070d0:	f107 0108 	add.w	r1, r7, #8
 80070d4:	4610      	mov	r0, r2
 80070d6:	4798      	blx	r3
 80070d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070da:	e077      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070dc:	6839      	ldr	r1, [r7, #0]
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fab1 	bl	8007646 <USBD_CtlError>
            err++;
 80070e4:	7afb      	ldrb	r3, [r7, #11]
 80070e6:	3301      	adds	r3, #1
 80070e8:	72fb      	strb	r3, [r7, #11]
          break;
 80070ea:	e06f      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d00b      	beq.n	8007110 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	687a      	ldr	r2, [r7, #4]
 8007102:	7c12      	ldrb	r2, [r2, #16]
 8007104:	f107 0108 	add.w	r1, r7, #8
 8007108:	4610      	mov	r0, r2
 800710a:	4798      	blx	r3
 800710c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800710e:	e05d      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 fa97 	bl	8007646 <USBD_CtlError>
            err++;
 8007118:	7afb      	ldrb	r3, [r7, #11]
 800711a:	3301      	adds	r3, #1
 800711c:	72fb      	strb	r3, [r7, #11]
          break;
 800711e:	e055      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00b      	beq.n	8007144 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007132:	691b      	ldr	r3, [r3, #16]
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	7c12      	ldrb	r2, [r2, #16]
 8007138:	f107 0108 	add.w	r1, r7, #8
 800713c:	4610      	mov	r0, r2
 800713e:	4798      	blx	r3
 8007140:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007142:	e043      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007144:	6839      	ldr	r1, [r7, #0]
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	f000 fa7d 	bl	8007646 <USBD_CtlError>
            err++;
 800714c:	7afb      	ldrb	r3, [r7, #11]
 800714e:	3301      	adds	r3, #1
 8007150:	72fb      	strb	r3, [r7, #11]
          break;
 8007152:	e03b      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800715a:	695b      	ldr	r3, [r3, #20]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00b      	beq.n	8007178 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	7c12      	ldrb	r2, [r2, #16]
 800716c:	f107 0108 	add.w	r1, r7, #8
 8007170:	4610      	mov	r0, r2
 8007172:	4798      	blx	r3
 8007174:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007176:	e029      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fa63 	bl	8007646 <USBD_CtlError>
            err++;
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	3301      	adds	r3, #1
 8007184:	72fb      	strb	r3, [r7, #11]
          break;
 8007186:	e021      	b.n	80071cc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00b      	beq.n	80071ac <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800719a:	699b      	ldr	r3, [r3, #24]
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	7c12      	ldrb	r2, [r2, #16]
 80071a0:	f107 0108 	add.w	r1, r7, #8
 80071a4:	4610      	mov	r0, r2
 80071a6:	4798      	blx	r3
 80071a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071aa:	e00f      	b.n	80071cc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071ac:	6839      	ldr	r1, [r7, #0]
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	f000 fa49 	bl	8007646 <USBD_CtlError>
            err++;
 80071b4:	7afb      	ldrb	r3, [r7, #11]
 80071b6:	3301      	adds	r3, #1
 80071b8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ba:	e007      	b.n	80071cc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 fa41 	bl	8007646 <USBD_CtlError>
          err++;
 80071c4:	7afb      	ldrb	r3, [r7, #11]
 80071c6:	3301      	adds	r3, #1
 80071c8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071ca:	bf00      	nop
      }
      break;
 80071cc:	e037      	b.n	800723e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	7c1b      	ldrb	r3, [r3, #16]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d109      	bne.n	80071ea <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071de:	f107 0208 	add.w	r2, r7, #8
 80071e2:	4610      	mov	r0, r2
 80071e4:	4798      	blx	r3
 80071e6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071e8:	e029      	b.n	800723e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071ea:	6839      	ldr	r1, [r7, #0]
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 fa2a 	bl	8007646 <USBD_CtlError>
        err++;
 80071f2:	7afb      	ldrb	r3, [r7, #11]
 80071f4:	3301      	adds	r3, #1
 80071f6:	72fb      	strb	r3, [r7, #11]
      break;
 80071f8:	e021      	b.n	800723e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	7c1b      	ldrb	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d10d      	bne.n	800721e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800720a:	f107 0208 	add.w	r2, r7, #8
 800720e:	4610      	mov	r0, r2
 8007210:	4798      	blx	r3
 8007212:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	3301      	adds	r3, #1
 8007218:	2207      	movs	r2, #7
 800721a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800721c:	e00f      	b.n	800723e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fa10 	bl	8007646 <USBD_CtlError>
        err++;
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	3301      	adds	r3, #1
 800722a:	72fb      	strb	r3, [r7, #11]
      break;
 800722c:	e007      	b.n	800723e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800722e:	6839      	ldr	r1, [r7, #0]
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fa08 	bl	8007646 <USBD_CtlError>
      err++;
 8007236:	7afb      	ldrb	r3, [r7, #11]
 8007238:	3301      	adds	r3, #1
 800723a:	72fb      	strb	r3, [r7, #11]
      break;
 800723c:	bf00      	nop
  }

  if (err != 0U)
 800723e:	7afb      	ldrb	r3, [r7, #11]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d11e      	bne.n	8007282 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	88db      	ldrh	r3, [r3, #6]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d016      	beq.n	800727a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800724c:	893b      	ldrh	r3, [r7, #8]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00e      	beq.n	8007270 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	88da      	ldrh	r2, [r3, #6]
 8007256:	893b      	ldrh	r3, [r7, #8]
 8007258:	4293      	cmp	r3, r2
 800725a:	bf28      	it	cs
 800725c:	4613      	movcs	r3, r2
 800725e:	b29b      	uxth	r3, r3
 8007260:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007262:	893b      	ldrh	r3, [r7, #8]
 8007264:	461a      	mov	r2, r3
 8007266:	68f9      	ldr	r1, [r7, #12]
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 fa5d 	bl	8007728 <USBD_CtlSendData>
 800726e:	e009      	b.n	8007284 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007270:	6839      	ldr	r1, [r7, #0]
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f9e7 	bl	8007646 <USBD_CtlError>
 8007278:	e004      	b.n	8007284 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 faae 	bl	80077dc <USBD_CtlSendStatus>
 8007280:	e000      	b.n	8007284 <USBD_GetDescriptor+0x2cc>
    return;
 8007282:	bf00      	nop
  }
}
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop

0800728c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b084      	sub	sp, #16
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	889b      	ldrh	r3, [r3, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d131      	bne.n	8007302 <USBD_SetAddress+0x76>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	88db      	ldrh	r3, [r3, #6]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d12d      	bne.n	8007302 <USBD_SetAddress+0x76>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	885b      	ldrh	r3, [r3, #2]
 80072aa:	2b7f      	cmp	r3, #127	; 0x7f
 80072ac:	d829      	bhi.n	8007302 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	885b      	ldrh	r3, [r3, #2]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	2b03      	cmp	r3, #3
 80072c4:	d104      	bne.n	80072d0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072c6:	6839      	ldr	r1, [r7, #0]
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 f9bc 	bl	8007646 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ce:	e01d      	b.n	800730c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	7bfa      	ldrb	r2, [r7, #15]
 80072d4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072d8:	7bfb      	ldrb	r3, [r7, #15]
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fed7 	bl	8008090 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fa7a 	bl	80077dc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d004      	beq.n	80072f8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2202      	movs	r2, #2
 80072f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072f6:	e009      	b.n	800730c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007300:	e004      	b.n	800730c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007302:	6839      	ldr	r1, [r7, #0]
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f99e 	bl	8007646 <USBD_CtlError>
  }
}
 800730a:	bf00      	nop
 800730c:	bf00      	nop
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007322:	683b      	ldr	r3, [r7, #0]
 8007324:	885b      	ldrh	r3, [r3, #2]
 8007326:	b2da      	uxtb	r2, r3
 8007328:	4b4e      	ldr	r3, [pc, #312]	; (8007464 <USBD_SetConfig+0x150>)
 800732a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800732c:	4b4d      	ldr	r3, [pc, #308]	; (8007464 <USBD_SetConfig+0x150>)
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d905      	bls.n	8007340 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007334:	6839      	ldr	r1, [r7, #0]
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 f985 	bl	8007646 <USBD_CtlError>
    return USBD_FAIL;
 800733c:	2303      	movs	r3, #3
 800733e:	e08c      	b.n	800745a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b02      	cmp	r3, #2
 800734a:	d002      	beq.n	8007352 <USBD_SetConfig+0x3e>
 800734c:	2b03      	cmp	r3, #3
 800734e:	d029      	beq.n	80073a4 <USBD_SetConfig+0x90>
 8007350:	e075      	b.n	800743e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007352:	4b44      	ldr	r3, [pc, #272]	; (8007464 <USBD_SetConfig+0x150>)
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d020      	beq.n	800739c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800735a:	4b42      	ldr	r3, [pc, #264]	; (8007464 <USBD_SetConfig+0x150>)
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	461a      	mov	r2, r3
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007364:	4b3f      	ldr	r3, [pc, #252]	; (8007464 <USBD_SetConfig+0x150>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	4619      	mov	r1, r3
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fe ffe6 	bl	800633c <USBD_SetClassConfig>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d008      	beq.n	800738c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800737a:	6839      	ldr	r1, [r7, #0]
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 f962 	bl	8007646 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2202      	movs	r2, #2
 8007386:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800738a:	e065      	b.n	8007458 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fa25 	bl	80077dc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2203      	movs	r2, #3
 8007396:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800739a:	e05d      	b.n	8007458 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800739c:	6878      	ldr	r0, [r7, #4]
 800739e:	f000 fa1d 	bl	80077dc <USBD_CtlSendStatus>
      break;
 80073a2:	e059      	b.n	8007458 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073a4:	4b2f      	ldr	r3, [pc, #188]	; (8007464 <USBD_SetConfig+0x150>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d112      	bne.n	80073d2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2202      	movs	r2, #2
 80073b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073b4:	4b2b      	ldr	r3, [pc, #172]	; (8007464 <USBD_SetConfig+0x150>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073be:	4b29      	ldr	r3, [pc, #164]	; (8007464 <USBD_SetConfig+0x150>)
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	4619      	mov	r1, r3
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fe ffd5 	bl	8006374 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa06 	bl	80077dc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073d0:	e042      	b.n	8007458 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80073d2:	4b24      	ldr	r3, [pc, #144]	; (8007464 <USBD_SetConfig+0x150>)
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d02a      	beq.n	8007436 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f7fe ffc3 	bl	8006374 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80073ee:	4b1d      	ldr	r3, [pc, #116]	; (8007464 <USBD_SetConfig+0x150>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	461a      	mov	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073f8:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <USBD_SetConfig+0x150>)
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	4619      	mov	r1, r3
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f7fe ff9c 	bl	800633c <USBD_SetClassConfig>
 8007404:	4603      	mov	r3, r0
 8007406:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007408:	7bfb      	ldrb	r3, [r7, #15]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00f      	beq.n	800742e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 f918 	bl	8007646 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	b2db      	uxtb	r3, r3
 800741c:	4619      	mov	r1, r3
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fe ffa8 	bl	8006374 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800742c:	e014      	b.n	8007458 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9d4 	bl	80077dc <USBD_CtlSendStatus>
      break;
 8007434:	e010      	b.n	8007458 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f9d0 	bl	80077dc <USBD_CtlSendStatus>
      break;
 800743c:	e00c      	b.n	8007458 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f900 	bl	8007646 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007446:	4b07      	ldr	r3, [pc, #28]	; (8007464 <USBD_SetConfig+0x150>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7fe ff91 	bl	8006374 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007452:	2303      	movs	r3, #3
 8007454:	73fb      	strb	r3, [r7, #15]
      break;
 8007456:	bf00      	nop
  }

  return ret;
 8007458:	7bfb      	ldrb	r3, [r7, #15]
}
 800745a:	4618      	mov	r0, r3
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	200001cc 	.word	0x200001cc

08007468 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	88db      	ldrh	r3, [r3, #6]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d004      	beq.n	8007484 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f8e2 	bl	8007646 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007482:	e023      	b.n	80074cc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	dc02      	bgt.n	8007496 <USBD_GetConfig+0x2e>
 8007490:	2b00      	cmp	r3, #0
 8007492:	dc03      	bgt.n	800749c <USBD_GetConfig+0x34>
 8007494:	e015      	b.n	80074c2 <USBD_GetConfig+0x5a>
 8007496:	2b03      	cmp	r3, #3
 8007498:	d00b      	beq.n	80074b2 <USBD_GetConfig+0x4a>
 800749a:	e012      	b.n	80074c2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	3308      	adds	r3, #8
 80074a6:	2201      	movs	r2, #1
 80074a8:	4619      	mov	r1, r3
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f93c 	bl	8007728 <USBD_CtlSendData>
        break;
 80074b0:	e00c      	b.n	80074cc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3304      	adds	r3, #4
 80074b6:	2201      	movs	r2, #1
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f934 	bl	8007728 <USBD_CtlSendData>
        break;
 80074c0:	e004      	b.n	80074cc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f8be 	bl	8007646 <USBD_CtlError>
        break;
 80074ca:	bf00      	nop
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	3b01      	subs	r3, #1
 80074e8:	2b02      	cmp	r3, #2
 80074ea:	d81e      	bhi.n	800752a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	88db      	ldrh	r3, [r3, #6]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	d004      	beq.n	80074fe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80074f4:	6839      	ldr	r1, [r7, #0]
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f8a5 	bl	8007646 <USBD_CtlError>
        break;
 80074fc:	e01a      	b.n	8007534 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2201      	movs	r2, #1
 8007502:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800750a:	2b00      	cmp	r3, #0
 800750c:	d005      	beq.n	800751a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	f043 0202 	orr.w	r2, r3, #2
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	330c      	adds	r3, #12
 800751e:	2202      	movs	r2, #2
 8007520:	4619      	mov	r1, r3
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f900 	bl	8007728 <USBD_CtlSendData>
      break;
 8007528:	e004      	b.n	8007534 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f88a 	bl	8007646 <USBD_CtlError>
      break;
 8007532:	bf00      	nop
  }
}
 8007534:	bf00      	nop
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	885b      	ldrh	r3, [r3, #2]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d107      	bne.n	800755e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f940 	bl	80077dc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800755c:	e013      	b.n	8007586 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	885b      	ldrh	r3, [r3, #2]
 8007562:	2b02      	cmp	r3, #2
 8007564:	d10b      	bne.n	800757e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	889b      	ldrh	r3, [r3, #4]
 800756a:	0a1b      	lsrs	r3, r3, #8
 800756c:	b29b      	uxth	r3, r3
 800756e:	b2da      	uxtb	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 f930 	bl	80077dc <USBD_CtlSendStatus>
}
 800757c:	e003      	b.n	8007586 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800757e:	6839      	ldr	r1, [r7, #0]
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f860 	bl	8007646 <USBD_CtlError>
}
 8007586:	bf00      	nop
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b082      	sub	sp, #8
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	3b01      	subs	r3, #1
 80075a2:	2b02      	cmp	r3, #2
 80075a4:	d80b      	bhi.n	80075be <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	885b      	ldrh	r3, [r3, #2]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d10c      	bne.n	80075c8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	2200      	movs	r2, #0
 80075b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 f910 	bl	80077dc <USBD_CtlSendStatus>
      }
      break;
 80075bc:	e004      	b.n	80075c8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075be:	6839      	ldr	r1, [r7, #0]
 80075c0:	6878      	ldr	r0, [r7, #4]
 80075c2:	f000 f840 	bl	8007646 <USBD_CtlError>
      break;
 80075c6:	e000      	b.n	80075ca <USBD_ClrFeature+0x3c>
      break;
 80075c8:	bf00      	nop
  }
}
 80075ca:	bf00      	nop
 80075cc:	3708      	adds	r7, #8
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}

080075d2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80075d2:	b580      	push	{r7, lr}
 80075d4:	b084      	sub	sp, #16
 80075d6:	af00      	add	r7, sp, #0
 80075d8:	6078      	str	r0, [r7, #4]
 80075da:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	781a      	ldrb	r2, [r3, #0]
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	3301      	adds	r3, #1
 80075ec:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	3301      	adds	r3, #1
 80075fa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80075fc:	68f8      	ldr	r0, [r7, #12]
 80075fe:	f7ff fa40 	bl	8006a82 <SWAPBYTE>
 8007602:	4603      	mov	r3, r0
 8007604:	461a      	mov	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3301      	adds	r3, #1
 800760e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3301      	adds	r3, #1
 8007614:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007616:	68f8      	ldr	r0, [r7, #12]
 8007618:	f7ff fa33 	bl	8006a82 <SWAPBYTE>
 800761c:	4603      	mov	r3, r0
 800761e:	461a      	mov	r2, r3
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	3301      	adds	r3, #1
 8007628:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3301      	adds	r3, #1
 800762e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f7ff fa26 	bl	8006a82 <SWAPBYTE>
 8007636:	4603      	mov	r3, r0
 8007638:	461a      	mov	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	80da      	strh	r2, [r3, #6]
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b082      	sub	sp, #8
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
 800764e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007650:	2180      	movs	r1, #128	; 0x80
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fcb2 	bl	8007fbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007658:	2100      	movs	r1, #0
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 fcae 	bl	8007fbc <USBD_LL_StallEP>
}
 8007660:	bf00      	nop
 8007662:	3708      	adds	r7, #8
 8007664:	46bd      	mov	sp, r7
 8007666:	bd80      	pop	{r7, pc}

08007668 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	60b9      	str	r1, [r7, #8]
 8007672:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007674:	2300      	movs	r3, #0
 8007676:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d036      	beq.n	80076ec <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007682:	6938      	ldr	r0, [r7, #16]
 8007684:	f000 f836 	bl	80076f4 <USBD_GetLen>
 8007688:	4603      	mov	r3, r0
 800768a:	3301      	adds	r3, #1
 800768c:	b29b      	uxth	r3, r3
 800768e:	005b      	lsls	r3, r3, #1
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	4413      	add	r3, r2
 800769c:	687a      	ldr	r2, [r7, #4]
 800769e:	7812      	ldrb	r2, [r2, #0]
 80076a0:	701a      	strb	r2, [r3, #0]
  idx++;
 80076a2:	7dfb      	ldrb	r3, [r7, #23]
 80076a4:	3301      	adds	r3, #1
 80076a6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	4413      	add	r3, r2
 80076ae:	2203      	movs	r2, #3
 80076b0:	701a      	strb	r2, [r3, #0]
  idx++;
 80076b2:	7dfb      	ldrb	r3, [r7, #23]
 80076b4:	3301      	adds	r3, #1
 80076b6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076b8:	e013      	b.n	80076e2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076ba:	7dfb      	ldrb	r3, [r7, #23]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	4413      	add	r3, r2
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	7812      	ldrb	r2, [r2, #0]
 80076c4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	3301      	adds	r3, #1
 80076ca:	613b      	str	r3, [r7, #16]
    idx++;
 80076cc:	7dfb      	ldrb	r3, [r7, #23]
 80076ce:	3301      	adds	r3, #1
 80076d0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	4413      	add	r3, r2
 80076d8:	2200      	movs	r2, #0
 80076da:	701a      	strb	r2, [r3, #0]
    idx++;
 80076dc:	7dfb      	ldrb	r3, [r7, #23]
 80076de:	3301      	adds	r3, #1
 80076e0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e7      	bne.n	80076ba <USBD_GetString+0x52>
 80076ea:	e000      	b.n	80076ee <USBD_GetString+0x86>
    return;
 80076ec:	bf00      	nop
  }
}
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007704:	e005      	b.n	8007712 <USBD_GetLen+0x1e>
  {
    len++;
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	3301      	adds	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	3301      	adds	r3, #1
 8007710:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007712:	68bb      	ldr	r3, [r7, #8]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1f5      	bne.n	8007706 <USBD_GetLen+0x12>
  }

  return len;
 800771a:	7bfb      	ldrb	r3, [r7, #15]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2202      	movs	r2, #2
 8007738:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	687a      	ldr	r2, [r7, #4]
 8007746:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	2100      	movs	r1, #0
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f000 fcbd 	bl	80080ce <USBD_LL_Transmit>

  return USBD_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	2100      	movs	r1, #0
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 fcac 	bl	80080ce <USBD_LL_Transmit>

  return USBD_OK;
 8007776:	2300      	movs	r3, #0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3710      	adds	r7, #16
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b084      	sub	sp, #16
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2203      	movs	r2, #3
 8007790:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	687a      	ldr	r2, [r7, #4]
 80077a0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	2100      	movs	r1, #0
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f000 fcb0 	bl	8008110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	2100      	movs	r1, #0
 80077cc:	68f8      	ldr	r0, [r7, #12]
 80077ce:	f000 fc9f 	bl	8008110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b082      	sub	sp, #8
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2204      	movs	r2, #4
 80077e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077ec:	2300      	movs	r3, #0
 80077ee:	2200      	movs	r2, #0
 80077f0:	2100      	movs	r1, #0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fc6b 	bl	80080ce <USBD_LL_Transmit>

  return USBD_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}

08007802 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007802:	b580      	push	{r7, lr}
 8007804:	b082      	sub	sp, #8
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2205      	movs	r2, #5
 800780e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007812:	2300      	movs	r3, #0
 8007814:	2200      	movs	r2, #0
 8007816:	2100      	movs	r1, #0
 8007818:	6878      	ldr	r0, [r7, #4]
 800781a:	f000 fc79 	bl	8008110 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800782c:	2200      	movs	r2, #0
 800782e:	4912      	ldr	r1, [pc, #72]	; (8007878 <MX_USB_DEVICE_Init+0x50>)
 8007830:	4812      	ldr	r0, [pc, #72]	; (800787c <MX_USB_DEVICE_Init+0x54>)
 8007832:	f7fe fd06 	bl	8006242 <USBD_Init>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d001      	beq.n	8007840 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800783c:	f7f9 fc20 	bl	8001080 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007840:	490f      	ldr	r1, [pc, #60]	; (8007880 <MX_USB_DEVICE_Init+0x58>)
 8007842:	480e      	ldr	r0, [pc, #56]	; (800787c <MX_USB_DEVICE_Init+0x54>)
 8007844:	f7fe fd2d 	bl	80062a2 <USBD_RegisterClass>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800784e:	f7f9 fc17 	bl	8001080 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007852:	490c      	ldr	r1, [pc, #48]	; (8007884 <MX_USB_DEVICE_Init+0x5c>)
 8007854:	4809      	ldr	r0, [pc, #36]	; (800787c <MX_USB_DEVICE_Init+0x54>)
 8007856:	f7fe fc9b 	bl	8006190 <USBD_CDC_RegisterInterface>
 800785a:	4603      	mov	r3, r0
 800785c:	2b00      	cmp	r3, #0
 800785e:	d001      	beq.n	8007864 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007860:	f7f9 fc0e 	bl	8001080 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007864:	4805      	ldr	r0, [pc, #20]	; (800787c <MX_USB_DEVICE_Init+0x54>)
 8007866:	f7fe fd52 	bl	800630e <USBD_Start>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007870:	f7f9 fc06 	bl	8001080 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007874:	bf00      	nop
 8007876:	bd80      	pop	{r7, pc}
 8007878:	200000ac 	.word	0x200000ac
 800787c:	200001d0 	.word	0x200001d0
 8007880:	20000018 	.word	0x20000018
 8007884:	20000098 	.word	0x20000098

08007888 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800788c:	2200      	movs	r2, #0
 800788e:	4905      	ldr	r1, [pc, #20]	; (80078a4 <CDC_Init_FS+0x1c>)
 8007890:	4805      	ldr	r0, [pc, #20]	; (80078a8 <CDC_Init_FS+0x20>)
 8007892:	f7fe fc97 	bl	80061c4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007896:	4905      	ldr	r1, [pc, #20]	; (80078ac <CDC_Init_FS+0x24>)
 8007898:	4803      	ldr	r0, [pc, #12]	; (80078a8 <CDC_Init_FS+0x20>)
 800789a:	f7fe fcb5 	bl	8006208 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800789e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	bd80      	pop	{r7, pc}
 80078a4:	20000cac 	.word	0x20000cac
 80078a8:	200001d0 	.word	0x200001d0
 80078ac:	200004ac 	.word	0x200004ac

080078b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80078b0:	b480      	push	{r7}
 80078b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80078b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr

080078c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	71fb      	strb	r3, [r7, #7]
 80078cc:	4613      	mov	r3, r2
 80078ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80078d0:	79fb      	ldrb	r3, [r7, #7]
 80078d2:	2b23      	cmp	r3, #35	; 0x23
 80078d4:	d84a      	bhi.n	800796c <CDC_Control_FS+0xac>
 80078d6:	a201      	add	r2, pc, #4	; (adr r2, 80078dc <CDC_Control_FS+0x1c>)
 80078d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078dc:	0800796d 	.word	0x0800796d
 80078e0:	0800796d 	.word	0x0800796d
 80078e4:	0800796d 	.word	0x0800796d
 80078e8:	0800796d 	.word	0x0800796d
 80078ec:	0800796d 	.word	0x0800796d
 80078f0:	0800796d 	.word	0x0800796d
 80078f4:	0800796d 	.word	0x0800796d
 80078f8:	0800796d 	.word	0x0800796d
 80078fc:	0800796d 	.word	0x0800796d
 8007900:	0800796d 	.word	0x0800796d
 8007904:	0800796d 	.word	0x0800796d
 8007908:	0800796d 	.word	0x0800796d
 800790c:	0800796d 	.word	0x0800796d
 8007910:	0800796d 	.word	0x0800796d
 8007914:	0800796d 	.word	0x0800796d
 8007918:	0800796d 	.word	0x0800796d
 800791c:	0800796d 	.word	0x0800796d
 8007920:	0800796d 	.word	0x0800796d
 8007924:	0800796d 	.word	0x0800796d
 8007928:	0800796d 	.word	0x0800796d
 800792c:	0800796d 	.word	0x0800796d
 8007930:	0800796d 	.word	0x0800796d
 8007934:	0800796d 	.word	0x0800796d
 8007938:	0800796d 	.word	0x0800796d
 800793c:	0800796d 	.word	0x0800796d
 8007940:	0800796d 	.word	0x0800796d
 8007944:	0800796d 	.word	0x0800796d
 8007948:	0800796d 	.word	0x0800796d
 800794c:	0800796d 	.word	0x0800796d
 8007950:	0800796d 	.word	0x0800796d
 8007954:	0800796d 	.word	0x0800796d
 8007958:	0800796d 	.word	0x0800796d
 800795c:	0800796d 	.word	0x0800796d
 8007960:	0800796d 	.word	0x0800796d
 8007964:	0800796d 	.word	0x0800796d
 8007968:	0800796d 	.word	0x0800796d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800796c:	bf00      	nop
  }

  return (USBD_OK);
 800796e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
//    uint8_t len = (uint8_t)*Len;
  //  memcpy(recivebuffer, Buf, len);  // copy the data to the buffer
 //   memset(Buf, '\0', len);   // clear the Buf also
//  return (USBD_OK);
  /* USER CODE END 6 */
}
 8007986:	bf00      	nop
 8007988:	4618      	mov	r0, r3
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007994:	b480      	push	{r7}
 8007996:	b087      	sub	sp, #28
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80079a2:	2300      	movs	r3, #0
 80079a4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
//  UNUSED(Buf);
 // UNUSED(Len);
//  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80079a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	371c      	adds	r7, #28
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
	...

080079b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	4603      	mov	r3, r0
 80079c0:	6039      	str	r1, [r7, #0]
 80079c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	2212      	movs	r2, #18
 80079c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80079ca:	4b03      	ldr	r3, [pc, #12]	; (80079d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr
 80079d8:	200000c8 	.word	0x200000c8

080079dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	4603      	mov	r3, r0
 80079e4:	6039      	str	r1, [r7, #0]
 80079e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2204      	movs	r2, #4
 80079ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80079ee:	4b03      	ldr	r3, [pc, #12]	; (80079fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	370c      	adds	r7, #12
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr
 80079fc:	200000dc 	.word	0x200000dc

08007a00 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b082      	sub	sp, #8
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	4603      	mov	r3, r0
 8007a08:	6039      	str	r1, [r7, #0]
 8007a0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a0c:	79fb      	ldrb	r3, [r7, #7]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a12:	683a      	ldr	r2, [r7, #0]
 8007a14:	4907      	ldr	r1, [pc, #28]	; (8007a34 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a16:	4808      	ldr	r0, [pc, #32]	; (8007a38 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a18:	f7ff fe26 	bl	8007668 <USBD_GetString>
 8007a1c:	e004      	b.n	8007a28 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007a1e:	683a      	ldr	r2, [r7, #0]
 8007a20:	4904      	ldr	r1, [pc, #16]	; (8007a34 <USBD_FS_ProductStrDescriptor+0x34>)
 8007a22:	4805      	ldr	r0, [pc, #20]	; (8007a38 <USBD_FS_ProductStrDescriptor+0x38>)
 8007a24:	f7ff fe20 	bl	8007668 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	3708      	adds	r7, #8
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd80      	pop	{r7, pc}
 8007a32:	bf00      	nop
 8007a34:	200014ac 	.word	0x200014ac
 8007a38:	08008270 	.word	0x08008270

08007a3c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	4603      	mov	r3, r0
 8007a44:	6039      	str	r1, [r7, #0]
 8007a46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	4904      	ldr	r1, [pc, #16]	; (8007a5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007a4c:	4804      	ldr	r0, [pc, #16]	; (8007a60 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007a4e:	f7ff fe0b 	bl	8007668 <USBD_GetString>
  return USBD_StrDesc;
 8007a52:	4b02      	ldr	r3, [pc, #8]	; (8007a5c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	200014ac 	.word	0x200014ac
 8007a60:	08008288 	.word	0x08008288

08007a64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	221a      	movs	r2, #26
 8007a74:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007a76:	f000 f843 	bl	8007b00 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007a7a:	4b02      	ldr	r3, [pc, #8]	; (8007a84 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	200000e0 	.word	0x200000e0

08007a88 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b082      	sub	sp, #8
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	4603      	mov	r3, r0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007a94:	79fb      	ldrb	r3, [r7, #7]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d105      	bne.n	8007aa6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007a9a:	683a      	ldr	r2, [r7, #0]
 8007a9c:	4907      	ldr	r1, [pc, #28]	; (8007abc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a9e:	4808      	ldr	r0, [pc, #32]	; (8007ac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007aa0:	f7ff fde2 	bl	8007668 <USBD_GetString>
 8007aa4:	e004      	b.n	8007ab0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007aa6:	683a      	ldr	r2, [r7, #0]
 8007aa8:	4904      	ldr	r1, [pc, #16]	; (8007abc <USBD_FS_ConfigStrDescriptor+0x34>)
 8007aaa:	4805      	ldr	r0, [pc, #20]	; (8007ac0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007aac:	f7ff fddc 	bl	8007668 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ab0:	4b02      	ldr	r3, [pc, #8]	; (8007abc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	200014ac 	.word	0x200014ac
 8007ac0:	0800829c 	.word	0x0800829c

08007ac4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	4603      	mov	r3, r0
 8007acc:	6039      	str	r1, [r7, #0]
 8007ace:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d105      	bne.n	8007ae2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ad6:	683a      	ldr	r2, [r7, #0]
 8007ad8:	4907      	ldr	r1, [pc, #28]	; (8007af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ada:	4808      	ldr	r0, [pc, #32]	; (8007afc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007adc:	f7ff fdc4 	bl	8007668 <USBD_GetString>
 8007ae0:	e004      	b.n	8007aec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ae2:	683a      	ldr	r2, [r7, #0]
 8007ae4:	4904      	ldr	r1, [pc, #16]	; (8007af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007ae6:	4805      	ldr	r0, [pc, #20]	; (8007afc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ae8:	f7ff fdbe 	bl	8007668 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007aec:	4b02      	ldr	r3, [pc, #8]	; (8007af8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}
 8007af6:	bf00      	nop
 8007af8:	200014ac 	.word	0x200014ac
 8007afc:	080082a8 	.word	0x080082a8

08007b00 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007b06:	4b0f      	ldr	r3, [pc, #60]	; (8007b44 <Get_SerialNum+0x44>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007b0c:	4b0e      	ldr	r3, [pc, #56]	; (8007b48 <Get_SerialNum+0x48>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007b12:	4b0e      	ldr	r3, [pc, #56]	; (8007b4c <Get_SerialNum+0x4c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007b18:	68fa      	ldr	r2, [r7, #12]
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d009      	beq.n	8007b3a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007b26:	2208      	movs	r2, #8
 8007b28:	4909      	ldr	r1, [pc, #36]	; (8007b50 <Get_SerialNum+0x50>)
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f000 f814 	bl	8007b58 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007b30:	2204      	movs	r2, #4
 8007b32:	4908      	ldr	r1, [pc, #32]	; (8007b54 <Get_SerialNum+0x54>)
 8007b34:	68b8      	ldr	r0, [r7, #8]
 8007b36:	f000 f80f 	bl	8007b58 <IntToUnicode>
  }
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	1fff7a10 	.word	0x1fff7a10
 8007b48:	1fff7a14 	.word	0x1fff7a14
 8007b4c:	1fff7a18 	.word	0x1fff7a18
 8007b50:	200000e2 	.word	0x200000e2
 8007b54:	200000f2 	.word	0x200000f2

08007b58 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b087      	sub	sp, #28
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	60f8      	str	r0, [r7, #12]
 8007b60:	60b9      	str	r1, [r7, #8]
 8007b62:	4613      	mov	r3, r2
 8007b64:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007b66:	2300      	movs	r3, #0
 8007b68:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	75fb      	strb	r3, [r7, #23]
 8007b6e:	e027      	b.n	8007bc0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	0f1b      	lsrs	r3, r3, #28
 8007b74:	2b09      	cmp	r3, #9
 8007b76:	d80b      	bhi.n	8007b90 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	0f1b      	lsrs	r3, r3, #28
 8007b7c:	b2da      	uxtb	r2, r3
 8007b7e:	7dfb      	ldrb	r3, [r7, #23]
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	4619      	mov	r1, r3
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	440b      	add	r3, r1
 8007b88:	3230      	adds	r2, #48	; 0x30
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]
 8007b8e:	e00a      	b.n	8007ba6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	0f1b      	lsrs	r3, r3, #28
 8007b94:	b2da      	uxtb	r2, r3
 8007b96:	7dfb      	ldrb	r3, [r7, #23]
 8007b98:	005b      	lsls	r3, r3, #1
 8007b9a:	4619      	mov	r1, r3
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	440b      	add	r3, r1
 8007ba0:	3237      	adds	r2, #55	; 0x37
 8007ba2:	b2d2      	uxtb	r2, r2
 8007ba4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	005b      	lsls	r3, r3, #1
 8007bb0:	3301      	adds	r3, #1
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007bba:	7dfb      	ldrb	r3, [r7, #23]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	75fb      	strb	r3, [r7, #23]
 8007bc0:	7dfa      	ldrb	r2, [r7, #23]
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d3d3      	bcc.n	8007b70 <IntToUnicode+0x18>
  }
}
 8007bc8:	bf00      	nop
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	; 0x28
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007be0:	f107 0314 	add.w	r3, r7, #20
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	605a      	str	r2, [r3, #4]
 8007bea:	609a      	str	r2, [r3, #8]
 8007bec:	60da      	str	r2, [r3, #12]
 8007bee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007bf8:	d13a      	bne.n	8007c70 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	613b      	str	r3, [r7, #16]
 8007bfe:	4b1e      	ldr	r3, [pc, #120]	; (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c02:	4a1d      	ldr	r2, [pc, #116]	; (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c04:	f043 0301 	orr.w	r3, r3, #1
 8007c08:	6313      	str	r3, [r2, #48]	; 0x30
 8007c0a:	4b1b      	ldr	r3, [pc, #108]	; (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0e:	f003 0301 	and.w	r3, r3, #1
 8007c12:	613b      	str	r3, [r7, #16]
 8007c14:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007c16:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c20:	2300      	movs	r3, #0
 8007c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c24:	2303      	movs	r3, #3
 8007c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007c28:	230a      	movs	r3, #10
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c2c:	f107 0314 	add.w	r3, r7, #20
 8007c30:	4619      	mov	r1, r3
 8007c32:	4812      	ldr	r0, [pc, #72]	; (8007c7c <HAL_PCD_MspInit+0xa4>)
 8007c34:	f7fa f934 	bl	8001ea0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007c38:	4b0f      	ldr	r3, [pc, #60]	; (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c3c:	4a0e      	ldr	r2, [pc, #56]	; (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c42:	6353      	str	r3, [r2, #52]	; 0x34
 8007c44:	2300      	movs	r3, #0
 8007c46:	60fb      	str	r3, [r7, #12]
 8007c48:	4b0b      	ldr	r3, [pc, #44]	; (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c4c:	4a0a      	ldr	r2, [pc, #40]	; (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007c52:	6453      	str	r3, [r2, #68]	; 0x44
 8007c54:	4b08      	ldr	r3, [pc, #32]	; (8007c78 <HAL_PCD_MspInit+0xa0>)
 8007c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c5c:	60fb      	str	r3, [r7, #12]
 8007c5e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007c60:	2200      	movs	r2, #0
 8007c62:	2100      	movs	r1, #0
 8007c64:	2043      	movs	r0, #67	; 0x43
 8007c66:	f7fa f8c8 	bl	8001dfa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007c6a:	2043      	movs	r0, #67	; 0x43
 8007c6c:	f7fa f8e1 	bl	8001e32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007c70:	bf00      	nop
 8007c72:	3728      	adds	r7, #40	; 0x28
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	40023800 	.word	0x40023800
 8007c7c:	40020000 	.word	0x40020000

08007c80 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b082      	sub	sp, #8
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007c94:	4619      	mov	r1, r3
 8007c96:	4610      	mov	r0, r2
 8007c98:	f7fe fb86 	bl	80063a8 <USBD_LL_SetupStage>
}
 8007c9c:	bf00      	nop
 8007c9e:	3708      	adds	r7, #8
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b082      	sub	sp, #8
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
 8007cac:	460b      	mov	r3, r1
 8007cae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007cb6:	78fa      	ldrb	r2, [r7, #3]
 8007cb8:	6879      	ldr	r1, [r7, #4]
 8007cba:	4613      	mov	r3, r2
 8007cbc:	00db      	lsls	r3, r3, #3
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	440b      	add	r3, r1
 8007cc4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	78fb      	ldrb	r3, [r7, #3]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	f7fe fbc0 	bl	8006452 <USBD_LL_DataOutStage>
}
 8007cd2:	bf00      	nop
 8007cd4:	3708      	adds	r7, #8
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b082      	sub	sp, #8
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007cec:	78fa      	ldrb	r2, [r7, #3]
 8007cee:	6879      	ldr	r1, [r7, #4]
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	00db      	lsls	r3, r3, #3
 8007cf4:	4413      	add	r3, r2
 8007cf6:	009b      	lsls	r3, r3, #2
 8007cf8:	440b      	add	r3, r1
 8007cfa:	334c      	adds	r3, #76	; 0x4c
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	78fb      	ldrb	r3, [r7, #3]
 8007d00:	4619      	mov	r1, r3
 8007d02:	f7fe fc59 	bl	80065b8 <USBD_LL_DataInStage>
}
 8007d06:	bf00      	nop
 8007d08:	3708      	adds	r7, #8
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b082      	sub	sp, #8
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	f7fe fd8d 	bl	800683c <USBD_LL_SOF>
}
 8007d22:	bf00      	nop
 8007d24:	3708      	adds	r7, #8
 8007d26:	46bd      	mov	sp, r7
 8007d28:	bd80      	pop	{r7, pc}

08007d2a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007d32:	2301      	movs	r3, #1
 8007d34:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	68db      	ldr	r3, [r3, #12]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d102      	bne.n	8007d44 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	73fb      	strb	r3, [r7, #15]
 8007d42:	e008      	b.n	8007d56 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	2b02      	cmp	r3, #2
 8007d4a:	d102      	bne.n	8007d52 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	73fb      	strb	r3, [r7, #15]
 8007d50:	e001      	b.n	8007d56 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8007d52:	f7f9 f995 	bl	8001080 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d5c:	7bfa      	ldrb	r2, [r7, #15]
 8007d5e:	4611      	mov	r1, r2
 8007d60:	4618      	mov	r0, r3
 8007d62:	f7fe fd2d 	bl	80067c0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f7fe fcd5 	bl	800671c <USBD_LL_Reset>
}
 8007d72:	bf00      	nop
 8007d74:	3710      	adds	r7, #16
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
	...

08007d7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe fd28 	bl	80067e0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6812      	ldr	r2, [r2, #0]
 8007d9e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007da2:	f043 0301 	orr.w	r3, r3, #1
 8007da6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a1b      	ldr	r3, [r3, #32]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d005      	beq.n	8007dbc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007db0:	4b04      	ldr	r3, [pc, #16]	; (8007dc4 <HAL_PCD_SuspendCallback+0x48>)
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	4a03      	ldr	r2, [pc, #12]	; (8007dc4 <HAL_PCD_SuspendCallback+0x48>)
 8007db6:	f043 0306 	orr.w	r3, r3, #6
 8007dba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007dbc:	bf00      	nop
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	e000ed00 	.word	0xe000ed00

08007dc8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe fd18 	bl	800680c <USBD_LL_Resume>
}
 8007ddc:	bf00      	nop
 8007dde:	3708      	adds	r7, #8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007de4:	b580      	push	{r7, lr}
 8007de6:	b082      	sub	sp, #8
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	460b      	mov	r3, r1
 8007dee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007df6:	78fa      	ldrb	r2, [r7, #3]
 8007df8:	4611      	mov	r1, r2
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	f7fe fd70 	bl	80068e0 <USBD_LL_IsoOUTIncomplete>
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	460b      	mov	r3, r1
 8007e12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e1a:	78fa      	ldrb	r2, [r7, #3]
 8007e1c:	4611      	mov	r1, r2
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f7fe fd2c 	bl	800687c <USBD_LL_IsoINIncomplete>
}
 8007e24:	bf00      	nop
 8007e26:	3708      	adds	r7, #8
 8007e28:	46bd      	mov	sp, r7
 8007e2a:	bd80      	pop	{r7, pc}

08007e2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fe fd82 	bl	8006944 <USBD_LL_DevConnected>
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007e56:	4618      	mov	r0, r3
 8007e58:	f7fe fd7f 	bl	800695a <USBD_LL_DevDisconnected>
}
 8007e5c:	bf00      	nop
 8007e5e:	3708      	adds	r7, #8
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b082      	sub	sp, #8
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d13c      	bne.n	8007eee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007e74:	4a20      	ldr	r2, [pc, #128]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	4a1e      	ldr	r2, [pc, #120]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007e80:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007e84:	4b1c      	ldr	r3, [pc, #112]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007e86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007e8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007e8c:	4b1a      	ldr	r3, [pc, #104]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007e8e:	2204      	movs	r2, #4
 8007e90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007e92:	4b19      	ldr	r3, [pc, #100]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007e94:	2202      	movs	r2, #2
 8007e96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e98:	4b17      	ldr	r3, [pc, #92]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007e9e:	4b16      	ldr	r3, [pc, #88]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007ea0:	2202      	movs	r2, #2
 8007ea2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007ea4:	4b14      	ldr	r3, [pc, #80]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007eaa:	4b13      	ldr	r3, [pc, #76]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007eb0:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007eb6:	4b10      	ldr	r3, [pc, #64]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007ebc:	4b0e      	ldr	r3, [pc, #56]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007ec2:	480d      	ldr	r0, [pc, #52]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007ec4:	f7fa f9a1 	bl	800220a <HAL_PCD_Init>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d001      	beq.n	8007ed2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007ece:	f7f9 f8d7 	bl	8001080 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007ed2:	2180      	movs	r1, #128	; 0x80
 8007ed4:	4808      	ldr	r0, [pc, #32]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007ed6:	f7fb fbf8 	bl	80036ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007eda:	2240      	movs	r2, #64	; 0x40
 8007edc:	2100      	movs	r1, #0
 8007ede:	4806      	ldr	r0, [pc, #24]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007ee0:	f7fb fbac 	bl	800363c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ee4:	2280      	movs	r2, #128	; 0x80
 8007ee6:	2101      	movs	r1, #1
 8007ee8:	4803      	ldr	r0, [pc, #12]	; (8007ef8 <USBD_LL_Init+0x94>)
 8007eea:	f7fb fba7 	bl	800363c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	200016ac 	.word	0x200016ac

08007efc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b084      	sub	sp, #16
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7fa fa96 	bl	8002444 <HAL_PCD_Start>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	4618      	mov	r0, r3
 8007f20:	f000 f942 	bl	80081a8 <USBD_Get_USB_Status>
 8007f24:	4603      	mov	r3, r0
 8007f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b084      	sub	sp, #16
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
 8007f3a:	4608      	mov	r0, r1
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	461a      	mov	r2, r3
 8007f40:	4603      	mov	r3, r0
 8007f42:	70fb      	strb	r3, [r7, #3]
 8007f44:	460b      	mov	r3, r1
 8007f46:	70bb      	strb	r3, [r7, #2]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f5a:	78bb      	ldrb	r3, [r7, #2]
 8007f5c:	883a      	ldrh	r2, [r7, #0]
 8007f5e:	78f9      	ldrb	r1, [r7, #3]
 8007f60:	f7fa ff67 	bl	8002e32 <HAL_PCD_EP_Open>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f68:	7bfb      	ldrb	r3, [r7, #15]
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f000 f91c 	bl	80081a8 <USBD_Get_USB_Status>
 8007f70:	4603      	mov	r3, r0
 8007f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}

08007f7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f7e:	b580      	push	{r7, lr}
 8007f80:	b084      	sub	sp, #16
 8007f82:	af00      	add	r7, sp, #0
 8007f84:	6078      	str	r0, [r7, #4]
 8007f86:	460b      	mov	r3, r1
 8007f88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f98:	78fa      	ldrb	r2, [r7, #3]
 8007f9a:	4611      	mov	r1, r2
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7fa ffb0 	bl	8002f02 <HAL_PCD_EP_Close>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	4618      	mov	r0, r3
 8007faa:	f000 f8fd 	bl	80081a8 <USBD_Get_USB_Status>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	3710      	adds	r7, #16
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	bd80      	pop	{r7, pc}

08007fbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc8:	2300      	movs	r3, #0
 8007fca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fd6:	78fa      	ldrb	r2, [r7, #3]
 8007fd8:	4611      	mov	r1, r2
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f7fb f888 	bl	80030f0 <HAL_PCD_EP_SetStall>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f000 f8de 	bl	80081a8 <USBD_Get_USB_Status>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}

08007ffa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008006:	2300      	movs	r3, #0
 8008008:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800800a:	2300      	movs	r3, #0
 800800c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008014:	78fa      	ldrb	r2, [r7, #3]
 8008016:	4611      	mov	r1, r2
 8008018:	4618      	mov	r0, r3
 800801a:	f7fb f8cd 	bl	80031b8 <HAL_PCD_EP_ClrStall>
 800801e:	4603      	mov	r3, r0
 8008020:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	4618      	mov	r0, r3
 8008026:	f000 f8bf 	bl	80081a8 <USBD_Get_USB_Status>
 800802a:	4603      	mov	r3, r0
 800802c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800802e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800804a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800804c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008050:	2b00      	cmp	r3, #0
 8008052:	da0b      	bge.n	800806c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008054:	78fb      	ldrb	r3, [r7, #3]
 8008056:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800805a:	68f9      	ldr	r1, [r7, #12]
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	333e      	adds	r3, #62	; 0x3e
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	e00b      	b.n	8008084 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008072:	68f9      	ldr	r1, [r7, #12]
 8008074:	4613      	mov	r3, r2
 8008076:	00db      	lsls	r3, r3, #3
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8008082:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008084:	4618      	mov	r0, r3
 8008086:	3714      	adds	r7, #20
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr

08008090 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b084      	sub	sp, #16
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80080aa:	78fa      	ldrb	r2, [r7, #3]
 80080ac:	4611      	mov	r1, r2
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fa fe9a 	bl	8002de8 <HAL_PCD_SetAddress>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f000 f874 	bl	80081a8 <USBD_Get_USB_Status>
 80080c0:	4603      	mov	r3, r0
 80080c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	3710      	adds	r7, #16
 80080ca:	46bd      	mov	sp, r7
 80080cc:	bd80      	pop	{r7, pc}

080080ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b086      	sub	sp, #24
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	60f8      	str	r0, [r7, #12]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
 80080da:	460b      	mov	r3, r1
 80080dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080de:	2300      	movs	r3, #0
 80080e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e2:	2300      	movs	r3, #0
 80080e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80080ec:	7af9      	ldrb	r1, [r7, #11]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	f7fa ffb3 	bl	800305c <HAL_PCD_EP_Transmit>
 80080f6:	4603      	mov	r3, r0
 80080f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080fa:	7dfb      	ldrb	r3, [r7, #23]
 80080fc:	4618      	mov	r0, r3
 80080fe:	f000 f853 	bl	80081a8 <USBD_Get_USB_Status>
 8008102:	4603      	mov	r3, r0
 8008104:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008106:	7dbb      	ldrb	r3, [r7, #22]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3718      	adds	r7, #24
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	607a      	str	r2, [r7, #4]
 800811a:	603b      	str	r3, [r7, #0]
 800811c:	460b      	mov	r3, r1
 800811e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008120:	2300      	movs	r3, #0
 8008122:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800812e:	7af9      	ldrb	r1, [r7, #11]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	f7fa ff2f 	bl	8002f96 <HAL_PCD_EP_Receive>
 8008138:	4603      	mov	r3, r0
 800813a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800813c:	7dfb      	ldrb	r3, [r7, #23]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 f832 	bl	80081a8 <USBD_Get_USB_Status>
 8008144:	4603      	mov	r3, r0
 8008146:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008148:	7dbb      	ldrb	r3, [r7, #22]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}

08008152 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008152:	b580      	push	{r7, lr}
 8008154:	b082      	sub	sp, #8
 8008156:	af00      	add	r7, sp, #0
 8008158:	6078      	str	r0, [r7, #4]
 800815a:	460b      	mov	r3, r1
 800815c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008164:	78fa      	ldrb	r2, [r7, #3]
 8008166:	4611      	mov	r1, r2
 8008168:	4618      	mov	r0, r3
 800816a:	f7fa ff5f 	bl	800302c <HAL_PCD_EP_GetRxCount>
 800816e:	4603      	mov	r3, r0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008180:	4b03      	ldr	r3, [pc, #12]	; (8008190 <USBD_static_malloc+0x18>)
}
 8008182:	4618      	mov	r0, r3
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	20001bb8 	.word	0x20001bb8

08008194 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]

}
 800819c:	bf00      	nop
 800819e:	370c      	adds	r7, #12
 80081a0:	46bd      	mov	sp, r7
 80081a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a6:	4770      	bx	lr

080081a8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	4603      	mov	r3, r0
 80081b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80081b6:	79fb      	ldrb	r3, [r7, #7]
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d817      	bhi.n	80081ec <USBD_Get_USB_Status+0x44>
 80081bc:	a201      	add	r2, pc, #4	; (adr r2, 80081c4 <USBD_Get_USB_Status+0x1c>)
 80081be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c2:	bf00      	nop
 80081c4:	080081d5 	.word	0x080081d5
 80081c8:	080081db 	.word	0x080081db
 80081cc:	080081e1 	.word	0x080081e1
 80081d0:	080081e7 	.word	0x080081e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80081d4:	2300      	movs	r3, #0
 80081d6:	73fb      	strb	r3, [r7, #15]
    break;
 80081d8:	e00b      	b.n	80081f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80081da:	2303      	movs	r3, #3
 80081dc:	73fb      	strb	r3, [r7, #15]
    break;
 80081de:	e008      	b.n	80081f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80081e0:	2301      	movs	r3, #1
 80081e2:	73fb      	strb	r3, [r7, #15]
    break;
 80081e4:	e005      	b.n	80081f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80081e6:	2303      	movs	r3, #3
 80081e8:	73fb      	strb	r3, [r7, #15]
    break;
 80081ea:	e002      	b.n	80081f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80081ec:	2303      	movs	r3, #3
 80081ee:	73fb      	strb	r3, [r7, #15]
    break;
 80081f0:	bf00      	nop
  }
  return usb_status;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <__libc_init_array>:
 8008200:	b570      	push	{r4, r5, r6, lr}
 8008202:	4d0d      	ldr	r5, [pc, #52]	; (8008238 <__libc_init_array+0x38>)
 8008204:	4c0d      	ldr	r4, [pc, #52]	; (800823c <__libc_init_array+0x3c>)
 8008206:	1b64      	subs	r4, r4, r5
 8008208:	10a4      	asrs	r4, r4, #2
 800820a:	2600      	movs	r6, #0
 800820c:	42a6      	cmp	r6, r4
 800820e:	d109      	bne.n	8008224 <__libc_init_array+0x24>
 8008210:	4d0b      	ldr	r5, [pc, #44]	; (8008240 <__libc_init_array+0x40>)
 8008212:	4c0c      	ldr	r4, [pc, #48]	; (8008244 <__libc_init_array+0x44>)
 8008214:	f000 f820 	bl	8008258 <_init>
 8008218:	1b64      	subs	r4, r4, r5
 800821a:	10a4      	asrs	r4, r4, #2
 800821c:	2600      	movs	r6, #0
 800821e:	42a6      	cmp	r6, r4
 8008220:	d105      	bne.n	800822e <__libc_init_array+0x2e>
 8008222:	bd70      	pop	{r4, r5, r6, pc}
 8008224:	f855 3b04 	ldr.w	r3, [r5], #4
 8008228:	4798      	blx	r3
 800822a:	3601      	adds	r6, #1
 800822c:	e7ee      	b.n	800820c <__libc_init_array+0xc>
 800822e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008232:	4798      	blx	r3
 8008234:	3601      	adds	r6, #1
 8008236:	e7f2      	b.n	800821e <__libc_init_array+0x1e>
 8008238:	080082d0 	.word	0x080082d0
 800823c:	080082d0 	.word	0x080082d0
 8008240:	080082d0 	.word	0x080082d0
 8008244:	080082d4 	.word	0x080082d4

08008248 <memset>:
 8008248:	4402      	add	r2, r0
 800824a:	4603      	mov	r3, r0
 800824c:	4293      	cmp	r3, r2
 800824e:	d100      	bne.n	8008252 <memset+0xa>
 8008250:	4770      	bx	lr
 8008252:	f803 1b01 	strb.w	r1, [r3], #1
 8008256:	e7f9      	b.n	800824c <memset+0x4>

08008258 <_init>:
 8008258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825a:	bf00      	nop
 800825c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800825e:	bc08      	pop	{r3}
 8008260:	469e      	mov	lr, r3
 8008262:	4770      	bx	lr

08008264 <_fini>:
 8008264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008266:	bf00      	nop
 8008268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800826a:	bc08      	pop	{r3}
 800826c:	469e      	mov	lr, r3
 800826e:	4770      	bx	lr
